{
    "1": {
        "sentence": "There is at least 1 tower with a black block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_top(x)))"
    },
    "7": {
        "sentence": "There is one tower where a blue block is on top of a black block",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and exist(get_above(x)) and is_blue(unique(get_above(x)))))"
    },
    "12": {
        "sentence": "There is a black block bellow a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_obj(get_box_all_below(x), lambda y: is_black(y))))))"
    },
    "17": {
        "sentence": "There is 1 tower with at least 2 black blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 2)))"
    },
    "20": {
        "sentence": "There is a black block as the top of a tower with three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y)))))"
    },
    "21": {
        "sentence": "there are exactly two towers with a blue block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))) == 2"
    },
    "22": {
        "sentence": "there is exactly one tower with a yellow block at the base.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))) == 1"
    },
    "24": {
        "sentence": "there is a tower which has exactly one block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1))"
    },
    "26": {
        "sentence": "There is a four blocks tower and the top block is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_top(y) and is_blue(y)))))"
    },
    "30": {
        "sentence": "There are at least two black blocks above a blue block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and ge(count(filter_color(get_above(y), Color.BLACK)), 2)))))"
    },
    "31": {
        "sentence": "there is one tower with exactly two blocks which has blue block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "33": {
        "sentence": "There is 1 tower with 2 blocks stacked together of the same colour",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and exist(get_above(x)) and query_color(x) == query_color(unique(get_above(x)))))"
    },
    "35": {
        "sentence": "There are two black blocks as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_bottom(x))) >= 2"
    },
    "37": {
        "sentence": "There are two towers that has 2 black blocks each.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 2))), 2)"
    },
    "38": {
        "sentence": "there is at least one tower with exactly four blocks having black block at the base and blue block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_bottom(y) and is_black(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_top(y) and is_blue(y)))))"
    },
    "40": {
        "sentence": "1 tower has a yellow block at its base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))) == 1"
    },
    "44": {
        "sentence": "there is a tower with exactly three blocks having a yellow block at the top and base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y)))))"
    },
    "45": {
        "sentence": "there are at least two towers with a yellow block at the top",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))), 2)"
    },
    "46": {
        "sentence": "There are exactly two towers with at least two blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(x.all_items_in_box()), 2))) == 2"
    },
    "47": {
        "sentence": "There is 1 tower with a blue block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))) == 1"
    },
    "50": {
        "sentence": "There is a tower with a black base and yellow top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y)))))"
    },
    "53": {
        "sentence": "There is a box with 4 items and a blue item beneath the item on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_top(y) and count(get_below(y)) == 1 and Color.BLUE in get_set_colors(get_below(y))))))"
    },
    "56": {
        "sentence": "There is a black item touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x)))"
    },
    "60": {
        "sentence": "There is a black block between two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and exist(get_below(x)) and exist(get_above(x))))"
    },
    "61": {
        "sentence": "There are two towers with a blue base.",
        "lf": "ge(count(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_bottom(x))), 2)"
    },
    "62": {
        "sentence": "There is a tower with a yellow block at the top and a blue block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y)))))"
    },
    "63": {
        "sentence": "There is a box with 3 blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 3)))"
    },
    "64": {
        "sentence": "There are two towers with a yellow block at the top",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_yellow(x) and is_top(x))), 2)"
    },
    "66": {
        "sentence": "There is a box with at least 3 items and a blue one on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 3) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "67": {
        "sentence": "There is one tower that has two yellow blocks that are not attach with each other.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and NOT(is_yellow(x)) and exist(get_above(x)) and is_yellow(unique(get_above(x))) and exist(get_below(x)) and is_yellow(unique(get_below(x)))))"
    },
    "70": {
        "sentence": "There is a box with at least 2 yellow and 1 blue item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 2) and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1)))"
    },
    "81": {
        "sentence": "There is a yellow block as the top of a tower with more than two blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(x.all_items_in_box()), 2) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y)))))"
    },
    "82": {
        "sentence": "there is at least  one tower which has a blue block over a yellow block",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and exist(get_below(x)) and is_yellow(unique(get_below(x)))))"
    },
    "85": {
        "sentence": "there is exactly one tower with a yellow block at the top",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and is_top(x))) == 1"
    },
    "93": {
        "sentence": "There is a black block above a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and exist(get_box_all_above(x)) and Color.BLACK in get_set_colors(get_box_all_above(x))))"
    },
    "95": {
        "sentence": "There is a tower and the base is yellow.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and is_bottom(x)))"
    },
    "101": {
        "sentence": "There is a yelloe bloxk above a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and exist(filter_color(get_box_all_below(x), Color.BLACK))))"
    },
    "105": {
        "sentence": "There isa box with 2 black items not touching each other.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and NOT(exist(filter_color(get_touching(y), Color.BLACK)))))))"
    },
    "106": {
        "sentence": "There is a box with a black item touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_touching_wall(y)))))"
    },
    "108": {
        "sentence": "One of the three towers base is yellow.",
        "lf": "count(filter_obj(all_items, lambda x: is_bottom(x) and x.box.is_tower() and is_yellow(x))) == 1"
    },
    "109": {
        "sentence": "There is 1 tower with a blue block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y))))) == 1"
    },
    "116": {
        "sentence": "There is at least 1 tower with a blue block at the bottom",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))), 1)"
    },
    "118": {
        "sentence": "There is a four blocks tower which the base and top are not the same in color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_bottom(y) and exist(filter_obj(x.all_items_in_box(), lambda z: is_top(z) and NOT(equal_color(query_color(z), query_color(y)))))))))"
    },
    "119": {
        "sentence": "There are at least 2 towers with yellow blocks at the base",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))), 2)"
    },
    "120": {
        "sentence": "There are only two towers with blue block base.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))) == 2"
    },
    "122": {
        "sentence": "There is a box with only 2 items of different color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and NOT(all_same_color(x.all_items_in_box()))))"
    },
    "126": {
        "sentence": "There is a box with 1 item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "132": {
        "sentence": "there is one tower with a blue block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y))))) == 1"
    },
    "136": {
        "sentence": "There is 1 tower with 2 blue blocks stack together",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and exist(get_above(y)) and is_blue(unique(get_above(y))))))) == 1"
    },
    "137": {
        "sentence": "There is a blue block as the base of a tower.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_bottom(x) and x.box.is_tower()))"
    },
    "139": {
        "sentence": "There is a box with only black and blue items alternately positioned.",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda y: is_blue(y) or is_black(y)) and count(get_set_colors(x.all_items_in_box())) == 2 and All(filter_color(x.all_items_in_box(), Color.BLUE), lambda y: (exist(get_above(y)) and is_black(unique(get_above(y)))) or NOT(exist(get_above(y))))))"
    },
    "144": {
        "sentence": "There is a black tower.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_black)))"
    },
    "145": {
        "sentence": "There is at least one black tower with only one block.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_black) and count(x.all_items_in_box()) == 1)), 1)"
    },
    "147": {
        "sentence": "There is a box with a yellow item on top and 2 black items beneath it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y) and count(filter_color(get_box_all_below(y), Color.BLACK)) == 2))))"
    },
    "153": {
        "sentence": "There is no black block as the top of a tower with at most three blocks.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_top(x) and x.box.is_tower() and le(count(x.box.all_items_in_box()), 3))))"
    },
    "154": {
        "sentence": "There is at least one tower with exactly two blocks",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2)), 1)"
    },
    "155": {
        "sentence": "The base and the top of a three blocks tower are the same in color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and all_same_color(filter_obj(x.all_items_in_box(), lambda y: is_bottom(y) or is_top(y)))))"
    },
    "166": {
        "sentence": "There is a box with 3 items of blue and black color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) and All(x.all_items_in_box(), lambda y: is_blue(y) or is_black(y)) and count(get_set_colors(x.all_items_in_box())) == 2))"
    },
    "170": {
        "sentence": "There is at least one tower with a black block above the yellow block",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(filter_color(get_below(y), Color.YELLOW)))))), 1)"
    },
    "174": {
        "sentence": "There is a blue block as the base of a tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_bottom(x) and x.box.is_tower() and count(x.box.all_items_in_box()) == 4))"
    },
    "177": {
        "sentence": "There is a tower with only blue and black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), lambda y: is_blue(y) or is_black(y)) and count(get_set_colors(x.all_items_in_box())) == 2))"
    },
    "180": {
        "sentence": "There is at least one blue block on a black block.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and exist(get_below(x)) and is_black(unique(get_below(x))))), 1)"
    },
    "181": {
        "sentence": "There is 1 tower that contains at least 2 yellow blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 2))) == 1"
    },
    "182": {
        "sentence": "There is a tower with a black block at base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y)))))"
    },
    "184": {
        "sentence": "There is 1 tower with a black block at the bottom",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))))) == 1"
    },
    "185": {
        "sentence": "there is one tower with exactly two blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2)) == 1"
    },
    "186": {
        "sentence": "There are two blue blocks as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_bottom(x) and x.box.is_tower())) == 2"
    },
    "189": {
        "sentence": "ll the three towers have the same color block at the base",
        "lf": "all_same_color(filter_obj(all_items, lambda x: is_bottom(x) and x.box.is_tower()))"
    },
    "190": {
        "sentence": "ll the towers have a black block at the top",
        "lf": "All(filter_obj(all_items, lambda x: is_top(x) and x.box.is_tower()), is_black)"
    },
    "191": {
        "sentence": "There is a black block that is between two yellow blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and exist(get_below(x)) and is_yellow(unique(get_below(x))) and exist(get_above(x)) and is_yellow(unique(get_above(x)))))"
    },
    "192": {
        "sentence": "There is a box with only black and yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda y: is_black(y) or is_yellow(y)) and count(get_set_colors(x.all_items_in_box())) == 2))"
    },
    "194": {
        "sentence": "There is a yellow block as the top of a tower with exactly two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_top(x) and x.box.is_tower() and count(x.box.all_items_in_box()) == 2))"
    },
    "195": {
        "sentence": "There is 1 tower with at least 2 yellow blocks stacked together",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(get_above(y)) and is_yellow(unique(get_above(y))))))) == 1"
    },
    "198": {
        "sentence": "There is a two blocks tower and the one block is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "199": {
        "sentence": "there is at least one tower with a yellow block at the base",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))), 1)"
    },
    "201": {
        "sentence": "there is at least one tower with two blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2))"
    },
    "205": {
        "sentence": "There is a four tower block that the second block from the base is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_second(y) and is_black(y)))))"
    },
    "207": {
        "sentence": "There are 2 towers with a yellow block at the top",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_top(x) and is_yellow(x))) == 2"
    },
    "215": {
        "sentence": "there is at least one tower having a yellow block over a black block",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and exist(get_below(x)) and is_black(unique(get_below(x)))))"
    },
    "217": {
        "sentence": "one tower with 2 blue blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "221": {
        "sentence": "There is a box with a blue item touching the wall and a black one right on top of it.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x) and exist(filter_color(intersect(get_above(x), get_touching(x)), Color.BLACK))))"
    },
    "225": {
        "sentence": "There is a black block on a black block as the base of a tower with three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and exist(get_above(x)) and is_black(unique(get_above(x))) and is_bottom(x) and x.box.is_tower() and count(x.box.all_items_in_box()) == 3))"
    },
    "229": {
        "sentence": "the tower with three blocks has a black block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y)))))"
    },
    "238": {
        "sentence": "there is at least one tower with a single block which is yellow",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and exist(filter_color(x.all_items_in_box(), Color.YELLOW)))), 1)"
    },
    "241": {
        "sentence": "there is a tower with exactly four blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4))"
    },
    "261": {
        "sentence": "there are two towers with exactly two blocks each",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2)) == 2"
    },
    "265": {
        "sentence": "the tower with four blocks has two yellow objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "266": {
        "sentence": "There is a blue block as the base of a tower with only four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_bottom(x) and count(x.box.all_items_in_box()) == 4))"
    },
    "268": {
        "sentence": "There is a box with 3 items of 2 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and (count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 or count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 or count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)))"
    },
    "271": {
        "sentence": "There is one tower with at least two blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 2))) == 1"
    },
    "272": {
        "sentence": "One of the towers has a blue block above a yellow block",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and((is_bottom(x) and exist(filter_obj(x.box.all_items_in_box(), lambda y: is_blue(y) and is_second(y)))) or (is_bottom(x) and exist(filter_obj(x.box.all_items_in_box(), lambda y: is_blue(y) and is_third(y)))) or (is_bottom(x) and exist(filter_obj(x.box.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))) or (is_second(x) and exist(filter_obj(x.box.all_items_in_box(), lambda y: is_blue(y) and is_third(y)))) or (is_second(x) and exist(filter_obj( x.box.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))) or (is_third(x) and exist(filter_obj( x.box.all_items_in_box(), lambda y: is_blue(y) and is_top(y))))))) >= 1"
    },
    "273": {
        "sentence": "There are two towers with at least three blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(x.all_items_in_box()), 3))) == 2"
    },
    "274": {
        "sentence": "There are at least two yellow blocks as the top of a tower.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_yellow(x) and is_top(x))), 2)"
    },
    "282": {
        "sentence": "There is a tower with only two blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "283": {
        "sentence": "There is at least one black block as the base of a tower.",
        "lf": "ge(count(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_bottom(x))), 1)"
    },
    "284": {
        "sentence": "There is a tower that has at least 3 yellow blocks attached with each other.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and exist(get_above(x)) and is_yellow(unique(get_above(x))) and exist(get_below(x)) and is_yellow(unique(get_below(x)))))"
    },
    "285": {
        "sentence": "There is 1 tower with at least 2 blue blocks",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 2))), 1)"
    },
    "287": {
        "sentence": "There is a box with 4 items and the black one is on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y)))))"
    },
    "289": {
        "sentence": "There is 1 tower with exactly 4 blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4)) == 1"
    },
    "299": {
        "sentence": "There is a box with only one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "303": {
        "sentence": "there are exactly two towers with three blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3)) == 2"
    },
    "304": {
        "sentence": "There is a box with only 2 black and yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "305": {
        "sentence": "There is a box with a yellow item on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y)))))"
    },
    "311": {
        "sentence": "There is exactly one black block as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_bottom(x))) == 1"
    },
    "322": {
        "sentence": "there is at least one tower with a single block which is black",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and is_black(unique(x.all_items_in_box())))), 1)"
    },
    "324": {
        "sentence": "there is a tower which has a yellow block in between two blue blocks",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and exist(get_above(x)) and is_blue(unique(get_above(x))) and exist(get_below(x)) and is_blue(unique(get_below(x)))))"
    },
    "326": {
        "sentence": "There is a black block as the base of a tower with at least two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and x.box.is_tower() and is_bottom(x) and ge(count(x.box.all_items_in_box()), 2)))"
    },
    "329": {
        "sentence": "There are 3 blue blocks",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 3"
    },
    "330": {
        "sentence": "There is a box with a black item touching the wall and 2 items at most on top of it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_touching_wall(y))) and count(x.all_items_in_box()) <= 3))"
    },
    "331": {
        "sentence": "There is tower with a black top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y)))))"
    },
    "332": {
        "sentence": "There is a single block tower and the color is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and is_yellow(unique(x.all_items_in_box()))))"
    },
    "333": {
        "sentence": "There is a yellow block over a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and exist(get_below(x)) and exist(filter_color(get_below(x), Color.BLACK))))"
    },
    "339": {
        "sentence": "Two towers has a black blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_color(x.all_items_in_box(), Color.BLACK)))) == 2"
    },
    "340": {
        "sentence": "There is a blue block as the top of a tower with at most three blocks..",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_top(x) and le(count(x.box.all_items_in_box()), 3)))"
    },
    "342": {
        "sentence": "There isa box with 3 items of only black and yellow color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and NOT(exist(filter_color(x.all_items_in_box(), Color.BLUE)))))"
    },
    "344": {
        "sentence": "There is atleast one tower with exactly two black blocks",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)), 1)"
    },
    "346": {
        "sentence": "There are 2 yellow items on top.",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_top(x))) == 2"
    },
    "347": {
        "sentence": "There is 1 tower with at least 1 blue block",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1))), 1)"
    },
    "350": {
        "sentence": "There is a tower with 1 blue block and 1 yellow block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "352": {
        "sentence": "There is a box with at least 2 items and a blue one on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 2) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "354": {
        "sentence": "There is 1 tower with exactly 2 yellow blocks",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)), 1)"
    },
    "359": {
        "sentence": "There is a tower with three black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))"
    },
    "364": {
        "sentence": "There is a black block as the top of a tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_top(x) and count(x.box.all_items_in_box()) == 4))"
    },
    "366": {
        "sentence": "there is a tower with a blue block at the top and at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y)))))"
    },
    "367": {
        "sentence": "There is a box with a yellow item and only black items on top of it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and All(get_box_all_above(y), is_black)))))"
    },
    "368": {
        "sentence": "There is a three blocks tower that the top is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y)))))"
    },
    "371": {
        "sentence": "There are two towers with the same height that are smaller than the third tower.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_obj(all_boxes, lambda y: count(y.all_items_in_box()) == count(x.all_items_in_box()))) == 2 and exist(filter_obj(all_boxes, lambda z: gt(count(z.all_items_in_box()), count(x.all_items_in_box()))))))"
    },
    "373": {
        "sentence": "There are only two towers that has the same base color.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_bottom(x) and count(filter_obj(all_items, lambda y: is_bottom(y) and equal_color(query_color(y), query_color(x)))) == 2 and count(filter_obj(all_items, lambda y: is_bottom(y) and NOT(equal_color(query_color(y), query_color(x))))) == 1))"
    },
    "376": {
        "sentence": "There is a box where a black square is touching the wall with another black square on top of it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y) and is_touching_wall(y) and exist(filter_obj(intersect(get_above(y), get_touching(y)), lambda z: is_black(z) and is_square(z)))))))"
    },
    "379": {
        "sentence": "One tower contains 2 blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)) == 1"
    },
    "380": {
        "sentence": "There i a box with a black item touching the wall and a blue item on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_touching_wall(y) and exist(filter_obj(get_box_all_above(y), lambda z: is_blue(z)))))))"
    },
    "382": {
        "sentence": "There is at least one blue block on a yellow block.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and exist(filter_color(intersect(get_below(x), get_touching(x)), Color.YELLOW)))), 1)"
    },
    "385": {
        "sentence": "There is a tower which has two blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "387": {
        "sentence": "ll the base of the tower are black.",
        "lf": "All(filter_obj(all_items, lambda x: x.box.is_tower() and is_bottom(x)), is_black)"
    },
    "388": {
        "sentence": "There is exactly one tower with a black block above a yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_below(y)) and is_yellow(unique(get_below(y))))))) == 1"
    },
    "390": {
        "sentence": "There is a blue block on a blue block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and exist(filter_color(intersect(get_above(x), get_touching(x)), Color.BLUE))))"
    },
    "396": {
        "sentence": "there is exactly one tower with a single object",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1)) == 1"
    },
    "398": {
        "sentence": "There are at least two towers that has only two blue blocks.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)), 2)"
    },
    "401": {
        "sentence": "there is at least one  tower with exactly two blocks with a blue block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), count(x.box) == 2)))"
    },
    "402": {
        "sentence": "There is a box with a black item touching the wall and a blue one above it.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_touching_wall(x, Side.ANY)), exist(filter_color(get_above(x), Color.BLUE)))))"
    },
    "403": {
        "sentence": "Two of the three towers has a black base.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "406": {
        "sentence": "There is only one yellow block as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "414": {
        "sentence": "There is at least 1 black block in each tower",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.BLACK)), x.is_tower()))) == 3"
    },
    "418": {
        "sentence": "There is a tower with exactly two blocks having a yellow block above a blue block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLUE))), count(x.box) == 2), x.box.is_tower())))"
    },
    "420": {
        "sentence": "There is a tower with exactly four blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 4, x.is_tower())))"
    },
    "421": {
        "sentence": "One of the tower with four blocks has a blue block over a yellow block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), exist(filter_color(get_below(x), Color.YELLOW))), count(x.box) == 4), x.box.is_tower())))"
    },
    "422": {
        "sentence": "There is a box with a blue item touching the wall and a yellow item on top of it.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_touching_wall(x, Side.ANY)), exist(filter_color(get_above(x), Color.YELLOW)))))"
    },
    "423": {
        "sentence": "There is one tower with a yellow block above the black block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLACK))), x.box.is_tower())))"
    },
    "424": {
        "sentence": "there is at least one tower with a black block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), x.box.is_tower())))"
    },
    "426": {
        "sentence": "the tower with four blocks has a yellow block at the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_bottom(x)), count(x.box) == 4), x.box.is_tower())))"
    },
    "427": {
        "sentence": "There is a tower with two yellow blocks and two black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(count(filter_color(x, Color.YELLOW)) == 2, count(filter_color(x, Color.BLACK)) == 2), count(x) == 4), x.is_tower())))"
    },
    "428": {
        "sentence": "There is a box with 4 items of which at least 2 are blue and black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(contained({Color.BLUE, Color.BLACK}, get_set_colors(x)), count(x) == 4)))"
    },
    "429": {
        "sentence": "There is a two blocks tower and only one color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(x) == 2, count(get_set_colors(x)) == 1), x.is_tower())))"
    },
    "430": {
        "sentence": "There is a tower with exactly two blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 2, x.is_tower())))"
    },
    "436": {
        "sentence": "The base of the two blocks tower is black.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_bottom(x)), count(x.box) == 2), x.box.is_tower())))"
    },
    "441": {
        "sentence": "There is at least 1 tower with 1 black block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), x.box.is_tower())))"
    },
    "451": {
        "sentence": "There is a tower with only one blue block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) == 1, x.is_tower())))"
    },
    "453": {
        "sentence": "There is a blue block as the top of a tower with at most two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_top(x)), count(x.box) <= 2), x.box.is_tower())))"
    },
    "454": {
        "sentence": "There is one tower with a yellow block above the blue block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLUE))), x.box.is_tower())))"
    },
    "455": {
        "sentence": "there is exactly one tower with a yellow black at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "456": {
        "sentence": "The three towers has one, two and four blocks each.",
        "lf": "AND(AND(exist(filter_obj(all_boxes, lambda x: AND(count(x) == 1, x.is_tower()))), exist(filter_obj(all_boxes, lambda x: AND(count(x) == 2, x.is_tower())))), exist(filter_obj(all_boxes, lambda x: AND(count(x) == 4, x.is_tower()))))"
    },
    "457": {
        "sentence": "There is at least one yellow block as the top of a tower with exactly three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_top(x)), count(x.box) == 3), x.box.is_tower())))"
    },
    "458": {
        "sentence": "There is a box with 2 black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLACK)) == 2))"
    },
    "459": {
        "sentence": "There is a tower with one or more blocks of  blue color only",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(contained({Color.BLUE}, get_set_colors(x)), count(get_set_colors(x)) == 1), x.is_tower())))"
    },
    "461": {
        "sentence": "There is only one color on the top in all 3 boxes.",
        "lf": "all_same_color(filter_obj(all_items, lambda x: is_top(x)))"
    },
    "462": {
        "sentence": "There is a yellow tower.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(contained({Color.YELLOW}, get_set_colors(x)), count(get_set_colors(x)) == 1), x.is_tower())))"
    },
    "463": {
        "sentence": "There is at least one blue block above a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), exist(filter_color(get_below(x), Color.YELLOW)))))"
    },
    "470": {
        "sentence": "The same color is on top in all 3 boxes.",
        "lf": "all_same_color(filter_obj(all_items, lambda x: is_top(x)))"
    },
    "472": {
        "sentence": "there is at least one tower with exactly one block which is of yellow color",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), count(x.box) == 1), x.box.is_tower())))"
    },
    "473": {
        "sentence": "there is one tower with a  blue block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "474": {
        "sentence": "There are seven blocks.",
        "lf": "count(all_items) == 7"
    },
    "477": {
        "sentence": "There is a tower with a black block above a black block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), exist(filter_color(get_box_all_above(x), Color.BLACK))), x.box.is_tower())))"
    },
    "478": {
        "sentence": "There is only one blue block as the top of a tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_top(x)), count(x.box) == 4), x.box.is_tower())))"
    },
    "479": {
        "sentence": "The middle block of a three tower block is blue.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_second(x)), count(x.box) == 3), x.box.is_tower())))"
    },
    "487": {
        "sentence": "There is only one black item touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "491": {
        "sentence": "There are at least two towers that are not the same in height.",
        "lf": "not all_same_attribute(filter_obj(all_boxes, lambda x: x.is_tower), count)"
    },
    "492": {
        "sentence": "The blue item is touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), is_touching_wall(x, Side.ANY))))"
    },
    "493": {
        "sentence": "There is a black block as the top of a tower with exactly three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_top(x)), count(x.box) == 3), x.box.is_tower())))"
    },
    "494": {
        "sentence": "There is at most one yellow block as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) <= 1"
    },
    "498": {
        "sentence": "Of the three towers one has only black base.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "501": {
        "sentence": "There are three yellow blocks as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_top(x), is_yellow(x)))) == 3"
    },
    "502": {
        "sentence": "Items of all 3 different colors are touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_touching_wall(x), is_yellow(x)))) and exist(filter_obj(all_items, lambda x: AND(is_touching_wall(x), is_blue(x)))) and exist(filter_obj(all_items, lambda x: AND(is_touching_wall(x), is_black(x))))"
    },
    "503": {
        "sentence": "There is a blue block as the base of a tower with exactly two blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_bottom(x), is_blue(x)))), count(x.all_items_in_box()) == 2), x.is_tower())))"
    },
    "504": {
        "sentence": "There is exactly one yellow block as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_top(x), is_yellow(x)))) == 1"
    },
    "507": {
        "sentence": "there is at least one tower with four blocks with a black block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))), count(x.all_items_in_box()) == 4), x.is_tower())))"
    },
    "516": {
        "sentence": "There is a bow with one yellow and only two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x.all_items_in_box(), Color.YELLOW)), count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)))"
    },
    "519": {
        "sentence": "There opis one tower with at least two blue blocks in it",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLUE)) >= 2, x.is_tower())))"
    },
    "527": {
        "sentence": "There is a blue block above a yellow block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), exist(filter_color(get_below(x), Color.YELLOW)))))"
    },
    "528": {
        "sentence": "The top of the three blocks tower is yellow.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_top(x)), count(x.box.all_items_in_box()) == 3), x.box.is_tower())))"
    },
    "529": {
        "sentence": "There is a yellow block as the top of a tower with blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x)))), Any(get_below(x), lambda x: is_blue(x))), x.is_tower())))"
    },
    "535": {
        "sentence": "There is no blue tower with only one block.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), count(x.box.all_items_in_box()) == 1), x.box.is_tower())))"
    },
    "536": {
        "sentence": "There is a blue block as the top of a tower.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower())))"
    },
    "538": {
        "sentence": "There are exactly 2 yellow items touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "544": {
        "sentence": "there is at least  one tower of three blocks which has blocks of either yellow or blue color only",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(exist(filter_color(x.all_items_in_box(), Color.YELLOW)), exist(filter_color(x.all_items_in_box(), Color.BLUE))), not exist(filter_color(x.all_items_in_box(), Color.BLACK))), count(x.all_items_in_box()) == 3)))"
    },
    "545": {
        "sentence": "There is a tower with a yellow block above base block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_obj(get_below(x), lambda x: is_bottom(x))))))"
    },
    "547": {
        "sentence": "There is a blue block bellow a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_below(x), Color.BLUE)))))"
    },
    "548": {
        "sentence": "There is a tower that has three black and one blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1, count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3)))"
    },
    "549": {
        "sentence": "There is a blue block as the base of a tower with three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_bottom(x)), count(x.box.all_items_in_box()) == 3), x.box.is_tower())))"
    },
    "554": {
        "sentence": "There is no tower with only one block.",
        "lf": "not exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 1, x.is_tower())))"
    },
    "555": {
        "sentence": "there is one tower with a single object which is of blue color",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), count(x.box.all_items_in_box()) == 1), x.box.is_tower())))"
    },
    "559": {
        "sentence": "There are two towers with a yellow block at base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "562": {
        "sentence": "There is a four blocks tower and the second block from the base is blue.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_second(x), is_blue(x)), count(x.box.all_items_in_box()) == 4), x.box.is_tower())))"
    },
    "570": {
        "sentence": "there are two towers with blue block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower()))) == 2"
    },
    "571": {
        "sentence": "There is only one tower with a blue block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "574": {
        "sentence": "There is a box with 3 items of which black items are both on top and on bottom.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x))))), count(x.all_items_in_box()) == 3)))"
    },
    "575": {
        "sentence": "There are at least two black blocks as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), x.box.is_tower()))) >= 2"
    },
    "576": {
        "sentence": "There is a tower, which has exactly two blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2, x.is_tower())))"
    },
    "578": {
        "sentence": "There is a box with 2 black items on top.",
        "lf": "exist(filter_obj(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x))))), lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_third(x)))), count(x.all_items_in_box()) == 4) or AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_second(x)))), count(x.all_items_in_box()) == 3) or AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))), count(x.all_items_in_box()) == 2)))"
    },
    "579": {
        "sentence": "There is a box with only 2 squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "580": {
        "sentence": "There is a tower that has two black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "581": {
        "sentence": "There is 1 tower with a blue block in the middle",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(AND(OR(is_third(x), is_second(x)), is_blue(x)), count(x.box.all_items_in_box()) >= 3))))) == 1"
    },
    "582": {
        "sentence": "The base of the tower with two blocks is black.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_bottom(x)), count(x.box.all_items_in_box()) == 2), x.box.is_tower())))"
    },
    "583": {
        "sentence": "There is 1 yellow block",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 1"
    },
    "585": {
        "sentence": "There is a tower with more than two blocks and the top is black.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_top(x)), count(x.box.all_items_in_box()) > 2), x.box.is_tower())))"
    },
    "589": {
        "sentence": "there is at least one tower with  exactly three blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 3, x.is_tower())))"
    },
    "590": {
        "sentence": "The base of a four blocks tower is yellow.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_bottom(x)), count(x.box.all_items_in_box()) == 4), x.box.is_tower())))"
    },
    "592": {
        "sentence": "there is one tower with a black block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_top(x)))) == 1"
    },
    "594": {
        "sentence": "There is a black block as the base of a tower with exactly two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_bottom(x)), count(x.box.all_items_in_box()) == 2), x.box.is_tower())))"
    },
    "596": {
        "sentence": "there is one tower with exactly two blocks having the same color block over each other",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 2, all_same_color(x.all_items_in_box()))))"
    },
    "603": {
        "sentence": "There is a tower with at least three blocks, and each has a yellow block above a blue block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) >= 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: is_yellow(x))))))))"
    },
    "605": {
        "sentence": "there is a tower with a yellow block over a blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), exist(filter_obj(get_box_all_below(x), lambda x: is_blue(x)))))))) == 1"
    },
    "607": {
        "sentence": "There is a tower with four blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and all(filter_obj(x.all_items_in_box(), lambda x: x.box.is_tower()))))"
    },
    "609": {
        "sentence": "there are two towers with black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) == 2"
    },
    "614": {
        "sentence": "There is at least one yellow block as the top of a tower.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x)))))) >= 1"
    },
    "617": {
        "sentence": "There is a black item in every box.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)))) == 3"
    },
    "618": {
        "sentence": "There is a box with only one item that is blue.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))))) >= 1"
    },
    "620": {
        "sentence": "there is a tower with exactly two blocks which are of yellow color",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), x.box.is_tower()))) == 2)) == 1"
    },
    "621": {
        "sentence": "There is a blue block below a yellow block.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: is_yellow(x)))))))) == 1"
    },
    "629": {
        "sentence": "There is exactly one yellow block on a black block.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and count(filter_obj(x.box.all_items_in_box(), lambda y: is_yellow(y) and y in get_above(x))) == 1 and count(filter_obj(x.box.all_items_in_box(), lambda y: is_yellow(y) and y in get_box_all_above(x))) == 1)) == 1"
    },
    "631": {
        "sentence": "There are two blue items on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: AND(is_blue(x), is_top(x)))))))))"
    },
    "633": {
        "sentence": "There is no tower with three black blocks.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))) == 3)))"
    },
    "634": {
        "sentence": "There is no tower with only yellow blocks.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda x: is_yellow(x)))))"
    },
    "637": {
        "sentence": "There is a tower with two black blocks and exactly one yellow block.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)) == 1"
    },
    "639": {
        "sentence": "there is at least one tower with a single block which is of  blue color",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower()))))) >= 1"
    },
    "645": {
        "sentence": "There is a black block below a yellow block.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_above(x), lambda x: is_yellow(x)))))))) == 1"
    },
    "646": {
        "sentence": "There is a box with items of 2 different colors and a blue one touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: NOT(all_same_color(x.all_items_in_box())) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x))))))"
    },
    "652": {
        "sentence": "Two of the three towers has a black top.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))))) == 2"
    },
    "658": {
        "sentence": "there is one tower which has a yellow block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))))) == 1"
    },
    "659": {
        "sentence": "There are two towers with black blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))))) == 2"
    },
    "665": {
        "sentence": "there are two towers with a yellow block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))))) == 2"
    },
    "666": {
        "sentence": "There is no yellow block as the base of a tower with at least two blocks.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) >= 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))))))"
    },
    "667": {
        "sentence": "There is at least one yellow block as the base of a tower with four blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x))))))"
    },
    "668": {
        "sentence": "the tower with three blocks has a yellow block over a black block",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), exist(filter_obj(get_below(x), lambda x: is_black(x)))))))) == 1"
    },
    "669": {
        "sentence": "There is one tower with a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) == 1"
    },
    "670": {
        "sentence": "There is a yellow tower that has at least three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) >= 3 and All(x.all_items_in_box(), lambda x: AND(is_yellow(x), x.box.is_tower()))))"
    },
    "673": {
        "sentence": "there is one tower having a blue block over a yellow block",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_below(x), lambda x: is_yellow(x))))))))"
    },
    "677": {
        "sentence": "There is 1 tower with exactly 1 blue block and 1 black block",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower()))) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))) == 1)) == 1"
    },
    "678": {
        "sentence": "There are two towers  with the same base color that is not yellow.",
        "lf": "exist(filter_obj(combinations(filter_obj(all_items, lambda x: is_bottom(x)), 2), lambda y: all_same_color(y) and Color.YELLOW not in get_set_colors(y)))"
    },
    "680": {
        "sentence": "There is a tower tower with exactly one black block and at least one blue block.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower()))))) == 1"
    },
    "681": {
        "sentence": "There is a black block above a blue block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_below(x), lambda x: is_blue(x))))))))"
    },
    "682": {
        "sentence": "There is a box that has only one block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "688": {
        "sentence": "there are two towers with a blue block over a yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_below(x), lambda x: is_yellow(x)))))))) == 2"
    },
    "690": {
        "sentence": "There is a black block as the base of a tower with two blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x))))))"
    },
    "692": {
        "sentence": "The first  two blocks of the tower is black and blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_below(x), lambda x: AND(is_blue(x), is_bottom(x)))))) or filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_below(x), lambda x: AND(is_black(x), is_bottom(x)))))))))"
    },
    "694": {
        "sentence": "There is at least one tower with only four blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and All(x.all_items_in_box(), lambda x:  x.box.is_tower()))) == 1"
    },
    "695": {
        "sentence": "There is a tower with more than two blocks having a black block at base and a yellow block at top",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) > 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x)))))) == 1"
    },
    "697": {
        "sentence": "The yellow item is touching hte wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x))))"
    },
    "698": {
        "sentence": "There is no black block as the base of a tower with exactly three blocks.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))))"
    },
    "703": {
        "sentence": "The color of a two blocks tower is blue and black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.BLACK))))"
    },
    "708": {
        "sentence": "There is a tower with three blocks where a yellow block is at base of the tower",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y)))))"
    },
    "711": {
        "sentence": "There is exactly one tower with a yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 1"
    },
    "723": {
        "sentence": "There is 1 tower with only blue and yellow items",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), lambda y: is_blue(y) or is_yellow(y)))) == 1"
    },
    "729": {
        "sentence": "There is a box with only one item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "731": {
        "sentence": "There is 1 tower with a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))))) == 1"
    },
    "732": {
        "sentence": "There is a tower with a black block above a black block and a blue block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_below(y)) and is_black(unique(get_below(y))))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y)))))"
    },
    "734": {
        "sentence": "There are two black blocks as the base of a tower with at least two blocks.",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_bottom(x) and ge(count(x.box.all_items_in_box()), 2))) == 2"
    },
    "736": {
        "sentence": "There are 2 towers with a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))))) == 2"
    },
    "740": {
        "sentence": "There are two blue blocks as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_top(x))) == 2"
    },
    "741": {
        "sentence": "There is a tower with a yellow block in then,idle",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and not is_bottom(y) and not is_top(y)))))"
    },
    "742": {
        "sentence": "There is at least one tower which has blocks of all three colors",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)))), 1)"
    },
    "745": {
        "sentence": "There is a four blocks tower.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4))"
    },
    "747": {
        "sentence": "There is a tower with at least three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(x.all_items_in_box()), 3)))"
    },
    "749": {
        "sentence": "There is 1 blue block",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 1"
    },
    "751": {
        "sentence": "there is one tower with a yellow block above a black block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(get_below(y)) and is_black(unique(get_below(y))))))) == 1"
    },
    "756": {
        "sentence": "There is 1 tower where 2 of the same colour blocks are at the bottom",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_bottom(y) and exist(get_above(y)) and equal_color(query_color(y), query_color(unique(get_above(y)))))))) == 1"
    },
    "757": {
        "sentence": "There are two black blocks as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_top(x))) == 2"
    },
    "760": {
        "sentence": "There is a tower with more than two blocks having a yellow block at base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and gt(count(x.all_items_in_box()), 2) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y)))))"
    },
    "764": {
        "sentence": "the tower with four blocks has a blue block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "770": {
        "sentence": "there is exactly one tower with a yellow block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))) == 1"
    },
    "772": {
        "sentence": "there is one tower with a yellow block over a black block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(get_below(y)) and is_black(unique(get_below(y))))))) == 1"
    },
    "778": {
        "sentence": "There is a blue block as the base of at least one tower.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))), 1)"
    },
    "783": {
        "sentence": "There is a tower with two black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "784": {
        "sentence": "There is a box with a blue item touching the wall and a black item on top of it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_touching_wall(y) and exist(filter_color(get_box_all_above(y), Color.BLACK))))))"
    },
    "787": {
        "sentence": "The middle block of the tower is yellow.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_second(x) and count(x.box.all_items_in_box()) == 3))"
    },
    "788": {
        "sentence": "the tower with four blocks has a yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 1"
    },
    "789": {
        "sentence": "there is exactly one  tower which has a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))))) == 1"
    },
    "790": {
        "sentence": "There is a box with 2 blue items touching each other.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and exist(filter_color(get_touching(x), Color.BLUE))))"
    },
    "792": {
        "sentence": "there is one tower with a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))))) == 1"
    },
    "798": {
        "sentence": "there is at least one  tower with four blocks having yellow block at the top",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))), 1)"
    },
    "799": {
        "sentence": "there is atleast one tower with a blue block at the base.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))), 1)"
    },
    "800": {
        "sentence": "There is a blue block as the base of a tower with at least two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_bottom(x) and ge(count(x.box.all_items_in_box()), 2)))"
    },
    "805": {
        "sentence": "There is a box with at least two items and a black item on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 2) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y)))))"
    },
    "806": {
        "sentence": "There is a tower with a black block above a yellow block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_below(y)) and is_yellow(unique(get_below(y)))))))"
    },
    "809": {
        "sentence": "there is a tower with exactly three blocks all of which are of black color",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and All(x.all_items_in_box(), is_black)))"
    },
    "811": {
        "sentence": "there is at least one tower with a yellow block over a black block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(filter_obj(get_above(y), is_yellow))))))"
    },
    "812": {
        "sentence": "There is a box with only yellow and blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and NOT(exist(filter_color(x.all_items_in_box(), Color.BLACK)))))"
    },
    "815": {
        "sentence": "There is at least 1 tower with 2 yellow blocks",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)), 1)"
    },
    "818": {
        "sentence": "There is only 1 tower with at least 1 yellow block in it",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 1))) == 1"
    },
    "820": {
        "sentence": "There is 1 tower wth a blue block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))) == 1"
    },
    "821": {
        "sentence": "There is no blue block on a blue block.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_blue(x) and exist(filter_color(get_box_all_above(x), Color.BLUE)))))"
    },
    "822": {
        "sentence": "there is exactly one tower with a yellow block over a blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(get_below(y)) and is_blue(unique(get_below(y))))))) == 1"
    },
    "825": {
        "sentence": "There is 1 tower wirh a blue block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y))))) == 1"
    },
    "827": {
        "sentence": "There are 2 towers with exactly 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)) == 2"
    },
    "828": {
        "sentence": "There is no yellow block as the base of a tower.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and is_bottom(x))))"
    },
    "829": {
        "sentence": "There is a box with 2 items of black and yellow color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "830": {
        "sentence": "the tower with four blocks has a black block over the blue block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_below(y)) and is_blue(unique(get_below(y)))))))"
    },
    "831": {
        "sentence": "There is a three blocks tower which the top and base is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y)))))"
    },
    "836": {
        "sentence": "There is one tower with a black block at base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))))) == 1"
    },
    "839": {
        "sentence": "There is a box with three black items and a blue item on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "845": {
        "sentence": "there is one tower with a yellow block over a blue block",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and exist(get_below(x)) and is_blue(unique(get_below(x)))))"
    },
    "846": {
        "sentence": "there is a tower with three blocks having yellow block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y)))))"
    },
    "848": {
        "sentence": "There is no black block as the base of a tower with four blocks.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_bottom(x) and is_black(x) and count(x.box.all_items_in_box()) == 4)))"
    },
    "851": {
        "sentence": "ll there towers contain at least 1 yellow block",
        "lf": "All(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 1))"
    },
    "855": {
        "sentence": "there is one tower with has a  single block of black color",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "857": {
        "sentence": "There is no tower with three blocks.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3)))"
    },
    "858": {
        "sentence": "There is at least 1 tower with 2 blue blicks",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)))), 1)"
    },
    "860": {
        "sentence": "There are 2 towers with 1 blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1)) == 2"
    },
    "862": {
        "sentence": "There is 1 tower with a yellow block above a black block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and count(filter_color(get_box_all_above(y), Color.YELLOW)) == 1))))"
    },
    "863": {
        "sentence": "There are exactly two blue blocks as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_bottom(x) and exist(get_above(x)) and is_blue(unique(get_above(x))) and NOT(exist(filter_obj(x.box.all_items_in_box(), lambda y: is_third(y) and is_blue(y)))))) == 1 "
    },
    "871": {
        "sentence": "There is a four blocks tower that the base and top is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and All(filter_obj(x.all_items_in_box(), lambda y: is_top(y) or is_bottom(y)), is_yellow)))"
    },
    "872": {
        "sentence": "There is 1 tower with at least 3 blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 3))) == 1"
    },
    "878": {
        "sentence": "There is a tower with a yellow base.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y)))))"
    },
    "881": {
        "sentence": "There is a box with 3 items of different color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "882": {
        "sentence": "There is no blue block above a black block.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_blue(x) and exist(filter_color(intersect(get_below(x), get_touching(x)), Color.BLACK)))))"
    },
    "885": {
        "sentence": "the tower with three blocks has a blue block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y))))) == 1"
    },
    "890": {
        "sentence": "There is a tower that has two blue blocks attached with each other.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and exist(get_above(y)) and is_blue(unique(get_above(y)))))))"
    },
    "894": {
        "sentence": "There is a box with 3 items with only yellow and blue color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and equal_set(x.all_items_in_box(), filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) or is_blue(y)))))"
    },
    "901": {
        "sentence": "there is exactly one tower with only black blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(all_same_color(x.all_items_in_box()), exist(filter_color(x.all_items_in_box(), Color.BLACK))))) == 1"
    },
    "904": {
        "sentence": "There is a box with only 2 items of black and blue color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(get_set_colors(x.all_items_in_box())) == 2 and Color.BLUE in get_set_colors(x.all_items_in_box()) and Color.BLACK in get_set_colors(x.all_items_in_box())))"
    },
    "906": {
        "sentence": "there are two towers with exactly one block.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 1, x.is_tower()))) == 2"
    },
    "915": {
        "sentence": "There is 1 tower with at least 1 yellow block",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x.all_items_in_box(), Color.YELLOW)), x.is_tower())))"
    },
    "918": {
        "sentence": "There is a box with 3 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "919": {
        "sentence": "There is 1 tower with a black block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "923": {
        "sentence": "There is a box with items of only black and blue color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLACK)), exist(filter_color(x.all_items_in_box(), Color.BLUE))), not exist(filter_color(x.all_items_in_box(), Color.YELLOW)))))"
    },
    "924": {
        "sentence": "There is 1 tower with 1 black block at the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower())))"
    },
    "925": {
        "sentence": "There are exactly two tower with at least three blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) >= 3)) == 2"
    },
    "930": {
        "sentence": "There is 1 box with exactly 1 block",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1"
    },
    "932": {
        "sentence": "there is a tower with a single block",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 1, x.is_tower())))"
    },
    "933": {
        "sentence": "There is 1 tower with 3 black blocks stacked together",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), count(filter_color(get_touching(x), Color.BLACK)) == 2)))"
    },
    "937": {
        "sentence": "There is a box with yellow items and only one other color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 2, count(filter_obj(x.all_items_in_box(), lambda x: OR(is_blue(x), is_black(x)))) == 1)))"
    },
    "939": {
        "sentence": "There is a tower that  the color above the base is black only.",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(filter_obj(x.all_items_in_box(), lambda x: not is_bottom(x)), lambda x: is_black(x))))"
    },
    "941": {
        "sentence": "There is only 1 tower with a black block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "942": {
        "sentence": "There are atleast two towers with a black block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower()))) >= 2"
    },
    "944": {
        "sentence": "There is a box with 4 items of all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(count(x.all_items_in_box()) == 4, exist(filter_color(x.all_items_in_box(), Color.BLUE))), exist(filter_color(x.all_items_in_box(), Color.BLACK))), exist(filter_color(x.all_items_in_box(), Color.YELLOW)))))"
    },
    "946": {
        "sentence": "There is no tower with exactly two blocks.",
        "lf": "not exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 2, x.is_tower())))"
    },
    "948": {
        "sentence": "There is a blue block under a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_below(x), Color.BLUE)))))"
    },
    "952": {
        "sentence": "There are exactly two yellow blocks as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "954": {
        "sentence": "There is no black block as the base of a tower.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower())))"
    },
    "955": {
        "sentence": "the tower with three blocks has a blue block at the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_bottom(x)), count(x.box.all_items_in_box()) ==3), x.box.is_tower())))"
    },
    "959": {
        "sentence": "There is a tower with two blue blocks and two yellow blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2, count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2), count(x.all_items_in_box()) == 4)))"
    },
    "960": {
        "sentence": "There is one tower with only yellow color blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(all_same_color(x.all_items_in_box()), exist(filter_color(x.all_items_in_box(), Color.YELLOW)))))"
    },
    "962": {
        "sentence": "There is a yellow square on top of another yellow square touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_touching_wall(x, Side.ANY)), exist(filter_color(get_touching(x), Color.YELLOW)))))"
    },
    "963": {
        "sentence": "there is a tower with four blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4))"
    },
    "964": {
        "sentence": "there is a blue block above the base block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_bottom(x), exist(filter_color(get_touching(x), Color.BLUE)))))"
    },
    "965": {
        "sentence": "There are boxes with either yellow and black or black and yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x.all_items_in_box(), Color.YELLOW)), exist(filter_color(x.all_items_in_box(), Color.BLACK))), not exist(filter_color(x.all_items_in_box(), Color.BLUE)))))"
    },
    "968": {
        "sentence": "there is one tower with black blocks only",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == count(filter_color(x.all_items_in_box(), Color.BLACK))))"
    },
    "974": {
        "sentence": "There is only 1 tower with a black block at the bottom",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "977": {
        "sentence": "there is exactly one tower which has a blue block over a black block",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), exist(filter_color(get_below(x), Color.BLACK))))) == 1"
    },
    "978": {
        "sentence": "There is a tower which has a blue block over a blue block",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLUE)) >= 2, x.is_tower())))"
    },
    "982": {
        "sentence": "The tower with four blocks has a black block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), count(x.box.all_items_in_box()) == 4)))"
    },
    "983": {
        "sentence": "There is a box with 3 items of only blue and yellow color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLUE)), exist(filter_color(x.all_items_in_box(), Color.YELLOW))), not exist(filter_color(x.all_items_in_box(), Color.BLACK))), count(x.all_items_in_box()) == 3)))"
    },
    "984": {
        "sentence": "There is a tower with two yellow blocks and at least one black block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x.all_items_in_box(), Color.BLACK)), count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)))"
    },
    "985": {
        "sentence": "There is no yellow block on a yellow block.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_color(get_touching(x), Color.YELLOW)))))"
    },
    "986": {
        "sentence": "the tower with four blocks has a black block over the black block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), exist(filter_color(get_above(x), Color.BLACK))), count(x.box.all_items_in_box()) == 4)))"
    },
    "988": {
        "sentence": "There is a blue block as the top of a tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), AND(count(x.box.all_items_in_box()) == 4, x.box.is_tower()))))"
    },
    "990": {
        "sentence": "There is a blue block above a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_above(x), Color.BLUE)))))"
    },
    "995": {
        "sentence": "There is a box with 3 items of which at least 2 are black items touching each other.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), exist(filter_color(get_touching(x), Color.BLACK))), count(x.box.all_items_in_box()) == 3)))"
    },
    "996": {
        "sentence": "There is a box with at most 3 items of black and blue color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLACK)), exist(filter_color(x.all_items_in_box(), Color.BLUE))), count(x.all_items_in_box()) <= 3)))"
    },
    "1000": {
        "sentence": "there is exactly one tower which has a blue block over a yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(filter_color(get_above(y), Color.BLUE)))))) == 1"
    },
    "1001": {
        "sentence": "There is 1 tower with 2 black blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))) == 2)) == 1"
    },
    "1003": {
        "sentence": "There is a box with 4 items of which 3 are yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3))"
    },
    "1005": {
        "sentence": "There is a tower with four blocks having a black block above a blue block with a black block at the top of the tower",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_below(x), lambda x: is_blue(x)))))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x))))))"
    },
    "1007": {
        "sentence": "There is no black block on a black block.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_obj(get_above(x), lambda x: is_black(x)))))))"
    },
    "1008": {
        "sentence": "There is a black block as the base of at least two towers.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) >= 2"
    },
    "1009": {
        "sentence": "the tower with three blocks has a blue object",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "1010": {
        "sentence": "There is only 1 tower with 1 blue block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x)))))) == 1"
    },
    "1013": {
        "sentence": "the  tower with four blocks has  a black block over a blue block",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: is_black(x))))))))"
    },
    "1015": {
        "sentence": "There are two towers with two blue blocks attached with each other.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: is_blue(x)))))))) == 2"
    },
    "1016": {
        "sentence": "There is at least 1 tower with a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) >= 1"
    },
    "1017": {
        "sentence": "there are exactly two towers with a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) == 2"
    },
    "1022": {
        "sentence": "There is a yellow block that is attach to a blue block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and exist(filter_color(get_touching(x), Color.BLUE))))"
    },
    "1025": {
        "sentence": "There is one tower with exactly one object which is not black",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and NOT(exist(filter_obj(x.all_items_in_box(), lambda x: is_black(x)))))) == 1"
    },
    "1026": {
        "sentence": "The base and second block of the tower are yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), exist(filter_obj(get_above(x), lambda x: is_yellow(x)))))))) == 1"
    },
    "1029": {
        "sentence": "There is a tower with four blocks and the three are the same.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and Any(combinations(x.all_items_in_box(), 3), all_same_color)))"
    },
    "1033": {
        "sentence": "The  tower with more than two blocks has a yellow block at the top and base",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) > 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x))))))"
    },
    "1034": {
        "sentence": "there are two towers with a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) == 2"
    },
    "1037": {
        "sentence": "at least one tower with four blocks has a blue block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x)))))) >= 1"
    },
    "1038": {
        "sentence": "The first three color of a tower from the base are yellow, yellow and black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)) and AND(exist(filter_obj(get_above(x), lambda x: is_yellow(x))), exist(filter_obj(get_above(get_above(x)), lambda x: is_black(x))))))))"
    },
    "1039": {
        "sentence": "There is a blue tower with only one block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower())))))"
    },
    "1040": {
        "sentence": "There are at least 2 towers with 2 blue blocks stacked together",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: is_blue(x)))))))) == 2"
    },
    "1045": {
        "sentence": "there is one tower with exactly two yellow blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and All(x.all_items_in_box(), lambda x: x.box.is_tower()))) == 1"
    },
    "1047": {
        "sentence": "There is a box with only 2 yellow items and at least one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 1))"
    },
    "1051": {
        "sentence": "There are two yellow blocks as the base of a tower.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))))) == 2"
    },
    "1056": {
        "sentence": "There is 1 tower with only 2 blue blocks and 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)) == 1"
    },
    "1057": {
        "sentence": "There is 1 tower with exactly 2 yellow blocks stacked together",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), exist(filter_obj(get_above(x), lambda x: is_yellow(x)))))))) == 1"
    },
    "1059": {
        "sentence": "There is a box with 3 items of which 2 are yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "1060": {
        "sentence": "there is exactly one tower with a blue block over a  yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_below(x), lambda x: is_yellow(x)))))))) == 1"
    },
    "1062": {
        "sentence": "the tower with exactly two blocks has a black block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x))))))"
    },
    "1063": {
        "sentence": "There are blue blocks in each boxes that have the same position.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x)))))) == 3 or count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_second(x)))))) == 3"
    },
    "1065": {
        "sentence": "There is a box with at least 2 blue items and one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) >= 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "1068": {
        "sentence": "There is a tower with only blue and yellow blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and count(get_set_colors(x.all_items_in_box())) == 2 ))"
    },
    "1069": {
        "sentence": "the tower with three blocks has a yellow block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x))))))"
    },
    "1071": {
        "sentence": "There is a yellow block above the blue block.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: is_yellow(x)))))))) == 1"
    },
    "1072": {
        "sentence": "There is a four blocks tower that has at least two black blocks attached.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_above(x), lambda x: is_black(x))))))))"
    },
    "1073": {
        "sentence": "There is no tower with four blocks.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4)))"
    },
    "1076": {
        "sentence": "There is a box with at least 3 items and a blue one touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) >= 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_touching_wall(x))))))"
    },
    "1079": {
        "sentence": "one of the tower with two blocks has a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) == 1"
    },
    "1080": {
        "sentence": "There is a yellow block bellow a black block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_below(x), lambda x: is_yellow(x))))))))"
    },
    "1084": {
        "sentence": "There is a blue block as the top of a tower with exactly three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_top(x))))))"
    },
    "1085": {
        "sentence": "Two towers are the same in height.",
        "lf": "exist(filter_obj(combinations(all_boxes, 2), lambda x: count(x[0].all_items_in_box()) == count(x[1].all_items_in_box())))"
    },
    "1089": {
        "sentence": "There is one tower with 1 yellow block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))))) == 1"
    },
    "1090": {
        "sentence": "there are two towers with black block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))))) == 2"
    },
    "1093": {
        "sentence": "There is a yellow block as the top of a tower with three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x))))))"
    },
    "1096": {
        "sentence": "Two out of the three towers have the same base.",
        "lf": "exist(filter_obj(combinations(filter_obj(all_items, is_bottom), 2), all_same_color))"
    },
    "1097": {
        "sentence": "There is a different number of items in the boxes.",
        "lf": "All(combinations(all_boxes, 2), lambda x: count(x[0].all_items_in_box()) != count(x[1].all_items_in_box()))"
    },
    "1103": {
        "sentence": "there is a tower with exactly three blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3))"
    },
    "1105": {
        "sentence": "There are 2 towers with 2 blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)) == 2"
    },
    "1109": {
        "sentence": "There is only one black block as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_bottom(x))) == 1"
    },
    "1112": {
        "sentence": "there is one tower with blocks of yellow and blue color",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and NOT(exist(filter_color(x.all_items_in_box(), Color.BLACK)))))"
    },
    "1114": {
        "sentence": "Only blue and yellow items are touching the wall.",
        "lf": "All(filter_obj(all_items, is_touching_wall), lambda x: is_blue(x) or is_yellow(x))"
    },
    "1120": {
        "sentence": "There is a box with 2 items of black and blue color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.BLUE))))"
    },
    "1123": {
        "sentence": "there is at least one tower with a blue block on top of black block",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and ((is_second(x) and is_black(unique(get_below(x)))) or (is_third(x) and exist(filter_obj(x.box.all_items_in_box(), lambda y: is_black(y) and ( is_bottom(y) or is_second(y))))) or (is_top(x) and count(x.box.all_items_in_box()) == 4 and exist(filter_obj(x.box.all_items_in_box(), lambda y: is_black(y) and (is_bottom(y) or is_second(y) or is_third(y))))))))"
    },
    "1125": {
        "sentence": "There is at least one blue block on a blue block.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and exist(get_below(x)) and is_blue(unique(get_below(x))))), 1)"
    },
    "1129": {
        "sentence": "There is a blue block as the base of only two towers.",
        "lf": "count(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_bottom(x))) == 2"
    },
    "1130": {
        "sentence": "There is a tower with only one yellow block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "1137": {
        "sentence": "the tower with four blocks has blocks of  blue and black color",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.BLACK)))) == 1"
    },
    "1139": {
        "sentence": "There is at least 1 tower with a yellow block at the top",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))), 1)"
    },
    "1140": {
        "sentence": "The top of the two towers are black.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_top(x))) == 2"
    },
    "1142": {
        "sentence": "There is one tower with exactly one object which is blue in color",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and is_blue(unique(x.all_items_in_box())))) == 1"
    },
    "1143": {
        "sentence": "There is a black block as the base of tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_bottom(x) and count(x.box.all_items_in_box()) == 4))"
    },
    "1144": {
        "sentence": "there is at least one tower with exactly three blocks",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3)), 1)"
    },
    "1147": {
        "sentence": "There is a blue block as the top of a tower with three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_top(x) and count(x.box.all_items_in_box()) == 3))"
    },
    "1148": {
        "sentence": "There is a black block attached to a blue block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and exist(filter_color(get_touching(x), Color.BLUE))))"
    },
    "1157": {
        "sentence": "There is a yellow block as the base of a tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and is_bottom(x) and count(x.box.all_items_in_box()) == 4))"
    },
    "1159": {
        "sentence": "There is 1 tower with only 1 blue block and only 1 black block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1)) == 1"
    },
    "1164": {
        "sentence": "there is one tower which has a yellow block over a blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(get_below(y)) and is_blue(unique(get_below(y))))))) == 1"
    },
    "1165": {
        "sentence": "There is a tower with a yellow block and other three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "1174": {
        "sentence": "there is one tower with at least three blocks of same color",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: ge(count(filter_obj(x.all_items_in_box(), lambda z: equal_color(query_color(y), query_color(z)))), 3)))))"
    },
    "1175": {
        "sentence": "There is 1 tower with only 1 black block and 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1 and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 1))) == 1"
    },
    "1180": {
        "sentence": "there is exactly  one tower with a yellow block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))) == 1"
    },
    "1186": {
        "sentence": "There is a tower with only one block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1))"
    },
    "1187": {
        "sentence": "one of the tower with the three blocks has a yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 1"
    },
    "1188": {
        "sentence": "There is 1 tower with only blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_blue))) == 1"
    },
    "1189": {
        "sentence": "Two of the three towers has a blue base.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))) == 2"
    },
    "1191": {
        "sentence": "there is at least one tower with four blocks with a yellow block at the base and a blue block below the top block",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_third(y))))), 1)"
    },
    "1194": {
        "sentence": "There is a yellow tower that the blocks are not more than three.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_yellow) and le(count(x.all_items_in_box()), 3)))"
    },
    "1195": {
        "sentence": "there are two towers with a blue block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y))))) == 2"
    },
    "1197": {
        "sentence": "There is a black block as the top of a tower with exactly two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_top(x) and count(x.box.all_items_in_box()) == 2))"
    },
    "1198": {
        "sentence": "There are 2 blocks with a blue block at the top",
        "lf": "count(filter_obj(all_items, lambda x: is_top(x) and is_blue(x) and get_below(x) and is_blue(unique(get_below(x))))) == 2"
    },
    "1200": {
        "sentence": "There is a tower with four blocks having a black block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y)))))"
    },
    "1201": {
        "sentence": "There is at least one black block on a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_color(get_above(x), Color.BLACK)))))"
    },
    "1203": {
        "sentence": "The color of the three blocks of a tower after the base are all the same.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(all_same_color(filter_obj(x.all_items_in_box(), lambda x: not is_bottom(x))), count(x.all_items_in_box()) == 4)))"
    },
    "1205": {
        "sentence": "There are at least 2 towers with a yellow block at the bottom",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) >= 2"
    },
    "1206": {
        "sentence": "There is a black block as the top of a tower with two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), count(x.box.all_items_in_box()) == 2)))"
    },
    "1208": {
        "sentence": "There is a box with a yellow item on top of the black item.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLACK)))))"
    },
    "1212": {
        "sentence": "There is a blue block as the top of a tower with at least two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_top(x)), count(x.box.all_items_in_box()) >= 2), x.box.is_tower())))"
    },
    "1215": {
        "sentence": "There is 1 tower with a yellow block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "1217": {
        "sentence": "There are two boxes with two items of different color.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 2, not all_same_color(x.all_items_in_box())))) == 2"
    },
    "1220": {
        "sentence": "There are two blue blocks attached with each other.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), exist(filter_color(get_touching(x), Color.BLUE))))) == 2"
    },
    "1228": {
        "sentence": "there are two towers with a blue block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "1231": {
        "sentence": "There is exactly one yellow block as the base of a tower with at least two blocks.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_bottom(x)), count(x.box.all_items_in_box()) >= 2), x.box.is_tower()))) == 1"
    },
    "1232": {
        "sentence": "There is a box with a black square touching the wall and another one on top of it all.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))))))"
    },
    "1233": {
        "sentence": "there are at least  two towers with a yellow block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) >= 2"
    },
    "1240": {
        "sentence": "The middle of a three blocks tower is black.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_second(x)), count(x.box.all_items_in_box()) == 3)))"
    },
    "1255": {
        "sentence": "There is a box that has only one block which is not blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 1, not exist(filter_color(x.all_items_in_box(), Color.BLUE)))))"
    },
    "1258": {
        "sentence": "There is a box with 3 items of which two are yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 3, count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 2)))"
    },
    "1260": {
        "sentence": "There is only one black block on a black block.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_below(x), Color.BLACK))))) == 1"
    },
    "1264": {
        "sentence": "There is a three blocks tower which has two blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 3, count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)))"
    },
    "1267": {
        "sentence": "One tower has exactly 1 black block and 1 yellow block",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(x.all_items_in_box()) == 2, exist(filter_color(x.all_items_in_box(), Color.YELLOW))), exist(filter_color(x.all_items_in_box(), Color.BLACK)))))"
    },
    "1269": {
        "sentence": "there is tower with has a black block above a yellow block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_below(x), Color.YELLOW)))))"
    },
    "1271": {
        "sentence": "There is 1 tower with 1 blue block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "1272": {
        "sentence": "There is at least 1 tower with 2 blue blocks stacked together",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), exist(filter_color(get_touching(x), Color.BLUE))), x.box.is_tower())))"
    },
    "1273": {
        "sentence": "There are two towers that contain at least 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x.all_items_in_box(), Color.YELLOW)), x.is_tower()))) == 2"
    },
    "1277": {
        "sentence": "There is a yellow block on a blue block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLUE)))))"
    },
    "1283": {
        "sentence": "There is a tower with exactly three blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 3, x.is_tower())))"
    },
    "1285": {
        "sentence": "There is a tower with a yellow block and at least one blue block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1, exist(filter_color(x.all_items_in_box(), Color.BLUE))), x.is_tower())))"
    },
    "1286": {
        "sentence": "There is at least 1 tower with exactly 1 blue block",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1, x.is_tower())))"
    },
    "1288": {
        "sentence": "there is one tower with a yellow block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "1295": {
        "sentence": "There are three towers that are not the same in height.",
        "lf": "(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4)) == 1) or (count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3)) == 1) or (count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)) == 1) or (count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1) "
    },
    "1296": {
        "sentence": "There is a box with a blue item touching the wall and a black item on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_touching_wall(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))))))"
    },
    "1299": {
        "sentence": "There is 1 tower with 4 blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and x.is_tower()))"
    },
    "1302": {
        "sentence": "There is at least one tower with two yellow blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x))) == 2)) >= 1"
    },
    "1303": {
        "sentence": "There is exactly one tower with four blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 )) == 1"
    },
    "1304": {
        "sentence": "There is a yellow block on a black block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_above(x), lambda x: is_yellow(x))))))))"
    },
    "1306": {
        "sentence": "There are 2 towers with a yellow block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))))) == 2"
    },
    "1307": {
        "sentence": "There are exactly two towers with black blocks and at least two towers with blue blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)))) >= 2 and count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLUE)))) >= 2"
    },
    "1310": {
        "sentence": "The base of the three towers are two blue and one yellow.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_bottom(x)))) == 2 and count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_bottom(x)))) == 1"
    },
    "1313": {
        "sentence": "There is a black block as the base of a tower with only black and blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))) and get_set_colors(x.all_items_in_box()) == set([Color.BLACK, Color.BLUE])))"
    },
    "1316": {
        "sentence": "There are two tower with not more than two blocks that are the same in height.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) <= 2 and count(filter_obj(all_boxes, lambda y: y.is_tower() and count(x.all_items_in_box()) == count(y.all_items_in_box()))) == 2))"
    },
    "1322": {
        "sentence": "there is a tower with only one object which is black",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x:  is_black(x)))))"
    },
    "1323": {
        "sentence": "There is a tower with four blocks including two black ones.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2))"
    },
    "1326": {
        "sentence": "There are 2 blue items touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_touching_wall(x)))) == 2"
    },
    "1327": {
        "sentence": "There is exactly one tower with a black block above a blue block",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: is_black(x))))))))"
    },
    "1329": {
        "sentence": "There is a tower with a blue block, a yellow block and two black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower()))) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), x.box.is_tower()))) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))) == 2))"
    },
    "1330": {
        "sentence": "there is one tower which has a blue block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x))))))"
    },
    "1331": {
        "sentence": "There is a box with a black item on top.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))))) == 1"
    },
    "1332": {
        "sentence": "There is a black block as the top of a tower with at least three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) >= 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x))))))"
    },
    "1343": {
        "sentence": "One of the three towers has a black top.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))))) == 1"
    },
    "1345": {
        "sentence": "There are 2 towers that contain at least 1 blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) >= 1)) >= 2"
    },
    "1346": {
        "sentence": "There is a two blocks tower that has a single color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and all_same_color(x.all_items_in_box())))"
    },
    "1347": {
        "sentence": "There is a box with items of 2 different colors of which the blue one is both on top and on the bottom.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_top(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x)))) and NOT(all_same_color(x.all_items_in_box()))))"
    },
    "1350": {
        "sentence": "there is at least one tower with exactly one block which is of blue color",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))))) >= 1"
    },
    "1352": {
        "sentence": "There is a tower with exactly two blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)) "
    },
    "1355": {
        "sentence": "There is 1 tower with 2 blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))) >= 2)) == 1"
    },
    "1360": {
        "sentence": "There is a tower which has only one color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: all_same_color(x.all_items_in_box())))"
    },
    "1361": {
        "sentence": "There is one tower with exactly two blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "1366": {
        "sentence": "there are two towers with the same number of blocks",
        "lf": "count(filter_obj(combinations(all_boxes, 2), lambda x: count(x[0].all_items_in_box()) == count(x[1].all_items_in_box()))) == 1"
    },
    "1367": {
        "sentence": "There is a black block as the base of a tower.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x))))))"
    },
    "1368": {
        "sentence": "There is a tower with yellow base.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x))))))"
    },
    "1376": {
        "sentence": "the tower with three blocks has a black block as a middle block",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_second(x))))))"
    },
    "1378": {
        "sentence": "There is at least 1 tower with a yellow block at the bottom",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))))) == 1"
    },
    "1379": {
        "sentence": "There are 4 blue blocks",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 4"
    },
    "1380": {
        "sentence": "The second block from the base of a tower is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_second(x))))))"
    },
    "1385": {
        "sentence": "there is at least one tower with exactly three blocks having a yellow object as a middle block",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_second(x))))))"
    },
    "1386": {
        "sentence": "There are two yellow blocks as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_top(x)))) == 2 or exist(filter_obj(all_items, lambda y: AND(is_yellow(y), is_top(y)) and get_below(y) and is_yellow(unique(get_below(y)))))"
    },
    "1387": {
        "sentence": "There are at least two towers with the same color.",
        "lf": "exist(filter_obj(combinations(all_boxes, 2), lambda x: len(intersect(get_set_colors(x[0]), get_set_colors(x[1]))) > 0))"
    },
    "1389": {
        "sentence": "There is a box with 3 items at most of which there are at least one yellow and one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 1 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "1391": {
        "sentence": "There is a black block as the base of a tower with exactly three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x))))))"
    },
    "1392": {
        "sentence": "There is a box with a black item between two items of the same color.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: get_above(x) and get_below(x) and AND(is_black(x), all_same_color(union(get_above(x), get_below(x)))))))) == 1"
    },
    "1394": {
        "sentence": "There are only two towers with yellow blocks, and at least one of them has yellow block as the top of a tower.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)))) == 2 and exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x))))))"
    },
    "1401": {
        "sentence": "There is a black block above two yellow blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), count(filter_color(get_box_all_below(x), Color.YELLOW)) == 2)))"
    },
    "1406": {
        "sentence": "Two of the three towers has the same base color that is not black.",
        "lf": "OR(count(filter_color(filter_obj(all_items, lambda x: AND(AND(is_bottom(x), not is_black(x)), x.box.is_tower())), Color.BLUE)) >= 2, count(filter_color(filter_obj(all_items, lambda x: AND(AND(is_bottom(x), not is_black(x)), x.box.is_tower())), Color.YELLOW)) >= 2)"
    },
    "1408": {
        "sentence": "there is one tower with exactly two blocks of same color",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == count(get_set_colors(x)) + 1))"
    },
    "1409": {
        "sentence": "There are 2 blue blocks",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x))) == 2"
    },
    "1416": {
        "sentence": "There is at least 1 tower with 1 blue block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower())))"
    },
    "1417": {
        "sentence": "There are exactly two towers with black blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.BLACK)), x.is_tower()))) == 2"
    },
    "1420": {
        "sentence": "There is 1 tower with only black blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x, Color.BLACK)), count(get_set_colors(x)) == 1), x.is_tower())))"
    },
    "1424": {
        "sentence": "There is a box with 3 items and a black one on top.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), count(x.box) == 3)))"
    },
    "1428": {
        "sentence": "there is exactly one tower with a blue block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "1434": {
        "sentence": "ll the towers have at least 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.YELLOW)), x.is_tower()))) == 3"
    },
    "1435": {
        "sentence": "the tower with three blocks has a yellow block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(x) == 3, x.is_tower()), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_bottom(x)))))))"
    },
    "1439": {
        "sentence": "There is a tower which has three blocks and the top is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(x) == 3, x.is_tower()), exist(filter_obj(x, lambda x: AND(is_blue(x), is_top(x)))))))"
    },
    "1440": {
        "sentence": "There is a black block that is between the two blocks that  is not black.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), not exist(filter_color(get_touching(x), Color.BLACK))), count(get_touching(x)) == 2)))"
    },
    "1441": {
        "sentence": "There are two towers of three blocks each",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(x) == 3, x.is_tower()))) == 2"
    },
    "1445": {
        "sentence": "There are only two towers that has black block.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.BLACK)), x.is_tower()))) == 2"
    },
    "1448": {
        "sentence": "There is a yellow block on a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_color(get_above(x), Color.YELLOW)))))"
    },
    "1450": {
        "sentence": "There is a blue block on a blue block in a tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), exist(filter_color(get_above(x), Color.BLUE))), count(x.box) == 4), x.box.is_tower())))"
    },
    "1454": {
        "sentence": "There is 1 tower with at least 2 yellow blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.YELLOW)) >= 2, x.is_tower())))"
    },
    "1456": {
        "sentence": "There is at least one blue block as the base of a tower with at least two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_bottom(x)), count(x.box) >= 2), x.box.is_tower())))"
    },
    "1457": {
        "sentence": "There are at least 4 blue blocks",
        "lf": "count(filter_color(all_items, Color.BLUE)) >= 4"
    },
    "1459": {
        "sentence": "There is one tower with a yellow block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "1460": {
        "sentence": "There is exactly one tower with a yellow block at base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "1461": {
        "sentence": "there is a tower with a black block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_bottom(x)))), x.is_tower())))"
    },
    "1462": {
        "sentence": "In on of the tower there is a blue block above a yellow block with a blue block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), exist(filter_color(get_above(x), Color.BLUE))))), exist(filter_obj(x, lambda x: AND(is_blue(x), is_top(x))))), x.is_tower())))"
    },
    "1466": {
        "sentence": "There are two towers with two yellow blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.YELLOW)) == 2, x.is_tower()))) == 2"
    },
    "1474": {
        "sentence": "There is a box with only one blue item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 1))"
    },
    "1478": {
        "sentence": "The top of a four blocks tower is black.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_top(x)), count(x.box) == 4), x.box.is_tower())))"
    },
    "1479": {
        "sentence": "There is a yellow block as the top of a tower with at least two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_top(x)), count(x.box) >= 2), x.box.is_tower())))"
    },
    "1480": {
        "sentence": "There are exactly 2 black items on top of the item touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_second(x), is_black(x)))), exist(filter_obj(x, lambda x: AND(is_third(x), is_black(x)))))))"
    },
    "1482": {
        "sentence": "There is a box with only one black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and count(filter_color(x, Color.BLACK)) == 1))"
    },
    "1489": {
        "sentence": "There is a black block as the top of a tower.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), x.box.is_tower())))"
    },
    "1493": {
        "sentence": "There is 1 tower with 1 blue block in the middle of it",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(AND(is_blue(x), not is_top(x)), not is_bottom(x)))), x.is_tower()))) == 1"
    },
    "1494": {
        "sentence": "One of the three towers is blue.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x, Color.BLUE)) == count(x))) == 1"
    },
    "1495": {
        "sentence": "There is a tower with only black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x, Color.BLACK)), count(get_set_colors(x)) == 1), x.is_tower())))"
    },
    "1505": {
        "sentence": "There a 5 blue blocks",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 5"
    },
    "1506": {
        "sentence": "There is at least one tower with exactly two yellow blocks.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)), 1)"
    },
    "1511": {
        "sentence": "The first two blocks from the base of a tower are black.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_bottom(x) and exist(get_above(x)) and is_black(unique(get_above(x)))))"
    },
    "1514": {
        "sentence": "There is a box with a black item touching the wall and a blue item on top.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x) and exist(filter_obj(x.box.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "1515": {
        "sentence": "ll the towers have at least one block that is the same in color.",
        "lf": "All(all_boxes, lambda x: x.is_tower() and exist(filter_color(x.all_items_in_box(), Color.BLUE))) or All(all_boxes, lambda x: x.is_tower() and exist(filter_color(x.all_items_in_box(), Color.BLACK))) or All(all_boxes, lambda x: x.is_tower() and exist(filter_color(x.all_items_in_box(), Color.YELLOW)))"
    },
    "1518": {
        "sentence": "There is 1 tower than contains at leats 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 1))) == 1"
    },
    "1527": {
        "sentence": "there is at least one tower with a black block at the base",
        "lf": "ge(count(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and is_bottom(x))), 1)"
    },
    "1529": {
        "sentence": "there are two towers with a black block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))) == 2"
    },
    "1530": {
        "sentence": "there is a tower with exactly one block which is of black color",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and is_black(unique(x.all_items_in_box()))))"
    },
    "1534": {
        "sentence": "There is a blue block as the base of a tower with more than two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_bottom(x) and gt(count(x.box.all_items_in_box()), 2)))"
    },
    "1535": {
        "sentence": "There are 5 black blocks",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 5"
    },
    "1539": {
        "sentence": "There is a box with 4 items of which 2 are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "1543": {
        "sentence": "There is 1 tower with 3 blocks of the same colour",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and (count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3 or count(filter_color(x.all_items_in_box(), Color.BLUE)) == 3 or count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))) == 1"
    },
    "1544": {
        "sentence": "There is a box with a yellow item on top and a blue item right beneath it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y) and exist(get_below(y)) and is_blue(unique(get_below(y)))))))"
    },
    "1545": {
        "sentence": "there are exactly two towers with a yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 2"
    },
    "1547": {
        "sentence": "there is one tower with a blue block at the base and black block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))) == 1"
    },
    "1548": {
        "sentence": "Two towers has a yellow blocks under a blue blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(get_above(y)) and is_blue(unique(get_above(y))))))) == 2"
    },
    "1549": {
        "sentence": "There are at least 2 towers with a yellow block at the base",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))), 2)"
    },
    "1553": {
        "sentence": "There is a black block that is attached to blue and yellow blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and exist(filter_color(get_touching(x), Color.BLUE)) and exist(filter_color(get_touching(x), Color.YELLOW))))"
    },
    "1554": {
        "sentence": "There is a tower with exactly two black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "1558": {
        "sentence": "One of the three tower have two colors.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ((exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLUE))) or ((exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLACK))) or ((exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)))))))) == 1 "
    },
    "1559": {
        "sentence": "There is a blue block as the base of a tower with only two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_blue(x) and is_bottom(x) and count(x.box.all_items_in_box()) == 2))"
    },
    "1561": {
        "sentence": "there is a tower with exactly one blue block which is at the top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "1563": {
        "sentence": "There are two towers that has a blue block above a black block.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and exist(get_below(y)) and is_black(unique(get_below(y))))))) == 2"
    },
    "1566": {
        "sentence": "There is 1 tower with 1 black block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))) == 1"
    },
    "1567": {
        "sentence": "there is a tower with a yellow block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y)))))"
    },
    "1569": {
        "sentence": "at least one of the tower with four blocks has exactly same color block at the top and base.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_bottom(y) and exist(filter_obj(x.all_items_in_box(), lambda z: is_top(z) and equal_color(query_color(y), query_color(z)))))))), 1)"
    },
    "1570": {
        "sentence": "There is a yellow block as the top of a tower with exactly three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and is_top(x) and count(x.box.all_items_in_box()) == 3))"
    },
    "1574": {
        "sentence": "There is at least one yellow block as the top of a tower with at least two blocks.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_yellow(x) and is_top(x) and ge(count(x.box.all_items_in_box()), 2))), 1)"
    },
    "1576": {
        "sentence": "tower with three objects has a black block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_color(x.all_items_in_box(), Color.BLACK)))) == 1"
    },
    "1577": {
        "sentence": "There are at least 2 blue blocks",
        "lf": "ge(count(filter_color(all_items, Color.BLUE)), 2)"
    },
    "1581": {
        "sentence": "Two tower have the same base but different on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(all_boxes, lambda y: y.is_tower() and equal_color(query_color(unique(filter_obj(x.all_items_in_box(), is_bottom))), query_color(unique(filter_obj(y.all_items_in_box(), is_bottom)))) and NOT(equal_color(query_color(unique(filter_obj(x.all_items_in_box(), is_top))), query_color(unique(filter_obj(y.all_items_in_box(), is_top)))))))))"
    },
    "1583": {
        "sentence": "there is at least one tower with exactly two blocks having a black block at the top",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))), 1)"
    },
    "1584": {
        "sentence": "There is at least 1 black block in each box",
        "lf": "All(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 1))"
    },
    "1588": {
        "sentence": "There is 1 tower with a yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 1"
    },
    "1589": {
        "sentence": "There is a blue block as the base of two towers.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_bottom(x) and x.box.is_tower())) == 2"
    },
    "1593": {
        "sentence": "There are 3 yellow blocks",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 3"
    },
    "1595": {
        "sentence": "There is a box with 3 items of only black and yellow color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and NOT(exist(filter_color(x.all_items_in_box(), Color.BLUE)))))"
    },
    "1600": {
        "sentence": "there are two towers with yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 2"
    },
    "1602": {
        "sentence": "There is no black block above a blue block.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_below(x), Color.BLUE)))))"
    },
    "1604": {
        "sentence": "There is a box with 2 items and a black one is touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 2, exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))))))"
    },
    "1605": {
        "sentence": "There is a blue block as the top of a tower with at least three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), count(x.box.all_items_in_box()) >= 3)))"
    },
    "1608": {
        "sentence": "There is a box with 3 items of which 2 are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 3, count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)))"
    },
    "1610": {
        "sentence": "There is a box with two squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "1611": {
        "sentence": "there is a tower with a black block above a yellow block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_below(x), Color.YELLOW)))))"
    },
    "1612": {
        "sentence": "There are at least 2 yellow blocks",
        "lf": "count(filter_color(all_items, Color.YELLOW)) >= 2"
    },
    "1613": {
        "sentence": "There is a yelow item with a black item on top of it.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), exist(filter_color(x.box.all_items_in_box(), Color.YELLOW)))))"
    },
    "1614": {
        "sentence": "there is a tower which has only blue color blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda x: is_blue(x))))"
    },
    "1618": {
        "sentence": "There is exactly one blue block as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "1619": {
        "sentence": "There is a blue block as the base of a tower with at most three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), count(x.box.all_items_in_box()) <= 3)))"
    },
    "1628": {
        "sentence": "There is a box with blue and yellow items and the yellow one on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(contained({Color.YELLOW, Color.BLUE}, get_set_colors(x)), not member_of(Color.BLACK, get_set_colors(x))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x)))))))"
    },
    "1630": {
        "sentence": "there is a tower with exactly two blocks having a blue block at the base.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(x.all_items_in_box()) == 2, exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x))))), x.is_tower())))"
    },
    "1631": {
        "sentence": "There is a box with 2 items at most and a black item touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) <= 2, exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))))))"
    },
    "1635": {
        "sentence": "There are 3 black blocks",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 3"
    },
    "1644": {
        "sentence": "There is a tower that the base and second block are the same in color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: query_color(filter_obj(x, lambda x: is_bottom(x))) == query_color(filter_obj(x, lambda x: is_second(x)))))"
    },
    "1651": {
        "sentence": "There is a box where a black and blue square are touching each other.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), exist(filter_color(get_touching(x), Color.BLACK)))))"
    },
    "1652": {
        "sentence": "There is a box with a black item touching the wall and another black item on top of it.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_touching_wall(x, Side.ANY)), exist(filter_color(get_box_all_above(x), Color.BLACK)))))"
    },
    "1654": {
        "sentence": "there is at least one tower with four blocks with a black block below the top block",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 4, exist(filter_obj(x, lambda x: AND(is_third(x), is_black(x)))))))"
    },
    "1659": {
        "sentence": "There is 1 tower with 1 blue block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "1660": {
        "sentence": "There are two towers with the same base color that is not blue.",
        "lf": "AND(all_same_color(filter_obj(all_items, lambda x: AND(is_bottom(x), not is_blue(x)))), count(filter_obj(all_items, lambda x: AND(is_bottom(x), not is_blue(x)))) == 2)"
    },
    "1666": {
        "sentence": "There is a tower which has only black color blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == count(filter_color(x, Color.BLACK)), x.is_tower())))"
    },
    "1668": {
        "sentence": "the tower with four blocks has a blue block over a yellow block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), exist(filter_color(get_below(x), Color.YELLOW))), count(x.box) == 4), x.box.is_tower())))"
    },
    "1672": {
        "sentence": "There is a blue block as the base of a tower with two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_bottom(x)), count(x.box) == 2), x.box.is_tower())))"
    },
    "1673": {
        "sentence": "There is 1 tower with 2 yellow blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.YELLOW)) == 2, x.is_tower()))) == 1"
    },
    "1677": {
        "sentence": "There is 1 tower with 1 black block and 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x, Color.YELLOW)) == 1, count(filter_color(x, Color.BLACK)) == 1), x.is_tower()))) == 1"
    },
    "1684": {
        "sentence": "there is a tower with less than four blocks having a blue block at the top.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_top(x)), count(x.box) <= 3), x.box.is_tower())))"
    },
    "1692": {
        "sentence": "There is a box with 4 items and a black one on top.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), count(x.box) == 4)))"
    },
    "1695": {
        "sentence": "There is a tower that has two blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) == 2, x.is_tower())))"
    },
    "1700": {
        "sentence": "There is a yellow block above a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLACK)))))"
    },
    "1708": {
        "sentence": "there is one tower with a black block over a blue block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), exist(filter_color(get_below(x), Color.BLUE))), x.box.is_tower())))"
    },
    "1709": {
        "sentence": "There is one tower with exactly one object which is yellow in color",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(x) == 1, member_of(Color.YELLOW, get_set_colors(x))))) == 1"
    },
    "1710": {
        "sentence": "There are two towers with blue blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) >= 1, x.is_tower()))) == 2"
    },
    "1713": {
        "sentence": "There is a four blocks tower that the top is yellow.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_top(x)), count(x.box) == 4), x.box.is_tower())))"
    },
    "1718": {
        "sentence": "ll the top of the towers have the same color.",
        "lf": "all_same_color(filter_obj(all_items, lambda x: is_top(x)))"
    },
    "1727": {
        "sentence": "There is a box which has only one yellow block base.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_yellow(x), is_bottom(x)))) == 1)) == 1"
    },
    "1728": {
        "sentence": "There are 2 towers with at least 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.YELLOW)) >= 1, x.is_tower()))) == 2"
    },
    "1736": {
        "sentence": "There is exactly one blue block as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "1737": {
        "sentence": "There are at least two yellow squares touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x, Side.ANY)))) >= 2"
    },
    "1739": {
        "sentence": "The items of all 3 colors are touching the wall.",
        "lf": "count(get_set_colors(filter_obj(all_items, lambda x: is_touching_wall(x, Side.ANY)))) == 3"
    },
    "1741": {
        "sentence": "There is a yellow block as the top of a tower with at least three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_top(x)), count(x.box) >= 3)))"
    },
    "1744": {
        "sentence": "there are exactly two towers with blue block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower()))) == 2"
    },
    "1749": {
        "sentence": "There are only 2 towers with at least 1 blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x, Color.BLUE)))) == 2"
    },
    "1750": {
        "sentence": "There is a tower with only yellow blocks with less than four blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(member_of(Color.YELLOW, get_set_colors(x)), count(get_set_colors(x)) == 1), count(x) < 4)))"
    },
    "1751": {
        "sentence": "There is no yellow block as the top of a tower.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_top(x)), x.box.is_tower())))"
    },
    "1752": {
        "sentence": "There is at least one yellow block as the base of a tower with at least two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), count(x.box) >= 2)))"
    },
    "1753": {
        "sentence": "There is a box with at most 3 items of black and yellow color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(contained({Color.YELLOW, Color.BLACK}, get_set_colors(x)), count(get_set_colors(x)) == 2), count(x) <= 3)))"
    },
    "1754": {
        "sentence": "there is exactly one tower with two blocks and with a black block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_bottom(x)), count(x.box) == 2), x.box.is_tower()))) == 1"
    },
    "1755": {
        "sentence": "There is only one yellow block as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "1759": {
        "sentence": "The is one tower with a black block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "1760": {
        "sentence": "There is only one tower which has second black block.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_second(x)), x.box.is_tower()))) == 1"
    },
    "1762": {
        "sentence": "There is box with 3 items and a blue item touching the wall.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_touching_wall(y))))) == 1"
    },
    "1763": {
        "sentence": "There is at least one tower with three blocks having a yellow block above a blue block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLUE))), count(x.box) == 3)))"
    },
    "1771": {
        "sentence": "There is a box with only one square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x, Shape.SQUARE)) == 1))"
    },
    "1772": {
        "sentence": "There is at least 1 tower with a blue block at the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower())))"
    },
    "1781": {
        "sentence": "The top of a two blocks  tower is blue.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), count(x.box) == 2)))"
    },
    "1782": {
        "sentence": "t least 1 tower has a yellow block at its base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower())))"
    },
    "1783": {
        "sentence": "there is a tower with three blocks having atleast two blocks of yellow color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.YELLOW)) >= 2, count(x) == 3)))"
    },
    "1786": {
        "sentence": "There are two black blocks above a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), count(filter_color(get_above(x), Color.BLACK)) == 2)))"
    },
    "1794": {
        "sentence": "Two towers have yellow base.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "1797": {
        "sentence": "There is at lease 1 tower with a bkack block at the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower())))"
    },
    "1801": {
        "sentence": "there is a tower with exactly one block which is of yellow color",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and is_yellow(unique(x.all_items_in_box()))))"
    },
    "1802": {
        "sentence": "There is a box with 4 items of 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(get_set_colors(x.all_items_in_box())) == 3))"
    },
    "1805": {
        "sentence": "one of the tower with four blocks has a yellow block on the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 1"
    },
    "1806": {
        "sentence": "There is a tower with four blocks not having a yellow block at top",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and NOT(exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))))"
    },
    "1807": {
        "sentence": "There is exactly one tower with a black block at base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))))) == 1"
    },
    "1810": {
        "sentence": "There is a tower which is the second block from the base is yellow.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_second(y) and is_yellow(y))))) == 1"
    },
    "1812": {
        "sentence": "There are 2 towers where the top and bottom blocks are both blue",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and All(filter_obj(x.all_items_in_box(), lambda y: is_top(y) or is_bottom(y)), is_blue))) == 2"
    },
    "1813": {
        "sentence": "There are two towers with black blocks as the second level.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_second(y))))) == 2"
    },
    "1814": {
        "sentence": "The total black blocks of the two box is four.",
        "lf": "exist(filter_obj(combinations(all_boxes, 2), lambda x: count(filter_color(x[0].all_items_in_box(), Color.BLACK)) + count(filter_color(x[1].all_items_in_box(), Color.BLACK)) == 4))"
    },
    "1817": {
        "sentence": "There is a tower with two yellow blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "1819": {
        "sentence": "There are at least 2 towers with a black block at the top",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))), 2)"
    },
    "1824": {
        "sentence": "The number of items in the boxes is different.",
        "lf": "All(combinations(all_boxes, 2), lambda x: count(x[0].all_items_in_box()) != count(x[1].all_items_in_box()))"
    },
    "1825": {
        "sentence": "There is a box with 2 yellow and 1 black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "1832": {
        "sentence": "There is only 1 tower with 1 blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1)) == 1"
    },
    "1833": {
        "sentence": "One tower has a yellow block on the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 1"
    },
    "1836": {
        "sentence": "there is one tower with three blocks having a yellow block in between two blocks of same color",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(get_above(y)) and exist(get_below(y)) and equal_color(query_color(unique(get_above(y))), query_color(unique(get_below(y)))))))) == 1"
    },
    "1837": {
        "sentence": "there is at least one tower with exactly two blocks",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2)), 1)"
    },
    "1845": {
        "sentence": "There is a tower and the color of the second and third block is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_second(y) and is_black(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_third(y) and is_black(y)))))"
    },
    "1848": {
        "sentence": "There are 2 towers with only blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_blue))) == 2"
    },
    "1849": {
        "sentence": "There is a box with only yellow squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y)) and gt(count(x.all_items_in_box()), 1)))"
    },
    "1852": {
        "sentence": "there is exactly one tower with a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y))))) == 1"
    },
    "1855": {
        "sentence": "There are 2 towers with yellow blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_color(x.all_items_in_box(), Color.YELLOW)))) >= 2"
    },
    "1856": {
        "sentence": "there is one tower which has a black block over a black block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_above(y)) and is_black(unique(get_above(y))))))) == 1"
    },
    "1860": {
        "sentence": "There are exactly two black blocks as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_bottom(x) and x.box.is_tower())) == 2"
    },
    "1861": {
        "sentence": "There is a back block of at least one tower.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and x.box.is_tower()))"
    },
    "1862": {
        "sentence": "There are two boxes with only one blue item.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and is_blue(unique(x.all_items_in_box())))) == 2"
    },
    "1864": {
        "sentence": "there is a tower with four blocks having a yellow block at the base and a different color block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: NOT(is_yellow(y)) and is_top(y)))))"
    },
    "1865": {
        "sentence": "There is a yellow block between a black blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and exist(get_below(x)) and is_black(unique(get_below(x))) and exist(get_above(x)) and is_black(unique(get_above(x)))))"
    },
    "1868": {
        "sentence": "there is block which has a exactly one object which is of yellow color",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and is_yellow(unique(x.all_items_in_box()))))"
    },
    "1870": {
        "sentence": "there is one tower with a  black  block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))) == 1"
    },
    "1871": {
        "sentence": "There is a box with a yellow item on top and a black item right beneath it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y) and exist(get_below(y)) and is_black(unique(get_below(y)))))))"
    },
    "1874": {
        "sentence": "There is a box with 2 items and the black item is touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_touching_wall(y)))))"
    },
    "1883": {
        "sentence": "There are 2 towers with 1 blue block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))) == 2"
    },
    "1884": {
        "sentence": "there are two towers which has exactly one black block as the top most block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y) and (NOT(exist(get_below(y))) or (exist(get_below(y)) and NOT(is_black(unique(get_below(y)))))))))) >= 2"
    },
    "1888": {
        "sentence": "the tower with four blocks has a blue block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y)))))"
    },
    "1889": {
        "sentence": "There are two towers with four blocks, and each has at least two yellow blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 2))) == 2"
    },
    "1895": {
        "sentence": "There is 1 tower with 3 black blocks on top of a different coloured block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: NOT(is_black(y)) and All(get_box_all_above(y), is_black) and count(get_box_all_above(y)) == 3)))) == 1"
    },
    "1898": {
        "sentence": "There is a blue block over a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and exist(filter_color(get_box_all_below(x), Color.YELLOW))))"
    },
    "1899": {
        "sentence": "There is 1 tower with at least 2 black blocks stacked together",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_above(y)) and is_black(unique(get_above(y))))))) == 1"
    },
    "1903": {
        "sentence": "There is a black block as the base of at least one tower.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_black(x) and is_bottom(x) and x.box.is_tower())), 1)"
    },
    "1914": {
        "sentence": "There is a tower with more than two blocks and the top block is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and gt(count(x.all_items_in_box()), 2) and exist(filter_obj(x.all_items_in_box(), lambda y: is_top(y) and is_yellow(y)))))"
    },
    "1919": {
        "sentence": "There is a box with 1 blue and 1 yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "1923": {
        "sentence": "There is a box with a blue and yellow square touching each other.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y) and exist(filter_obj(get_touching(y), lambda z: is_yellow(z) and is_square(z)))))))"
    },
    "1925": {
        "sentence": "There is a blue block above a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and exist(filter_color(get_below(x), Color.YELLOW))))"
    },
    "1934": {
        "sentence": "there is a tower with only yellow blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_yellow)))"
    },
    "1940": {
        "sentence": "There are two yellow items touching each other.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and exist(filter_color(get_touching(x), Color.YELLOW))))"
    },
    "1941": {
        "sentence": "There is a tower with only one black block and two blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 and count(x.all_items_in_box()) == 3))"
    },
    "1942": {
        "sentence": "There is 1 tower with yellow and black blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), lambda y: is_yellow(y) or is_black(y)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLACK)))) == 1"
    },
    "1948": {
        "sentence": "There is only 1 tower with at least 1 blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1))) == 1"
    },
    "1950": {
        "sentence": "There is 1 tower with a ble block in the middle",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and NOT(is_top(y)) and NOT(is_bottom(y)))))) == 1"
    },
    "1951": {
        "sentence": "There is a black block on a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and exist(filter_color(intersect(get_above(x), get_touching(x)), Color.BLACK))))"
    },
    "1953": {
        "sentence": "There is a box with all 3 colors and a blue one on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "1954": {
        "sentence": "there are two towers which has yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 2"
    },
    "1957": {
        "sentence": "There are two towers which has only two blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)) == 2"
    },
    "1959": {
        "sentence": "There is at least 1 tower with at least 2 yellow blocks stacked together",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(filter_color(get_touching(y), Color.YELLOW)))))), 1)"
    },
    "1960": {
        "sentence": "there is exactly one tower with black block over a yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_below(y)) and is_yellow(unique(get_below(y))))))) == 1"
    },
    "1961": {
        "sentence": "there is one tower with a yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 1"
    },
    "1964": {
        "sentence": "There are two towers with a black top.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))) == 2"
    },
    "1966": {
        "sentence": "There is 1 tower with 1 block in it",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1)) == 1"
    },
    "1968": {
        "sentence": "There is a box with a yellow item touching the wall and at least 2 blue on top of it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: AND(AND(is_yellow(y), is_touching_wall(y)), count(filter_color(get_box_all_above(y), Color.BLUE)) >= 2)))))"
    },
    "1969": {
        "sentence": "There is a four block tower where the base and second blocks are the same in color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_bottom(y) and equal_color(query_color(y), query_color(unique(get_above(y))))))))"
    },
    "1970": {
        "sentence": "There is a yellow block as the base of at least two towers.",
        "lf": "ge(count(filter_obj(all_items, lambda x: x.box.is_tower() and is_yellow(x) and is_bottom(x))), 2)"
    },
    "1972": {
        "sentence": "there is one tower with two blocks where atleast one block is yellow",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 1))) == 1"
    },
    "1974": {
        "sentence": "There is a tower with a yellow block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y)))))"
    },
    "1976": {
        "sentence": "There is at leats 1 tower with a blue block at the base",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))), 1)"
    },
    "1977": {
        "sentence": "There is a tower with two blocks where the base is blue and the top is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y)))))"
    },
    "1982": {
        "sentence": "there is a tower with three blocks having a blue block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y)))))"
    },
    "1986": {
        "sentence": "There are at least 2 towers with at least 1 blue block",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1))), 2)"
    },
    "1989": {
        "sentence": "ll towers have at least 1 yellow block in it",
        "lf": "All(filter_obj(all_boxes, lambda x: x.is_tower()), lambda x: ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 1))"
    },
    "1990": {
        "sentence": "There is at least one blue block as the base of a tower.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_bottom(x) and x.box.is_tower())), 1)"
    },
    "1997": {
        "sentence": "There is a yellow block above the black block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and exist(filter_color(get_below(x), Color.BLACK))))"
    },
    "1999": {
        "sentence": "There is a yellow tower with only one block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_yellow) and count(x.all_items_in_box()) == 1))"
    },
    "2001": {
        "sentence": "There is 1 tower with at least 1 black block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x, Color.BLACK)))) == 1"
    },
    "2003": {
        "sentence": "There is a box with 3 items of black and blue color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(contained({Color.BLACK, Color.BLUE}, get_set_colors(x)), count(get_set_colors(x)) == 2), count(x) == 3)))"
    },
    "2007": {
        "sentence": "there is a tower with three blocks of three different colors",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(get_set_colors(x)) == 3, count(x) == 3), x.is_tower())))"
    },
    "2009": {
        "sentence": "There is 1 tower with blocks of all 3 colours",
        "lf": "count(filter_obj(all_boxes, lambda x: count(get_set_colors(x)) == 3)) == 1"
    },
    "2011": {
        "sentence": "There is a tower with exactly three blocks with a blue block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_top(x)), count(x.box) == 3), x.box.is_tower())))"
    },
    "2012": {
        "sentence": "There is a box with a blue item touching the wall and a yellow item on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_touching_wall(x, Side.ANY)))), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_top(x)))))))"
    },
    "2013": {
        "sentence": "There is a tower with only blue and yellow blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(get_set_colors(x)) == 2, contained({Color.BLUE, Color.YELLOW}, get_set_colors(x)))))"
    },
    "2014": {
        "sentence": "There are 2 towers with a black block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), x.box.is_tower()))) == 2"
    },
    "2015": {
        "sentence": "there is a tower with exactly two blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 2))"
    },
    "2018": {
        "sentence": "ll the towers has a black block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x, Color.BLACK)))) == 3"
    },
    "2020": {
        "sentence": "There is a tower with a yellow block above a blue block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLUE))), x.box.is_tower())))"
    },
    "2021": {
        "sentence": "There is a box with only yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(all_same_color(x), exist(filter_color(x, Color.YELLOW)))))"
    },
    "2022": {
        "sentence": "there are exactly two towers with a yellow block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "2025": {
        "sentence": "There is a yellow block as the top of a tower.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_top(x)), x.box.is_tower())))"
    },
    "2027": {
        "sentence": "There is a box with a yellow item touching the wall and a blue item on top of it.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_touching_wall(x, Side.ANY)), exist(filter_color(get_above(x), Color.BLUE)))))"
    },
    "2028": {
        "sentence": "The second block from the base of a tower is blue.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_second(x), is_blue(x)), x.box.is_tower())))"
    },
    "2029": {
        "sentence": "There are only two black squares touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "2033": {
        "sentence": "There is a black block as the top of two towers.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), x.box.is_tower()))) == 2"
    },
    "2034": {
        "sentence": "There is no black block on a blue block.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_below(x), Color.BLUE)))))"
    },
    "2035": {
        "sentence": "There is at least one tower with exactly three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 3))"
    },
    "2036": {
        "sentence": "There is a box with only black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(get_set_colors(x)) == 1, member_of(Color.BLACK, get_set_colors(x)))))"
    },
    "2039": {
        "sentence": "ll the three towers has different top colors.",
        "lf": "count(get_set_colors(filter_obj(all_items, lambda x: is_top(x)))) == 3"
    },
    "2042": {
        "sentence": "there is a tower with exactly two blocks where both blocks are of same color",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 2, all_same_color(x))))"
    },
    "2046": {
        "sentence": "There is a two blocks tower and the top is blue.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_top(x)), count(x.box) == 2), x.box.is_tower())))"
    },
    "2047": {
        "sentence": "There is yellow item touching the wall with a black item on top.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), exist(filter_color(get_above(x), Color.BLACK)))))"
    },
    "2049": {
        "sentence": "There is 1 tower with a black block in the middle",
        "lf": "count(filter_obj(all_items, lambda x: OR(AND(AND(is_black(x), is_second(x)), count(x.box) == 3), AND(is_black(x), count(x.box) == 1)))) == 1"
    },
    "2051": {
        "sentence": "There is a box with 3 items of which one is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.BLUE)), count(x) == 3)))"
    },
    "2055": {
        "sentence": "There is exactly one tower with a blue block at the base and yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_bottom(x)))), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_top(x))))), x.is_tower()))) == 1"
    },
    "2056": {
        "sentence": "There are two towers with the same height  but their base is not the same in color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(all_boxes, lambda y: y.is_tower() and count(x.all_items_in_box()) == count(y.all_items_in_box()) and get_set_colors(filter_obj(y.all_items_in_box(), is_bottom)) != get_set_colors(filter_obj(x.all_items_in_box(), is_bottom))))))"
    },
    "2060": {
        "sentence": "There is a black square touching the wall with at least two items on top of it.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), count(x.box) >= 3)))"
    },
    "2062": {
        "sentence": "The base of the two towers is blue.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "2063": {
        "sentence": "The top of a tower is black which is attached to a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), exist(filter_color(get_touching(x), Color.YELLOW)))))"
    },
    "2067": {
        "sentence": "There are 2 boxes with 2 items of 2 different colors.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(x) == 2, count(get_set_colors(x)) == 2))) == 2"
    },
    "2069": {
        "sentence": "There is exactly one box with one item.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 1)) == 1"
    },
    "2071": {
        "sentence": "There is a box with 3 items of all 3 different colors and a yellow on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(x) == 3, count(get_set_colors(x)) == 3), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_top(x)))))))"
    },
    "2073": {
        "sentence": "there is one tower with exactly two blocks of a yellow ad a black color each",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and AND(count(filter_color(x, Color.BLACK)) == 1, count(filter_color(x, Color.YELLOW)) == 1)))"
    },
    "2075": {
        "sentence": "There is a box with only 3 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 3))"
    },
    "2077": {
        "sentence": "There is at least one tower with four blocks having a blue block over a blue block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), exist(filter_color(get_above(x), Color.BLUE))), count(x.box) == 4), x.box.is_tower())))"
    },
    "2078": {
        "sentence": "There is a blue block between a black blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), x.box.is_tower()), exist(filter_color(get_box_all_above(x), Color.BLACK))), exist(filter_color(get_box_all_below(x), Color.BLACK)))))"
    },
    "2082": {
        "sentence": "ll the three towers has a blue block.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x, Color.BLUE)))) == 3"
    },
    "2084": {
        "sentence": "There is bo black block on a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), exist(filter_color(get_box_all_above(x), Color.BLACK)))))"
    },
    "2086": {
        "sentence": "There is as blue block above the yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), exist(filter_color(get_box_all_below(x), Color.YELLOW)))))"
    },
    "2087": {
        "sentence": "There are black blocks in each tower and the positions are the same.",
        "lf": "AND(count(filter_color(all_items, Color.BLACK)) >=3, OR(OR(OR(count(filter_obj(filter_color(all_items, Color.BLACK), lambda x: is_bottom(x))) == 3, count(filter_obj(filter_color(all_items, Color.BLACK), lambda x: is_second(x))) == 3), count(filter_obj(filter_color(all_items, Color.BLACK), lambda x: is_third(x))) == 3), count(filter_obj(filter_color(all_items, Color.BLACK), lambda x: is_top(x))) == 3))"
    },
    "2089": {
        "sentence": "There is a tower with exactly two yellow blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.YELLOW)) == 2, x.is_tower())))"
    },
    "2090": {
        "sentence": "One tower with a Yellow block at the top",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "2092": {
        "sentence": "There is exactly one blue block on a black block.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), count(filter_color(get_box_all_above(x), Color.BLUE)) == 1))) == 1"
    },
    "2093": {
        "sentence": "there is at least one tower with a yellow block above a black block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), exist(filter_color(get_box_all_below(x), Color.BLACK))), x.box.is_tower())))"
    },
    "2094": {
        "sentence": "There is a tower with two blue blocks above the base of a tower.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x, lambda x: AND(is_blue(x), not is_bottom(x)))) == 2, x.is_tower())))"
    },
    "2095": {
        "sentence": "There is a box with only 2 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 2))"
    },
    "2096": {
        "sentence": "There is a tower with a yellow top.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_top(x)), x.box.is_tower())))"
    },
    "2097": {
        "sentence": "The base and top of a four blocks tower are the the same in color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(x) == 4, all_same_color(filter_obj(x, lambda x: OR(is_bottom(x), is_top(x))))), x.is_tower())))"
    },
    "2098": {
        "sentence": "there is a tower with a black block over a blue block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), exist(filter_color(get_below(x), Color.BLUE))), x.box.is_tower())))"
    },
    "2101": {
        "sentence": "there is exactly one tower with a blue block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_bottom(y))))) == 1"
    },
    "2102": {
        "sentence": "There is no tower with two yellow blocks.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)))"
    },
    "2105": {
        "sentence": "There is a tower with exactly one block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1))"
    },
    "2110": {
        "sentence": "There is a tower which has only one block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1))"
    },
    "2112": {
        "sentence": "There is a tower with blocks of three different colors",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(get_set_colors(x.all_items_in_box())) == 3))"
    },
    "2114": {
        "sentence": "There is a blue block as the base of exactly one tower.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_bottom(x) and x.box.is_tower())) == 1"
    },
    "2115": {
        "sentence": "There are 2 towers with at least 2 blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 2))) >= 2"
    },
    "2116": {
        "sentence": "There is a yellow block bellow a blue block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and exist(get_above(x)) and is_blue(unique(get_above(x)))))"
    },
    "2125": {
        "sentence": "There is a box where a black and yellow square are touching each other.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y) and exist(filter_obj(get_touching(y), lambda z: is_yellow(z) and is_square(z)))))))"
    },
    "2127": {
        "sentence": "there is exactly one tower with a black block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))) == 1"
    },
    "2135": {
        "sentence": "There is at least 1 tower with a blue block at the top",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y))))), 1)"
    },
    "2136": {
        "sentence": "There is a box with a black square touching the wall and blue and yellow squares on top of it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y) and is_touching_wall(y) and exist(get_above(y)) and exist(get_above(unique(get_above(y)))) and ((is_blue(unique(get_above(y))) and is_yellow(unique(get_above(unique(get_above(y)))))) or (is_yellow(unique(get_above(y))) and is_blue(unique(get_above(unique(get_above(y)))))))))))"
    },
    "2142": {
        "sentence": "There is a box with 4 items and a black on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y)))))"
    },
    "2145": {
        "sentence": "There is 1 tower that has exactly 1 block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1)) == 1"
    },
    "2146": {
        "sentence": "There is at least one blue block as the top of a tower.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_top(x) and x.box.is_tower())), 1)"
    },
    "2148": {
        "sentence": "There is only one blue block as the base of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_bottom(x) and x.box.is_tower())) == 1"
    },
    "2149": {
        "sentence": "There is at least one black block on a blue block.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_black(x) and exist(get_below(x)) and is_blue(unique(get_below(x))))), 1)"
    },
    "2151": {
        "sentence": "There is exactly one black block as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_top(x) and x.box.is_tower())) == 1"
    },
    "2153": {
        "sentence": "There is at least one yellow block above of a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and get_above(x) and is_yellow(unique(get_above(x)))))"
    },
    "2154": {
        "sentence": "There are two towers that has two the same color blocks attach with each other.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: exist(get_above(y)) and equal_color(query_color(y), query_color(unique(get_above(y)))))))) == 2"
    },
    "2157": {
        "sentence": "There is exactly one black block as the top of a tower with at least two blocks.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_top(x) and x.box.is_tower() and ge(count(x.box.all_items_in_box()), 2))) == 1"
    },
    "2158": {
        "sentence": "Two towers have the same height and the same top color.",
        "lf": "exist(filter_obj(combinations(all_boxes, 2), lambda x: x[0].is_tower() and x[1].is_tower() and count(x[0].all_items_in_box()) == count(x[1].all_items_in_box()) and equal_color(query_color(unique(filter_obj(x[0].all_items_in_box(), is_top))), query_color(unique(filter_obj(x[1].all_items_in_box(), is_top))))))"
    },
    "2159": {
        "sentence": "There is 1 tower with only black and yellow blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(get_set_colors(x.all_items_in_box())) == 2 and All(x.all_items_in_box(), lambda y: is_black(y) or is_yellow(y)))) == 1"
    },
    "2165": {
        "sentence": "There is a box with 2 items of the same color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(combinations(x.all_items_in_box(), 2), lambda y: equal_color(query_color(y[0]), query_color(y[1]))))))"
    },
    "2166": {
        "sentence": "There is a tower with only one block and the color is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and is_yellow(unique(x.all_items_in_box()))))"
    },
    "2168": {
        "sentence": "There is a tower with a black block above a blue block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_below(y)) and is_blue(unique(get_below(y)))))))"
    },
    "2170": {
        "sentence": "There is a yellow block as the top of a tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_top(x) and x.box.is_tower() and count(x.box.all_items_in_box()) == 4))"
    },
    "2171": {
        "sentence": "There is at least one tower with only one yellow block.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)), 1)"
    },
    "2172": {
        "sentence": "There are 5 yellow blocks",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 5"
    },
    "2173": {
        "sentence": "there is at least one tower with a yellow block at the top",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))), 1)"
    },
    "2176": {
        "sentence": "One tower has 2 blocks of the same colour",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(combinations(x.all_items_in_box(), 2), lambda y: equal_color(query_color(y[0]), query_color(y[1])))))) >= 1"
    },
    "2182": {
        "sentence": "there is a tower with a blue block at the top and a black block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y)))))"
    },
    "2183": {
        "sentence": "There is a box with only 2 blue and yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "2187": {
        "sentence": "There is 1 tower with a yellow block at the bottom",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))) == 1"
    },
    "2189": {
        "sentence": "There is tower with black second block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_second(y)))))"
    },
    "2190": {
        "sentence": "there is a tower with a black block above a yellow block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(filter_color(get_below(y), Color.YELLOW))))))"
    },
    "2191": {
        "sentence": "There is at least one black block on a black block.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_black(x) and exist(get_above(x)) and is_black(unique(get_above(x))))), 1)"
    },
    "2202": {
        "sentence": "There is 1 tower with exactly 1 black block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1)) == 1"
    },
    "2206": {
        "sentence": "There are two towers with yellow blocks on the top",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_top(y))))) == 2"
    },
    "2207": {
        "sentence": "There is a box with a yellow item touching the wall and 2 blue items on top of it.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_touching_wall(y) and count(filter_color(get_box_all_above(y), Color.BLUE)) == 2))))"
    },
    "2208": {
        "sentence": "There is a tower with three blocks and the base is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y)))))"
    },
    "2214": {
        "sentence": "There are two towers with block of same color at base",
        "lf": "exist(filter_obj(combinations(filter_obj(all_items, lambda x: is_bottom(x) and x.box.is_tower()), 2), lambda x: equal_color(query_color(x[0]), query_color(x[1]))))"
    },
    "2215": {
        "sentence": "There is a box with black item directly on top of the item touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and exist(get_below(y)) and is_touching_wall(unique(get_below(y)))))))"
    },
    "2217": {
        "sentence": "There are 4 black blocks",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 4"
    },
    "2226": {
        "sentence": "There is a box with 3 items of which 2 are blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "2227": {
        "sentence": "There is a black block on a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and exist(get_below(x)) and is_yellow(unique(get_below(x)))))"
    },
    "2230": {
        "sentence": "There is two blocks tower and the color is yellow and blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLUE))))"
    },
    "2233": {
        "sentence": "There is a box with only one yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "2240": {
        "sentence": "there is at least one tower with exactly three blocks having  all blocks of the same color",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and all_same_color(x.all_items_in_box()))), 1)"
    },
    "2243": {
        "sentence": "there is a tower with exactly one block which is of blue color",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and is_blue(unique(x.all_items_in_box()))))"
    },
    "2244": {
        "sentence": "There is a tower with only one block that is not blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 1 and NOT(is_blue(unique(x.all_items_in_box())))))"
    },
    "2245": {
        "sentence": "There is only one tower with black at the top.",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_top(y))))) == 1"
    },
    "2248": {
        "sentence": "there is one tower with a black block over a yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(filter_color(get_box_all_above(y), Color.BLACK)))))) == 1"
    },
    "2251": {
        "sentence": "There is a tower with only blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_blue)))"
    },
    "2259": {
        "sentence": "There is a black tower with only one block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_black) and count(x.all_items_in_box()) == 1))"
    },
    "2262": {
        "sentence": "The third block of a tower from the base is black.",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_third(x) and is_black(x)))"
    },
    "2263": {
        "sentence": "There is a tower with 1 black block and at least 1 blue block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1 and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1)))"
    },
    "2265": {
        "sentence": "There is 1 tower that has exactly 2 black blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)) >= 1"
    },
    "2267": {
        "sentence": "There is a box with 3 items and a black one is touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_touching_wall(y)))))"
    },
    "2268": {
        "sentence": "There is a yellow block as the base of a tower with at least two blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_bottom(x) and x.box.is_tower() and ge(count(x.box.all_items_in_box()), 2)))"
    },
    "2271": {
        "sentence": "One tower has 2 yellow blocks and 1 blue block",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1)) == 1"
    },
    "2272": {
        "sentence": "There is a yellow block as the base of a tower with three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_bottom(x) and x.box.is_tower() and count(x.box.all_items_in_box()) == 3))"
    },
    "2273": {
        "sentence": "There is 1 tower with only yellow blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and All(x.all_items_in_box(), is_yellow))) >= 1"
    },
    "2277": {
        "sentence": "there is a tower with a blue block above a base block",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_bottom(y) and exist(filter_color(get_above(y), Color.BLUE))))))"
    },
    "2286": {
        "sentence": "The top of the three towers are two blue and one black blocks.",
        "lf": "count(filter_color(filter_obj(all_items, lambda x: x.box.is_tower() and is_top(x)), Color.BLUE)) == 2 and count(filter_color(filter_obj(all_items, lambda x: x.box.is_tower() and is_top(x)), Color.BLACK)) == 1"
    },
    "2288": {
        "sentence": "There is as yellow block above a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and exist(filter_color(get_box_all_above(x), Color.YELLOW))))"
    },
    "2290": {
        "sentence": "the tower with two blocks has black block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_bottom(y)))))"
    },
    "2293": {
        "sentence": "the tower with exactly three blocks has a blue block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_top(y)))))"
    },
    "2295": {
        "sentence": "there is only one tower with a yellow block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: x.is_tower() and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_bottom(y))))) == 1"
    },
    "2300": {
        "sentence": "the tower with three blocks has blocks of two different color",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and count(get_set_colors(x.all_items_in_box())) == 2))"
    },
    "2302": {
        "sentence": "there is at least one tower with single object which is of yellow color",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x)))))"
    },
    "2305": {
        "sentence": "There is a box with one yellow item and at least 2 black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2))"
    },
    "2307": {
        "sentence": "The yellow item is touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x))))"
    },
    "2309": {
        "sentence": "there is a tower with exactly two yellow blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "2312": {
        "sentence": "There is a box with 3 items but not all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(get_set_colors(x.all_items_in_box())) < 3))"
    },
    "2313": {
        "sentence": "there is at least one tower with four blocks having a black block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x))))))"
    },
    "2315": {
        "sentence": "There is a box with 4 items of which at least 2 are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2))"
    },
    "2316": {
        "sentence": "There is a blue block as the base of a tower with at least three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) >= 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x))))))"
    },
    "2318": {
        "sentence": "There is a blue block as the top of tower.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_top(x))))))"
    },
    "2321": {
        "sentence": "there is one tower with exactly one object which is blue",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_color(x.all_items_in_box(), Color.BLUE))))"
    },
    "2325": {
        "sentence": "there is one tower with a yellow block in between two black blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), AND(exist(filter_obj(get_above(x), lambda x: is_black(x))), exist(filter_obj(get_below(x), lambda x: is_black(x))))))))) == 1"
    },
    "2331": {
        "sentence": "ll three towers contain 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), x.box.is_tower()))))) == 3"
    },
    "2338": {
        "sentence": "There is a box with 2 items of which 1 is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))) == 1))"
    },
    "2346": {
        "sentence": "There are 6 blue blocks",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 6"
    },
    "2349": {
        "sentence": "There is at least one yellow block on a black block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_above(x), lambda x: is_yellow(x))))))))"
    },
    "2353": {
        "sentence": "There is at least one yellow block as the base of a tower.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_bottom(x)))))) >= 1"
    },
    "2354": {
        "sentence": "There is a box with a yellow square touching the wall and a blue square on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(AND(is_yellow(x), is_bottom(x)), exist(filter_obj(get_above(x), lambda x: is_blue(x))))))))"
    },
    "2355": {
        "sentence": "There is  a tower that has four blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4))"
    },
    "2356": {
        "sentence": "There is a tower with four blocks with a black block above base block of different color",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(AND(NOT(is_black(x)), is_bottom(x)), exist(filter_obj(get_above(x), lambda x: is_black(x))))))))"
    },
    "2358": {
        "sentence": "There is a box with 1 yellow and 1 black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "2360": {
        "sentence": "There is a blue block as the base of a tower with exactly three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x))))))"
    },
    "2366": {
        "sentence": "There are at least two towers with exactly three blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3)) >= 2"
    },
    "2367": {
        "sentence": "The top of a four blocks tower is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_top(x))))))"
    },
    "2368": {
        "sentence": "There is a box with 2 yellow and 2 blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "2370": {
        "sentence": "There are two towers that has different base color but the same color in the second block.",
        "lf": "exist(filter_obj(combinations(all_boxes, 2), lambda x: not all_same_color(filter_obj(x[0].all_items_in_box() + x[1].all_items_in_box(), lambda y: is_bottom(y))) and all_same_color(filter_obj(x[0].all_items_in_box() + x[1].all_items_in_box(), lambda z: is_second(z)))))"
    },
    "2371": {
        "sentence": "There is a tower with two black blocks and the top and base are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x))))))"
    },
    "2375": {
        "sentence": "There is a black block as the top of a tower with at most three blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) <= 3 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x))))))"
    },
    "2376": {
        "sentence": "There are at least two blue blocks above a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), count(filter_obj(get_box_all_above(x), lambda y: is_blue(y))) >= 2)))"
    },
    "2381": {
        "sentence": "There is only 1 tower with at least 1 black block",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 1)) == 1"
    },
    "2386": {
        "sentence": "There are 2 towers with a blue block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_top(x)))))) == 2"
    },
    "2389": {
        "sentence": "There are 2 towers that contain at least 1 yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 1)) == 2"
    },
    "2392": {
        "sentence": "There is a black block on a blue block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), exist(filter_obj(get_above(x), lambda x: is_black(x))))))))"
    },
    "2398": {
        "sentence": "There is at least one tower with four blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 ))"
    },
    "2399": {
        "sentence": "There is a box with 4 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4))"
    },
    "2402": {
        "sentence": "There is a tower that the third block from the base is black.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_third(x), is_black(x)), x.box.is_tower())))"
    },
    "2403": {
        "sentence": "There is 1 tower with 2 blue blocks stacked together",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), exist(filter_color(get_touching(x), Color.BLUE))), x.box.is_tower())))"
    },
    "2405": {
        "sentence": "There is a tower with only three black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLACK)) == 3, x.is_tower())))"
    },
    "2410": {
        "sentence": "There is 1 tower with 3 blue blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) == 3, x.is_tower())))"
    },
    "2414": {
        "sentence": "one tower with 2 blue blocks stacked together",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), exist(filter_color(get_touching(x), Color.BLUE))), x.box.is_tower())))"
    },
    "2417": {
        "sentence": "the tower with three blocks has a blue block over a blue block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), exist(filter_color(get_above(x), Color.BLUE))), count(x.box) == 3), x.box.is_tower())))"
    },
    "2419": {
        "sentence": "There are at least 2 towers with 1 black block",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLACK)) == 1, x.is_tower()))) >= 2"
    },
    "2423": {
        "sentence": "There is a black block as the base of a tower with four blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_bottom(x)), count(x.box) == 4), x.box.is_tower())))"
    },
    "2428": {
        "sentence": "there is a tower with four blocks with the blue block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_top(x)), count(x.box) == 4), x.box.is_tower())))"
    },
    "2429": {
        "sentence": "There is a black block underneath a yellow block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLACK)))))"
    },
    "2430": {
        "sentence": "There is a box with 3 items and a blue item on top.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), count(x.box) == 3)))"
    },
    "2432": {
        "sentence": "There is a box with only blue and black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(contained({Color.BLUE, Color.BLACK}, get_set_colors(x)), count(get_set_colors(x)) == 2)))"
    },
    "2433": {
        "sentence": "There is a tower with three blocks and the two are blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x, Color.BLUE)) == 2, count(x) == 3), x.is_tower())))"
    },
    "2434": {
        "sentence": "There are 2 towers with a blue block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "2437": {
        "sentence": "There is exactly one blue block as the top of a tower with at least three blocks.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(AND(is_blue(x), is_top(x)), count(x.box) >= 3), x.box.is_tower()))) == 1"
    },
    "2438": {
        "sentence": "There is a yellow block above a blue block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLUE)))))"
    },
    "2443": {
        "sentence": "There are exactly two towers with a yellow block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "2444": {
        "sentence": "There is a black block that do have a block above it.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), not is_top(x))))"
    },
    "2446": {
        "sentence": "There is exactly one tower with a blue block at base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "2448": {
        "sentence": "There is exactly one tower with a black block at the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_bottom(x)), x.box.is_tower()))) == 1"
    },
    "2450": {
        "sentence": "there are two towers with a black block above a blue block",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), exist(filter_color(get_below(x), Color.BLUE))), x.box.is_tower()))) == 2"
    },
    "2452": {
        "sentence": "there is at least one tower with a black block over a blue black",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), exist(filter_color(get_above(x), Color.BLACK))), x.box.is_tower())))"
    },
    "2458": {
        "sentence": "there is at least one  tower with less than three black blocks having a black block at the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_black(x), is_bottom(x)), count(filter_color(x.box, Color.BLACK)) < 3), x.box.is_tower())))"
    },
    "2460": {
        "sentence": "The bases of the three towers are all the same.",
        "lf": "AND(all_same_color(filter_obj(all_items, lambda x: AND(is_bottom(x), x.box.is_tower()))), count(filter_obj(all_items, lambda x: AND(is_bottom(x), x.box.is_tower()))) == 3)"
    },
    "2463": {
        "sentence": "There are 2 towers that contain yellow blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.YELLOW)), x.is_tower()))) == 2"
    },
    "2464": {
        "sentence": "There are 4 blue squares",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 4"
    },
    "2466": {
        "sentence": "there is one tower with exactly two objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 2, x.is_tower())))"
    },
    "2467": {
        "sentence": "there is a tower with a blue block at the base.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower())))"
    },
    "2470": {
        "sentence": "there is a tower with a blue block above a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), exist(filter_color(get_below(x), Color.YELLOW))), x.box.is_tower())))"
    },
    "2472": {
        "sentence": "There is a box with only black and blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(contained({Color.BLUE, Color.BLACK}, get_set_colors(x)), count(get_set_colors(x)) == 2)))"
    },
    "2475": {
        "sentence": "There is a box with 3 items and a black item on top.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_top(x)), count(x.box) == 3)))"
    },
    "2476": {
        "sentence": "There are two towers that has tow blue blocks each.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) == 2, x.is_tower()))) == 2"
    },
    "2478": {
        "sentence": "Two towers has the same base.",
        "lf": "count(get_set_colors(filter_obj(all_items, lambda x: AND(is_bottom(x), x.box.is_tower())))) == 2"
    },
    "2479": {
        "sentence": "There is at least 1 tower with 2 blue blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) >= 2, x.is_tower())))"
    },
    "2484": {
        "sentence": "one of the tower has a different colored block above a black block",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and is_black(x) and get_above(x) and Color.BLACK not in get_set_colors(get_above(x))))"
    },
    "2485": {
        "sentence": "There is a blue block on a black block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), exist(filter_color(get_below(x), Color.BLACK)))))"
    },
    "2487": {
        "sentence": "there is at least one tower with a blue block at the top and yellow block at the base",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_top(x)))), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_bottom(x))))), x.is_tower())))"
    },
    "2488": {
        "sentence": "ll the towers has the same base.",
        "lf": "all_same_color(filter_obj(all_items, lambda x: AND(is_bottom(x), x.box.is_tower())))"
    },
    "2489": {
        "sentence": "There is a box with 4 items where yellow item is touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_bottom(x)), count(x.box) == 4)))"
    },
    "2490": {
        "sentence": "There is 1 tower with 2 yellow blocks stacked together",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), exist(filter_color(get_touching(x), Color.YELLOW))), x.box.is_tower())))"
    },
    "2492": {
        "sentence": "There is exactly one yellow block as the base of a tower with three blocks.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_bottom(x)), count(x.box) == 3), x.box.is_tower())))"
    },
    "2493": {
        "sentence": "There are two yellow blocks as the top of a tower with at least two blocks.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_top(x)), count(x.box) >= 2), x.box.is_tower()))) == 2"
    },
    "2494": {
        "sentence": "There are two towers with four blocks.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 4)) == 2"
    },
    "2498": {
        "sentence": "There are exactly 2 boxes with yellow items.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x, Color.YELLOW)))) == 2"
    },
    "2499": {
        "sentence": "there is one tower with a blue object over a black object",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), exist(filter_color(get_below(x), Color.BLACK))), x.box.is_tower()))) == 1"
    },
    "2503": {
        "sentence": "There is a box with 2 black items and one yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "2513": {
        "sentence": "one of the tower with block blocks has a yellow block below the top block",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_obj(x.all_items_in_box(), lambda y: is_top(y) and get_below(y) and is_yellow(unique(get_below(y)))))))"
    },
    "2514": {
        "sentence": "There is 1 tower with 1 blue block and 1 yellow block and 1 black block",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "2516": {
        "sentence": "there is exactly one tower which has a black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) == 1"
    },
    "2517": {
        "sentence": "there is one tower with has blocks of black color only",
        "lf": "exist(filter_obj(all_boxes, lambda x: get_set_colors(x.all_items_in_box()) == set([Color.BLACK])))"
    },
    "2518": {
        "sentence": "there is at least one tower with exactly one block which is black",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: is_black(x)))))"
    },
    "2525": {
        "sentence": "There is a box with 4 items of which 3 are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))"
    },
    "2530": {
        "sentence": "There is a box with a yellow item and 2 black items touching each other.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_above(x), lambda x: is_black(x))))))))"
    },
    "2537": {
        "sentence": "there are at least  two towers with a  black block at the base",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_bottom(x)))))) >= 2"
    },
    "2539": {
        "sentence": "ll three towers contain blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) >= 1)) == 3"
    },
    "2541": {
        "sentence": "there is a tower with four blocks having a black block above a black block",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_above(x), lambda x: is_black(x))))))))"
    },
    "2542": {
        "sentence": "There is a tower which has two black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "2544": {
        "sentence": "There are 2 yellow blocks",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 2"
    },
    "2545": {
        "sentence": "there is a tower with four blocks having blocks of all three colors",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(get_set_colors(x.all_items_in_box())) == 3))"
    },
    "2547": {
        "sentence": "There is 1 tower where the top and the bottom blocks are the same colour",
        "lf": "exist(filter_obj(all_boxes, lambda x: all_same_color(filter_obj(x.all_items_in_box(), lambda x: OR(is_top(x), is_bottom(x))))))"
    },
    "2555": {
        "sentence": "There is a blue tower with at least two blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 1 and Color.BLUE in get_set_colors(x.all_items_in_box()) and count(x.all_items_in_box()) >= 2))"
    },
    "2557": {
        "sentence": "There is a tower with only one block and the color is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower())))))"
    },
    "2559": {
        "sentence": "There is as blue block above a yellow block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), exist(filter_obj(get_above(x), lambda x: is_blue(x))))))))"
    },
    "2561": {
        "sentence": "There is a box with 4 items of which 1 is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x))) == 1))"
    },
    "2562": {
        "sentence": "one of the tower has a black block over a yellow block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), exist(filter_obj(get_below(x), lambda x: is_yellow(x)))))))) == 1"
    },
    "2565": {
        "sentence": "tower with four blocks has blocks of all the three colors",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(get_set_colors(x.all_items_in_box())) == 3))"
    },
    "2569": {
        "sentence": "There is a tower with four blocks of which two are yellow blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 2))"
    },
    "2570": {
        "sentence": "There is one tower with two blue blocks",
        "lf": "count(filter_obj(all_boxes, lambda x:  count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower()))) == 2)) == 1"
    },
    "2571": {
        "sentence": "There is a blue block on a yellow block.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), exist(filter_obj(get_above(x), lambda x: is_blue(x))))))"
    },
    "2574": {
        "sentence": "There is a blue block bellow a yellow block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), exist(filter_obj(get_below(x), lambda x: is_blue(x))))))))"
    },
    "2577": {
        "sentence": "There is a tower with only two black blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "2579": {
        "sentence": "The black item is on top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_top(x))))))"
    },
    "2583": {
        "sentence": "There is a blue tower with exactly two blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower()))) == 2))"
    },
    "2586": {
        "sentence": "There is a tower where only 2 blocks are the same colour",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))) == 2 or count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower()))) == 2 or count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), x.box.is_tower()))) == 2))"
    },
    "2588": {
        "sentence": "There is 1 tower with 2 black blocks stacked together",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(AND(is_black(x), x.box.is_tower()), exist(filter_obj(get_above(x), lambda x: is_black(x)))))))) == 1"
    },
    "2591": {
        "sentence": "There is 1 tower with at least 1 yellow and 1 black block",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), x.box.is_tower()))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))))) == 1"
    },
    "2592": {
        "sentence": "there is at least one tower with exactly one block which is of black color",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))))) == 1"
    },
    "2593": {
        "sentence": "There are 4 yellow blocks",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x))) == 4"
    },
    "2595": {
        "sentence": "There is a blue block as the top of a tower with only two blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_top(x))))))"
    },
    "2598": {
        "sentence": "There is 1 tower with 1 yellow block at the top",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x)))))) == 1"
    },
    "2600": {
        "sentence": "There is at least one tower with exactly one black block.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), x.box.is_tower()))) == 1))"
    },
    "2601": {
        "sentence": "there is one tower with exactly three blocks",
        "lf": "exist(filter_obj(all_items, lambda x: x.box.is_tower() and (count(x.box.all_items_in_box()) == 3)))"
    },
    "2602": {
        "sentence": "there is one tower with block blocks only",
        "lf": "exist(filter_obj(all_items, lambda x: All(x.box.all_items_in_box(), is_black)))"
    },
    "2605": {
        "sentence": "There are at least two black blocks as the base of a tower with at least two blocks.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_bottom(x) and count(x.box.all_items_in_box()) >= 2)) >= 2"
    },
    "2608": {
        "sentence": "There are 2 black blocks",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_square(x))) == 2"
    },
    "2616": {
        "sentence": "the tower with three objects has a black block at the top",
        "lf": "exist(filter_obj(all_boxes, lambda x: x.is_tower() and count(x.all_items_in_box()) == 3 and get_set_colors(filter_obj(x.all_items_in_box(), lambda y: is_top(y))) == {Color.BLACK}))"
    },
    "2617": {
        "sentence": "There are at least 4 black blocks",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_square(x)))) >= 4"
    },
    "2618": {
        "sentence": "There is a tower that the second block from the base is black.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_second(x), is_black(x)), x.box.is_tower())))"
    },
    "2619": {
        "sentence": "There are two towers with blue base.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_bottom(x)), x.box.is_tower()))) == 2"
    },
    "2622": {
        "sentence": "The tower with two blocks have same color blocks on top of each other",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(count(x.box.all_items_in_box()) == 2, x.box.is_tower()), query_color(x) == query_color(get_above(x)))))"
    },
    "2623": {
        "sentence": "There is a box with 4 items of which one is a blue item and 3 are yellow items.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 4, AND(count(filter_obj(x.all_items_in_box(), lambda x: is_blue(x) and is_square(x))) == 1, count(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x) and is_square(x))) == 3)))) == 1"
    },
    "2627": {
        "sentence": "There are exactly two yellow blocks as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_top(x)), is_square(x)))) == 2"
    },
    "2628": {
        "sentence": "There is a tower which has more than 2 blocks but only have two blue blocks.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND( count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), x.box.is_tower()))) == 2, count(x.all_items_in_box()) > 2)))"
    },
    "2631": {
        "sentence": "There is a box with only 2 yellow and blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))), exist(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x)))), count(x.all_items_in_box()) == 2)))"
    },
    "2635": {
        "sentence": "There is a box with only blue and yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))), exist(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x)))), not exist(filter_obj(x.all_items_in_box(), lambda x: is_black(x))))))"
    },
    "2637": {
        "sentence": "There is 1 tower that is made of only 1 block",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(x.is_tower(), count(x.all_items_in_box()) == 1)))"
    },
    "2640": {
        "sentence": "there is a tower with a blue block over a black block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), exist(filter_obj(get_below(x), lambda x: is_black(x))))))"
    },
    "2642": {
        "sentence": "There is a blue tower.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(x.is_tower(), All(x.all_items_in_box(), is_blue))))"
    },
    "2644": {
        "sentence": "the tower having more than one block has a black block at the top",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(count(x.box.all_items_in_box()) > 1, x.box.is_tower()), is_black(x)), is_top(x))))"
    },
    "2647": {
        "sentence": "One tower has only blue and black blocks",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))), exist(filter_obj(x.all_items_in_box(), lambda x: is_black(x)))), not exist(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x)))), x.is_tower())))"
    },
    "2649": {
        "sentence": "There is only one blue block as the top of a tower.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_top(x)), x.box.is_tower()))) == 1"
    },
    "2653": {
        "sentence": "The base of a tower is blue and the top is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_top(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_bottom(x)))))))"
    },
    "2654": {
        "sentence": "The bases of the towers are yellow and black only.",
        "lf": "All(filter_obj(all_items, lambda x: AND(is_bottom(x), x.box.is_tower())), lambda x: AND(OR(is_black(x), is_yellow(x)), not is_blue(x)))"
    },
    "2656": {
        "sentence": "there is a tower with a yellow block over a black block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), exist(filter_color(get_below(x), Color.BLACK))), x.box.is_tower())))"
    },
    "2662": {
        "sentence": "There is a box with 2 items of which one is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 2, exist(filter_color(x.all_items_in_box(), Color.BLUE)))))"
    },
    "2664": {
        "sentence": "One tower has 3 blocks of the same colour",
        "lf": "exist(filter_obj(all_boxes, lambda x: OR(OR(count(filter_color(x.all_items_in_box(), Color.BLUE)) == 3, count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3), count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3)))"
    },
    "2666": {
        "sentence": "there is one tower with a yellow block above a yellow block",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), x.box.is_tower()) and AND(exist(get_above(x)), exist(filter_color(get_above(x), Color.YELLOW)))))"
    }
}