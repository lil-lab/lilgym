{
    "2": {
        "sentence": "There is 1 box with 2 yellow items in it",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)) == 1"
    },
    "3": {
        "sentence": "There ia 1 box with exactly 4 items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4)) == 1"
    },
    "4": {
        "sentence": "There are seven items in a box.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 7)))"
    },
    "5": {
        "sentence": "There are exactly two yellow squares not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), not is_touching_wall(x)))) == 2"
    },
    "6": {
        "sentence": "There is a box with items of only 2 different colors and a small black triangle touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_small(x) and is_black(x) and is_triangle(x) and is_touching_wall(x))) and exist(filter_obj(all_boxes, lambda x: NOT(Any(x.all_items_in_box(), is_yellow) and Any(x.all_items_in_box(), is_blue) and Any(x.all_items_in_box(), is_black))))"
    },
    "8": {
        "sentence": "There is a box that has three blue circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) == 3))"
    },
    "9": {
        "sentence": "there is exactly one yellow object touching the bottom base",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "10": {
        "sentence": "There is a box with 2 items of which one is a triangle not touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_triangle(y) and NOT(is_touching_wall(y))))))"
    },
    "11": {
        "sentence": "There is a square and a circle closely touching a corner",
        "lf": "AND(count(filter_obj(all_items, lambda x: AND(is_square(x), is_closely_touching_corner(x)))) == 1, count(filter_obj(all_items, lambda x: AND(is_circle(x), is_closely_touching_corner(x)))) == 1)"
    },
    "13": {
        "sentence": "There is a box with multiple items and the only black is a triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: gt(count(x.all_items_in_box()), 1) and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y))) == 1 and count(filter_obj(x.all_items_in_box(), lambda z: AND(is_black(z), is_triangle(z)))) == 1))"
    },
    "14": {
        "sentence": "One of the grey box contains exactly six objects where one of the object is a yellow circle",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y)))))"
    },
    "15": {
        "sentence": "t least one grey square has exactly three objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "16": {
        "sentence": "There is a box which has four squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_shape(x.all_items_in_box(), Shape.SQUARE)), 4)))"
    },
    "18": {
        "sentence": "There is 1 black square closely touching the bottom right corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_closely_touching_corner(x, Side.BOTTOM) and is_closely_touching_corner(x, Side.RIGHT)))"
    },
    "19": {
        "sentence": "there is exactly one black square not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "23": {
        "sentence": "there is exactly one blue object touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "25": {
        "sentence": "there are exactly two blue triangles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x) and NOT(is_touching_wall(x)))) == 2"
    },
    "27": {
        "sentence": "There is a box with exactly one yellow circle and exactly one black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) == 1 and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))) == 1))"
    },
    "29": {
        "sentence": "There is 1 box with only blue items",
        "lf": "exist(filter_obj(all_boxes, lambda x: equal_set(x.all_items_in_box(), filter_color(x.all_items_in_box(), Color.BLUE))))"
    },
    "34": {
        "sentence": "There is no blue square closely touching a corner of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_closely_touching_corner(x))))"
    },
    "36": {
        "sentence": "There are two grey squares containing exactly five objects",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5)), 2)"
    },
    "39": {
        "sentence": "There are 4 yellow items in 1 box",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 4)))"
    },
    "41": {
        "sentence": "There are 6 items touching the wall.",
        "lf": "count(filter_obj(all_items, is_touching_wall)) == 6"
    },
    "42": {
        "sentence": "There is a black circle closely touching a corner of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_closely_touching_corner(x)))"
    },
    "49": {
        "sentence": "None of the yellow objects are touching the edge",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_yellow(x) and is_touching_wall(x))))"
    },
    "51": {
        "sentence": "There is a box with a black triangle, at least one blue circle and yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_triangle(y) and is_black(y))) == 1 and exist(filter_obj(x.all_items_in_box(), lambda y: is_circle(y) and is_blue(y))) and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "52": {
        "sentence": "black triangle is not touching any edge",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_triangle(x) and is_black(x) and is_touching_wall(x))))"
    },
    "54": {
        "sentence": "there is at least one black circle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "55": {
        "sentence": "There is a box with 3 items of 2 different color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and NOT(count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3 or count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3 or count(filter_color(x.all_items_in_box(), Color.BLUE)) == 3)))"
    },
    "57": {
        "sentence": "There is 1 box with 2 blue items",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "59": {
        "sentence": "There is a box that has two black triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))), 2)))"
    },
    "65": {
        "sentence": "there is exactly one blue object touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x))) == 1"
    },
    "69": {
        "sentence": "there are exactly three black objects not  touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and NOT(is_touching_wall(x)))) == 3"
    },
    "73": {
        "sentence": "There is a box with a yellow square, a black square and two yellow circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))), 2)))"
    },
    "74": {
        "sentence": "There are 2 blue circles and 1 blue triangle",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x))), 2) and exist(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x)))"
    },
    "76": {
        "sentence": "ll boxes have at least 5 items",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 5))) == 3"
    },
    "79": {
        "sentence": "There are two boxes with only one blue item and other items.",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 2) and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1)) == 2"
    },
    "83": {
        "sentence": "there is one square touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_square(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "84": {
        "sentence": "there is at least one square touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: is_square(x) and is_touching_wall(x)))"
    },
    "86": {
        "sentence": "There are 2 yellow triangles",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x))) == 2"
    },
    "87": {
        "sentence": "There is at least one blue circle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x) and is_closely_touching_wall(x, Side.RIGHT)))"
    },
    "90": {
        "sentence": "There is a triangle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_triangle(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "91": {
        "sentence": "There is a black triangle touching the right side.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_touching_wall(x, Side.RIGHT)))"
    },
    "92": {
        "sentence": "There is a box with only yellow items of which at least one is a triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == count(x.all_items_in_box()) and exist(filter_shape(x.all_items_in_box(), Shape.TRIANGLE))))"
    },
    "94": {
        "sentence": "There is 1 box with only 1 black circle",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) == 1)), 1)"
    },
    "96": {
        "sentence": "There are 2 boxes with at least 1 yellow circle",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))))), 2)"
    },
    "97": {
        "sentence": "Every box has many items",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 3))) == 3"
    },
    "98": {
        "sentence": "There are 2 yellow circles",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x))) == 2"
    },
    "99": {
        "sentence": "There are exactly three yellow squares not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x) and NOT(is_touching_wall(x)))) == 3"
    },
    "100": {
        "sentence": "There is a box with single item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "102": {
        "sentence": "there is a blue square touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_touching_wall(x)))"
    },
    "103": {
        "sentence": "There is a box which has six items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6))"
    },
    "104": {
        "sentence": "There is a box with only two items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "107": {
        "sentence": "There is a yellow circle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "110": {
        "sentence": "There are at least 2 blue triangles",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x))), 2)"
    },
    "111": {
        "sentence": "There are two black circles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 2"
    },
    "112": {
        "sentence": "There is exactly one black triangle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "113": {
        "sentence": "There is a box with a black square and two circles .",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) and count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 2))"
    },
    "114": {
        "sentence": "there is a yellow circle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and is_touching_wall(x)))"
    },
    "115": {
        "sentence": "There is exactly one circle touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_circle(x) and is_touching_wall(x))) == 1"
    },
    "117": {
        "sentence": "Each box has at least 1 blue item",
        "lf": "All(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1))"
    },
    "121": {
        "sentence": "There is a box with one item that is yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y)))))"
    },
    "124": {
        "sentence": "There is a yellow item touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_touching_corner(x)))"
    },
    "125": {
        "sentence": "There is a box with only yellow and black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda y: is_yellow(y) or is_black(y)) and count(get_set_colors(x.all_items_in_box())) == 2))"
    },
    "127": {
        "sentence": "There is a blue item closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_closely_touching_corner(x)))"
    },
    "130": {
        "sentence": "t least one grey box contains exactly five objects",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5)), 1)"
    },
    "131": {
        "sentence": "There is a box that has six item and the three items are two blue triangles and one blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6 and count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))) == 2 and count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y)))))"
    },
    "133": {
        "sentence": "There is a black circle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "135": {
        "sentence": "There is no yellow item closely touching the bottom of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_yellow(x) and is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "138": {
        "sentence": "There is a box with 4 yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 4))"
    },
    "140": {
        "sentence": "There are four items touching the side.",
        "lf": "count(filter_obj(all_items, is_touching_wall)) == 4"
    },
    "141": {
        "sentence": "yellow square is not touching the wall.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x) and is_touching_wall(x))))"
    },
    "142": {
        "sentence": "There are 2 boxes with at least 1 yellow triangle",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))), 1))) == 2"
    },
    "146": {
        "sentence": "There is a blue square closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_closely_touching_wall(x, Side.RIGHT)))"
    },
    "148": {
        "sentence": "there is one triangle touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and is_touching_wall(x))) == 1"
    },
    "149": {
        "sentence": "There are at least two circles not touching any edge",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_circle(x) and NOT(is_touching_wall(x)))), 2)"
    },
    "150": {
        "sentence": "There are at least two circles touching the edge",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_circle(x) and is_touching_wall(x))), 2)"
    },
    "151": {
        "sentence": "There is a box that has only one blue item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "152": {
        "sentence": "Black triangle is not touching any edge",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_touching_wall(x))))"
    },
    "157": {
        "sentence": "there is exactly one square touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_square(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "158": {
        "sentence": "There is a black item closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_closely_touching_corner(x)))"
    },
    "159": {
        "sentence": "There are exactly three triangles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and NOT(is_touching_wall(x)))) == 3"
    },
    "160": {
        "sentence": "There are 2 boxes with many items",
        "lf": "count(filter_obj(all_boxes, lambda x: gt(count(x.all_items_in_box()), 3))) >= 2"
    },
    "162": {
        "sentence": "There is a box with multiple items and only one item has a different color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 2) and count(get_set_colors(x.all_items_in_box())) == 2 and exist(filter_obj(get_set_colors(x.all_items_in_box()), lambda color: count(filter_color(x.all_items_in_box(), color)) == 1))))"
    },
    "163": {
        "sentence": "None of the triangles are touching any edge",
        "lf": "All(filter_shape(all_items, Shape.TRIANGLE), lambda x: NOT(is_touching_wall(x)))"
    },
    "165": {
        "sentence": "there is a grey square with exactly three objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "167": {
        "sentence": "There is a small black item touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_small(x) and is_black(x) and is_touching_wall(x)))"
    },
    "168": {
        "sentence": "There is a box which has only one item and it is not blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and NOT(is_blue(unique(x.all_items_in_box())))))"
    },
    "171": {
        "sentence": "There are 2 boxes with items of 2 different colors.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 2)) == 2"
    },
    "172": {
        "sentence": "There are two squares closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_square(x) and is_closely_touching_wall(x, Side.RIGHT))) >= 2"
    },
    "173": {
        "sentence": "There is as box with only one item and it is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and is_black(unique(x.all_items_in_box()))))"
    },
    "175": {
        "sentence": "there is a black square touching an edge",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_touching_wall(x)))"
    },
    "178": {
        "sentence": "there is exactly one black triangle not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "179": {
        "sentence": "There is a box with only blue and yellow items of which there are only yellow squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda y: is_yellow(y) or is_blue(y)) and count(get_set_colors(x.all_items_in_box())) == 2 and All(filter_shape(x.all_items_in_box(), Shape.SQUARE), is_yellow)))"
    },
    "183": {
        "sentence": "There is a box with a black circle and at least one black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))), 1)))"
    },
    "187": {
        "sentence": "There are 2 boxes with 3 black items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3)) == 2"
    },
    "188": {
        "sentence": "There is a box with two yellow squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) == 2))"
    },
    "192": {
        "sentence": "There is a box with only black and yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda y: is_black(y) or is_yellow(y)) and count(get_set_colors(x.all_items_in_box())) == 2))"
    },
    "193": {
        "sentence": "there is one black triangle touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "196": {
        "sentence": "There are 2 black squares",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_square(x))) == 2"
    },
    "197": {
        "sentence": "There is no black square closely touching right wall of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "202": {
        "sentence": "There is 1 box with exactly 1 black triangle",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))) == 1))"
    },
    "203": {
        "sentence": "There is a box with 2 items at most of which a black item is touching the corner of the box.",
        "lf": "exist(filter_obj(all_boxes, lambda x: le(count(x.all_items_in_box()), 2) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_touching_corner(y)))))"
    },
    "204": {
        "sentence": "There is a box with 1 black circle and 1 black square.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) == 1 and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) == 1)) == 1"
    },
    "206": {
        "sentence": "There is a black square closely touching a corner of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_closely_touching_corner(x)))"
    },
    "208": {
        "sentence": "there are exactly two black objects touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x, Side.BOTTOM))) == 2"
    },
    "209": {
        "sentence": "There is a box with a yellow triangle and at least one blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y)))))"
    },
    "210": {
        "sentence": "There is a box with a triangle and at least two circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) and ge(count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)), 2)))"
    },
    "212": {
        "sentence": "There is a box with a black circle and a black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y)))))"
    },
    "213": {
        "sentence": "There is 1 box with three items of the same colour",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 3) or ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 3) or ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 3))), 1)"
    },
    "214": {
        "sentence": "There is a box with exactly three items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "216": {
        "sentence": "There is a box with a blue square and a yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y:            is_blue(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y)))))"
    },
    "218": {
        "sentence": "One of the grey box contains only two objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "220": {
        "sentence": "there are exactly three black objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x))) == 3"
    },
    "222": {
        "sentence": "There is a box with exactly four items including blue circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))), 2)))"
    },
    "223": {
        "sentence": "One of the grey box has atleast two objects touching the base which are not yellow",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_touching_wall(y, Side.BOTTOM) and not(is_yellow(y)))), 2)))"
    },
    "224": {
        "sentence": "There is a box with a black item, a yellow item and at least one blue item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1)))"
    },
    "226": {
        "sentence": "there is at least one blue triangle touching the bottom base",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM))), 1)"
    },
    "227": {
        "sentence": "There is no yellow square closely touching the bottom of a box.",
        "lf": "not(exist(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x) and is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "228": {
        "sentence": "There is a box with at least 3 blue, one yellow and one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 3) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "230": {
        "sentence": "There is exactly one triangle closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and is_closely_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "231": {
        "sentence": "There is a box, which has a blue square, a yellow square and two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "233": {
        "sentence": "there is exactly one yellow triangle touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x) and is_touching_wall(x))) == 1"
    },
    "234": {
        "sentence": "There is exactly one blue circle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "235": {
        "sentence": "There is a box with multiple objects which has only one black object that is circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: gt(count(x.all_items_in_box()), 1) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1 and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) == 1))"
    },
    "237": {
        "sentence": "There is a box with a yellow circle and at least one yellow triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) == 1 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y)))))"
    },
    "239": {
        "sentence": "There are exactly three triangles touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and is_touching_wall(x))) == 3"
    },
    "242": {
        "sentence": "There are 2 squares with 1 black item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1)) == 2"
    },
    "243": {
        "sentence": "There is a box with 2 triangles of same color nearly touching each other.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_triangle(y) and exist(filter_obj(get_closely_touching(y), lambda z: is_triangle(z) and equal_color(query_color(z), query_color(y))))))))"
    },
    "244": {
        "sentence": "there is at least one grey box which contains exactly five objects",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5)), 1)"
    },
    "245": {
        "sentence": "There  are 3 black items",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 3"
    },
    "247": {
        "sentence": "There is a black square almost touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_closely_touching_corner(x)))"
    },
    "249": {
        "sentence": "One of the grey box has less than three objects one of which is a square",
        "lf": "count(filter_obj(all_boxes, lambda x: lt(count(x.all_items_in_box()), 3) and exist(filter_shape(x.all_items_in_box(), Shape.SQUARE)))) == 1"
    },
    "251": {
        "sentence": "There is exactly 1 black item",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 1"
    },
    "252": {
        "sentence": "There is a grey box with exactly four objects of which atleast one object is touching the edge",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_touching_wall(y))), 1)))"
    },
    "254": {
        "sentence": "there is a blue triangle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "255": {
        "sentence": "There are 2 boxes with 1 blue item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1)) == 2"
    },
    "256": {
        "sentence": "There is a box with items of 2 different colors and exactly 2 yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and (exist(filter_color(x.all_items_in_box(), Color.BLUE)) != exist(filter_color(x.all_items_in_box(), Color.BLACK)))))"
    },
    "257": {
        "sentence": "there is exactly one blue triangle not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "258": {
        "sentence": "there are three black circles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 3"
    },
    "259": {
        "sentence": "there is exactly one blue circle touching an edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x) and is_touching_wall(x))) == 1"
    },
    "260": {
        "sentence": "there are two blue circles touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x) and is_touching_wall(x))) == 2"
    },
    "264": {
        "sentence": "There is a circle closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_circle(x) and is_closely_touching_corner(x)))"
    },
    "268": {
        "sentence": "There is a box with 3 items of 2 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and (count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 or count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 or count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)))"
    },
    "269": {
        "sentence": "There is only 1 box with at least 1 triangle",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)), 1))) == 1"
    },
    "270": {
        "sentence": "There is 1 box with 1 black item",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "276": {
        "sentence": "There is 1 box with a yellow circle and square in it",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) == 1 and count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) >= 1)) >= 1"
    },
    "278": {
        "sentence": "there are exactly two triangles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and NOT(is_touching_wall(x)))) == 2"
    },
    "279": {
        "sentence": "there is a grey box with exactly six objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6))"
    },
    "286": {
        "sentence": "There are blue items closely touching the bottom of a box.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_closely_touching_wall(x, Side.BOTTOM))), 2)"
    },
    "288": {
        "sentence": "There is a yellow item closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "290": {
        "sentence": "There are two boxes with two black objects.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 2))), 2)"
    },
    "296": {
        "sentence": "there are atleast two black objetcs touching the edge",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x))), 2)"
    },
    "297": {
        "sentence": "There is a box with a blue square, a yellow circle and at least one black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) == 1 and count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) == 1 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))), 1)))"
    },
    "298": {
        "sentence": "Each box has at least 1 yellow item in it",
        "lf": "All(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 1))"
    },
    "299": {
        "sentence": "There is a box with only one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "300": {
        "sentence": "There is at least 1 box with 2 black items",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 2))), 1)"
    },
    "301": {
        "sentence": "There is a box with two yellow triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) == 2))"
    },
    "306": {
        "sentence": "There is a circle closely touching a corner of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_circle(x) and is_closely_touching_corner(x)))"
    },
    "307": {
        "sentence": "There is 1 triangle closely touching a corner",
        "lf": " count(filter_obj(all_items, lambda x: is_triangle(x) and is_closely_touching_corner(x))) >= 1"
    },
    "308": {
        "sentence": "There is a box with only blue and yellow items and a big yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: NOT(exist(filter_color(x.all_items_in_box(), Color.BLACK))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_big(y) and is_yellow(y) and is_square(y)))))"
    },
    "309": {
        "sentence": "There is exactly one blue square closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_closely_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "310": {
        "sentence": "There is a box which has three items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "312": {
        "sentence": "There are triangles closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_triangle(x) and is_closely_touching_wall(x, Side.RIGHT)))"
    },
    "313": {
        "sentence": "There is a box with black and yellow items and a small yellow circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_obj(x.all_items_in_box(), lambda y: is_small(y) and is_yellow(y) and is_circle(y)))))"
    },
    "314": {
        "sentence": "There is a box with two items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "315": {
        "sentence": "There is a box with a blue circle and exactly one yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "316": {
        "sentence": "There are exactly two yellow circles touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and is_touching_wall(x))) == 2"
    },
    "317": {
        "sentence": "there is exactly one black circle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "318": {
        "sentence": "there is a grey square with exactly five objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5))"
    },
    "319": {
        "sentence": "There is a box with a black square, a blue circle and more than two yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) and gt(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 2)))"
    },
    "321": {
        "sentence": "one of the grey square has exactly six objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6))"
    },
    "323": {
        "sentence": "There are 2 black ciircles",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x))) == 2"
    },
    "325": {
        "sentence": "there is a black triangle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "327": {
        "sentence": "There is 1 box with 3 items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3)) == 1"
    },
    "328": {
        "sentence": "There is a box with a yellow circle and a lot of black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) and gt(count(filter_color(x.all_items_in_box(), Color.BLACK)), 2)))"
    },
    "335": {
        "sentence": "There is a blue item closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "337": {
        "sentence": "There is a box with items of all 3 different colors and a blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y)))))"
    },
    "341": {
        "sentence": "One of the grey box has exactly two objects one of which is a blue circle",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))))) == 1"
    },
    "343": {
        "sentence": "there is a grey box with exactly one object which is a circle",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 1))"
    },
    "345": {
        "sentence": "There is a box with 4 blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 4))"
    },
    "348": {
        "sentence": "there are exactly two circles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_circle(x) and NOT(is_touching_wall(x)))) == 2"
    },
    "349": {
        "sentence": "One of the grey box has exactly two objects",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)), 1)"
    },
    "351": {
        "sentence": "There is a black item closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "353": {
        "sentence": "There is 1 box with 1 blue square and 1 black triangle",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) == 1 and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))) == 1)) == 1"
    },
    "355": {
        "sentence": "there is exactly one blue triangle touching the bottom base",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "356": {
        "sentence": "There is a box with one item that is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "358": {
        "sentence": "There is a box with only two yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "361": {
        "sentence": "There is a box with a blue triangle and two black circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))) and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) == 2))"
    },
    "363": {
        "sentence": "There is a box with a blue square and at least two black items including circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) and ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 2) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y)))))"
    },
    "369": {
        "sentence": "There is at least one blue square closely touching right wall of a box.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_closely_touching_wall(x, Side.RIGHT))), 1)"
    },
    "370": {
        "sentence": "The grey square with least number of objects has less than four objects",
        "lf": "All(filter_obj(all_boxes, lambda x: All(all_boxes, lambda y: count(x.all_items_in_box()) <=  count(y.all_items_in_box()))), lambda x: lt(count(x.all_items_in_box()), 4))"
    },
    "374": {
        "sentence": "There is a box with one object.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "375": {
        "sentence": "There is at least 1 blue item in each box",
        "lf": "All(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1))"
    },
    "378": {
        "sentence": "There is a triangle that is touching the lower corner.",
        "lf": "exist(filter_obj(all_items, lambda x: is_triangle(x) and is_touching_corner(x, Side.BOTTOM)))"
    },
    "381": {
        "sentence": "There is one item touching the left corner.",
        "lf": "count(filter_obj(all_items, lambda x: is_touching_corner(x, Side.LEFT))) == 1"
    },
    "386": {
        "sentence": "There is a box with four black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 4))"
    },
    "389": {
        "sentence": "There is at least one box with exactly four items.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4)), 1)"
    },
    "391": {
        "sentence": "There is a blue item closely touching the roof of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_closely_touching_wall(x, Side.TOP)))"
    },
    "392": {
        "sentence": "One of the grey box contains objects of which only one object is blue",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1)), 1)"
    },
    "393": {
        "sentence": "Blue square is touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x)))"
    },
    "394": {
        "sentence": "There are 3 blue squares",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x))) == 3"
    },
    "395": {
        "sentence": "There is 1 box with exactly 2 items and they are the same colour",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and all_same_color(x.all_items_in_box()))), 1)"
    },
    "397": {
        "sentence": "There is a box with a black circle and two squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) and count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) == 2))"
    },
    "407": {
        "sentence": "There is a box with at least one blue triangle and at least three yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_triangle(x)))), count(filter_color(x, Color.YELLOW)) >= 3)))"
    },
    "408": {
        "sentence": "There is a box with a yellow square and at least one yellow circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x)))), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_circle(x)))))))"
    },
    "409": {
        "sentence": "There is a box which has a blue and yellow triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: contained({Color.YELLOW, Color.BLUE}, get_set_colors(filter_shape(x, Shape.TRIANGLE)))))"
    },
    "410": {
        "sentence": "There is a box with only 1 yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.YELLOW)) == 1))"
    },
    "411": {
        "sentence": "One of the grey box contain less than three objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) < 3))"
    },
    "415": {
        "sentence": "There are three items closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_closely_touching_wall(x, Side.BOTTOM))) >= 3"
    },
    "416": {
        "sentence": "at least one grey box has exactly three objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 3))"
    },
    "417": {
        "sentence": "There is a box with four items and the two are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 4, count(filter_color(x, Color.BLACK)) == 2)))"
    },
    "419": {
        "sentence": "There is a box with at least one yellow square and at least two triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x)))), count(filter_shape(x, Shape.TRIANGLE)) >= 2)))"
    },
    "425": {
        "sentence": "There is a box with a black triangle, a yellow square and a blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x))))), exist(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))))))"
    },
    "431": {
        "sentence": "There s a box with 1 black items and 3 items of one another color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.BLACK)), OR(count(filter_color(x, Color.BLUE)) == 3, count(filter_color(x, Color.YELLOW)) == 3))))"
    },
    "433": {
        "sentence": "There is at least one box with a blue triangle and a black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))))))"
    },
    "434": {
        "sentence": "One of the grey box contains exactly one object which is a black circle",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))), count(x) == 1)))"
    },
    "435": {
        "sentence": "One of the grey box has exactly two objects where one of the object is yellow",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(contained({Color.YELLOW}, get_set_colors(x)), count(x) == 2)))"
    },
    "439": {
        "sentence": "There is a box with a blue circle, a yellow circle and exactly three squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_circle(x)))), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_circle(x))))), count(filter_shape(x, Shape.SQUARE)) == 3)))"
    },
    "442": {
        "sentence": "There are two boxes which has five items each.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 5)) == 2"
    },
    "443": {
        "sentence": "There is a black object touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), is_touching_wall(x, Side.BOTTOM))))"
    },
    "444": {
        "sentence": "There are 4 black items",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 4"
    },
    "446": {
        "sentence": "one of the grey box contains exactly two objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 2))"
    },
    "447": {
        "sentence": "There is exactly one black object touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "448": {
        "sentence": "There is no circle closely touching the bottom of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_circle(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "449": {
        "sentence": "There is at least one box that has one of the items is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x, Color.BLACK))))"
    },
    "450": {
        "sentence": "There is 1 box with 2 yellow items and 2 blue items and 1 black item",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x, Color.YELLOW)) == 2, count(filter_color(x, Color.BLUE)) == 2), count(filter_color(x, Color.BLACK)) == 1)))"
    },
    "452": {
        "sentence": "There is 1 box with at least 3 yellow items",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.YELLOW)) >= 3))"
    },
    "465": {
        "sentence": "there is a blue triangle not touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "466": {
        "sentence": "There is a box with at least three blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) >= 3))"
    },
    "467": {
        "sentence": "There is  black square touching the side of the box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_touching_wall(x, Side.ANY))))"
    },
    "469": {
        "sentence": "there are exactly three black objects not touching the any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), not is_touching_wall(x, Side.ANY)))) == 3"
    },
    "475": {
        "sentence": "There is 1 box with 3 blue items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 3)) == 1"
    },
    "476": {
        "sentence": "There is a big yellow triangle not touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_big(x), is_yellow(x)), is_triangle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "481": {
        "sentence": "There is 1 box with at least 2 yellow squares",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x)))) >= 2)) == 1"
    },
    "482": {
        "sentence": "There is 1 box with 2 yellow items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.YELLOW)) == 2)) == 1"
    },
    "483": {
        "sentence": "There is a yellow square closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_closely_touching_wall(x, side=Side.RIGHT)))) "
    },
    "487": {
        "sentence": "There is only one black item touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "488": {
        "sentence": "There is a box with exactly two blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 2))"
    },
    "495": {
        "sentence": "There is only one box with five items.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 5)) == 1"
    },
    "496": {
        "sentence": "Two boxes have the same number of items.",
        "lf": "exist(filter_obj(combinations(all_boxes, 2), lambda x: len(x) == 2 and len(x[0].all_items_in_box()) == len(x[1].all_items_in_box())))"
    },
    "499": {
        "sentence": "there are exactly two circles touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), is_touching_wall(x)))) == 2"
    },
    "500": {
        "sentence": "There is at least one black triangle closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_closely_touching_wall(x, side=Side.BOTTOM)))) >= 1"
    },
    "505": {
        "sentence": "There are two black items closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_closely_touching_wall(x, Side.RIGHT)))) == 2"
    },
    "508": {
        "sentence": "There is a black square attached to the right corner of the box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_closely_touching_corner(x, Side.RIGHT), is_black(x)), is_square(x))))"
    },
    "509": {
        "sentence": "There is a box without a blue item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: not filter_color(x.all_items_in_box(), Color.BLUE)))"
    },
    "511": {
        "sentence": "There is a box which has one black and one yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x.all_items_in_box(), Color.YELLOW)), exist(filter_color(x.all_items_in_box(), Color.BLACK))), count(x.all_items_in_box()) == 2)))"
    },
    "513": {
        "sentence": "there are exactly three yellow objects not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), not is_touching_wall(x, Side.ANY)))) == 3"
    },
    "515": {
        "sentence": "There are two yellow triangles closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_triangle(x)), is_closely_touching_wall(x, Side.BOTTOM)))) == 2"
    },
    "518": {
        "sentence": "There is a box with at least one blue circle and at least three triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))), count(filter_obj(x.all_items_in_box(), lambda x: is_triangle(x))) >=3 )))"
    },
    "520": {
        "sentence": "There is no box with exactly one yellow item and exactly two blue items.",
        "lf": "not exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1, count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2), count(x.all_items_in_box()) == 3)))"
    },
    "521": {
        "sentence": "There is a black triangle touching the side of the box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "522": {
        "sentence": "theer are exactly three yellow objects not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), not is_touching_wall(x, Side.ANY)))) == 3"
    },
    "523": {
        "sentence": "there are two grey squares with one black object touching the bottom base",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_touching_wall(x, Side.BOTTOM)))) == 1)) == 2"
    },
    "524": {
        "sentence": "There are exactly four black objects not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), not is_touching_wall(x, Side.ANY)))) == 4"
    },
    "526": {
        "sentence": "at least one of the grey box contains two triangle objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) == 2))"
    },
    "530": {
        "sentence": "There is an item closely touching the roof of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_closely_touching_wall(x, Side.TOP)))"
    },
    "532": {
        "sentence": "One of the grey box contains objects where exactly two of the objects are black",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "537": {
        "sentence": "there is exactly one yellow square touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "540": {
        "sentence": "there is exactly one yellow circle touching the egde",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "541": {
        "sentence": "There is a box with a blue circle and two triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))), count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) == 2)))"
    },
    "542": {
        "sentence": "There is one black triangle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "546": {
        "sentence": "tleast one of the square box contains odd number of objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) % 2 == 1))"
    },
    "550": {
        "sentence": "There is a circle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_circle(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "551": {
        "sentence": "There is a box that has a black and yellow circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_circle(x)))))))"
    },
    "552": {
        "sentence": "There is a box which has only one item and it is circle.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_circle(x), count(x.box.all_items_in_box()) == 1)))"
    },
    "556": {
        "sentence": "There is at least one blue item closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "558": {
        "sentence": "There is exactly 1 blue circle",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_circle(x)))) == 1"
    },
    "561": {
        "sentence": "There is no yellow triangle closely touching the bottom of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_triangle(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "563": {
        "sentence": "There is a box with items of 3 different colors and only one blue circle of medium size.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(AND(is_blue(x), is_circle(x)), is_medium(x)))), exist(filter_color(x.all_items_in_box(), Color.YELLOW))), exist(filter_color(x.all_items_in_box(), Color.BLACK)))))"
    },
    "564": {
        "sentence": "There is a box with one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "565": {
        "sentence": "There is a box with a yellow triangle and two black triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))), count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) == 2)))"
    },
    "566": {
        "sentence": "There is 1 box with exactly 1 item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1"
    },
    "568": {
        "sentence": "There is no box with a black item and two yellow items.",
        "lf": "not exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLACK))== 1, count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)))"
    },
    "569": {
        "sentence": "There are at least 2 boxes with at least 1 black item",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)))) >= 2"
    },
    "572": {
        "sentence": "There is a box with a yellow triangle and a black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))) == 1, count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) == 1)))"
    },
    "573": {
        "sentence": "t least one blue circle is touching the bottom base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "577": {
        "sentence": "There are two boxes with a black circle.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))))) == 2"
    },
    "584": {
        "sentence": "There is no black circle closely touching right wall of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "586": {
        "sentence": "There is a box with only one item that is not a blue triangle or a blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(not exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_triangle(x)))), not exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x))))), count(x.all_items_in_box()) == 1)))"
    },
    "591": {
        "sentence": "There is 1 box with 2 items",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "597": {
        "sentence": "There is a box with 3 items at most of which 2 are blue traingles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 3, count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_triangle(x)))) >= 2)))"
    },
    "599": {
        "sentence": "There are 3 yellow triangles",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_triangle(x)))) == 3"
    },
    "601": {
        "sentence": "There is a box with yellow ans blue items and the blue are triangle.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: OR(AND(is_blue(x), is_triangle(x)), is_yellow(x)))) == count(x.all_items_in_box()))) == 1"
    },
    "602": {
        "sentence": "There is 1 box with exactly 1 item in it",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1"
    },
    "604": {
        "sentence": "Two boxes has the same two black items each.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and all_same_shape(filter_color(x.all_items_in_box(), Color.BLACK)))) == 2"
    },
    "608": {
        "sentence": "one of the grey square contains only yellow color objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == count(x.all_items_in_box()))) == 1"
    },
    "611": {
        "sentence": "There is no blue circle of medium size touching the wall.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: AND(AND(AND(is_circle(x), is_blue(x)), is_medium(x)), is_touching_wall(x)))))"
    },
    "612": {
        "sentence": "None of the blue triangles are touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_touching_wall(x)))) == 0"
    },
    "613": {
        "sentence": "There is a box with a black square and two blue items.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))))) == 1"
    },
    "616": {
        "sentence": "There are exactly two blue circles touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_circle(x), is_blue(x)), is_touching_wall(x, Side.BOTTOM)))) == 2"
    },
    "618": {
        "sentence": "There is a box with only one item that is blue.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))))) >= 1"
    },
    "619": {
        "sentence": "There is a box with only one triangle.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: is_triangle(x))) == 1)) == 1"
    },
    "623": {
        "sentence": "There is grey box with two triangles touching the base",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_triangle(x), is_touching_wall(x, Side.BOTTOM)))) == 2)) == 1"
    },
    "624": {
        "sentence": "there are exactly three black circles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_circle(x), is_black(x)), NOT(is_touching_wall(x))))) == 3"
    },
    "626": {
        "sentence": "There is a box with three squares.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) == 3)) == 1"
    },
    "628": {
        "sentence": "There is a box with items of only blue and black color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 2 and contained(get_set_colors(x.all_items_in_box()), set([Color.BLUE, Color.BLACK]))))"
    },
    "632": {
        "sentence": "There is 1 yellow triangle",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_triangle(x), is_yellow(x)))) == 1"
    },
    "635": {
        "sentence": "There are two boxes with blue triangles.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_triangle(x)))))) == 2"
    },
    "636": {
        "sentence": "there is exactly one yellow object touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x)))) == 1"
    },
    "641": {
        "sentence": "there is exactly one black object touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND( is_black(x), is_touching_wall(x)))) == 1"
    },
    "642": {
        "sentence": "There is a box with 3 items of which at least one is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x)))))"
    },
    "643": {
        "sentence": "There is at least one yellow item closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "644": {
        "sentence": "there is exactly one yellow circle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_circle(x), is_yellow(x)), NOT(is_touching_wall(x))))) == 1"
    },
    "647": {
        "sentence": "there is a black triangle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_touching_wall(x))))"
    },
    "648": {
        "sentence": "There is only 1 box with at least 1 yellow item",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)))) == 1"
    },
    "649": {
        "sentence": "There is a box with two black triangles and a yellow circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) == 2 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_circle(x)))) == 1))"
    },
    "651": {
        "sentence": "There is 1 box with exactly 1 square item",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) == 1))"
    },
    "653": {
        "sentence": "There is at least one black triangle closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_closely_touching_wall(x, Side.RIGHT)))) >= 1"
    },
    "654": {
        "sentence": "There is a box with exactly three blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 3))"
    },
    "655": {
        "sentence": "There is no yellow circle closely touching right wall of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_closely_touching_wall(x, Side.RIGHT)))))"
    },
    "656": {
        "sentence": "There are 3 blue items",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 3"
    },
    "657": {
        "sentence": "There are two yellow objects touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.BOTTOM)))) == 2"
    },
    "660": {
        "sentence": "ll of the boxes has a yellow item touching the line of the box.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_touching_wall(x)))))) == 3"
    },
    "661": {
        "sentence": "There is 1 yellow circle closely touching a box corner",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_closely_touching_corner(x)))) == 1"
    },
    "662": {
        "sentence": "one of the grey box with exactly four objects has  blue and yellow color objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)))) == 1"
    },
    "663": {
        "sentence": "There is a box with items of the same color and a small circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: all_same_color(x.all_items_in_box()) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_small(x), is_circle(x))))))"
    },
    "664": {
        "sentence": "There are two boxes that has the same number of objects.",
        "lf": "count(filter_obj(all_boxes[1:], lambda x: count(x.all_items_in_box()) == count(all_boxes[0].all_items_in_box()))) == 1 or count(all_boxes[1].all_items_in_box()) == count(all_boxes[2].all_items_in_box())"
    },
    "671": {
        "sentence": "one of the grey square contains exactly six objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6)) == 1"
    },
    "672": {
        "sentence": "There is no yellow circle closely touching a wall of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_closely_touching_wall(x)))))"
    },
    "674": {
        "sentence": "There are 2 black triangles and 1 black circle",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_triangle(x)))) == 2 and count(filter_obj(all_items, lambda x: AND(is_black(x), is_circle(x)))) == 1"
    },
    "675": {
        "sentence": "There is a box which has only one item that is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "676": {
        "sentence": "There is exactly one yellow circle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), NOT(is_touching_wall(x))))) == 1"
    },
    "679": {
        "sentence": "There is 1 blue triangle and 1 yellow triangle",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_triangle(x)))) == 1 and count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_triangle(x)))) == 1"
    },
    "683": {
        "sentence": "There is a box with two black items and a yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_square(x))))))"
    },
    "686": {
        "sentence": "There is a box with a blue triangle and two blue circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_triangle(x)))) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))) == 2))"
    },
    "687": {
        "sentence": "There are 2 boxes that have at least 1 blue item",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLUE))))"
    },
    "689": {
        "sentence": "None of the yellow squares are touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x)))) == 0"
    },
    "691": {
        "sentence": "There is a box with a blue triangle and at least two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2  and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_triangle(x)))) == 1))"
    },
    "696": {
        "sentence": "There is a box with two triangles of the same size not touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: Any(combinations(filter_obj(x.all_items_in_box(), lambda y: AND(is_triangle(y), NOT(is_touching_wall(y)))), 2), all_same_size)))"
    },
    "699": {
        "sentence": "There is a box which has only two items and they are blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 and count(x.all_items_in_box()) == 2))"
    },
    "700": {
        "sentence": "There is box with items of different colors and two black items at most.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and NOT(all_same_color(x.all_items_in_box()))))"
    },
    "701": {
        "sentence": "There is no box with only black items.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: equal_set(x.all_items_in_box(), filter_color(x.all_items_in_box(), Color.BLACK)))))"
    },
    "702": {
        "sentence": "One box has 3 blue items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 3)) == 1"
    },
    "704": {
        "sentence": "There is no black triangle closely touching the bottom of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "705": {
        "sentence": "There is 1 box with at least 1 yellow circle and 1 yellow triangle",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))), 1) and count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) == 1)), 1)"
    },
    "707": {
        "sentence": "There is 1 box with only yellow and blue items",
        "lf": "count(filter_obj(all_boxes, lambda x: NOT(exist(filter_color(x.all_items_in_box(), Color.BLACK))) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)))) == 1"
    },
    "710": {
        "sentence": "There are exactly 3 yellow items not touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and NOT(is_touching_wall(x)))) == 3"
    },
    "712": {
        "sentence": "There are exactly three yellow objects touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_touching_wall(x))) == 3"
    },
    "713": {
        "sentence": "There is a box with only one blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) == 1))"
    },
    "714": {
        "sentence": "There is a box with at least one black triangle, at least one blue triangle and a yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))), 1) and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))), 1) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y)))))"
    },
    "716": {
        "sentence": "There is no yellow circle closely touching the bottom of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "719": {
        "sentence": "There are two the same color triangles that are touching the corners.",
        "lf": "exist(filter_obj(all_items, lambda x: is_triangle(x) and is_touching_corner(x) and count(filter_obj(all_items, lambda y: is_triangle(y) and is_touching_corner(y) and equal_color(query_color(x), query_color(y)))) == 2))"
    },
    "720": {
        "sentence": "There are exactly two yellow objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_touching_wall(x))) == 2"
    },
    "721": {
        "sentence": "There is exactly one square closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_square(x) and is_closely_touching_wall(x, Side.RIGHT))) == 1"
    },
    "722": {
        "sentence": "There is a black triangle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "724": {
        "sentence": "There is a blue square and blue triangle in a box.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y)))))"
    },
    "726": {
        "sentence": "There is  box with a small yellow square and it is not touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_small(y) and is_yellow(y) and is_square(y) and NOT(is_touching_wall(y))))))"
    },
    "727": {
        "sentence": "One of the grey box has exactly three objects one of which is blue square",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))))) == 1"
    },
    "728": {
        "sentence": "one of the grey box has two black triangles",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))) == 2)) == 1"
    },
    "729": {
        "sentence": "There is a box with only one item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "730": {
        "sentence": "One of the grey square has exactly two objects which are yellow",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and All(x.all_items_in_box(), is_yellow))) == 1"
    },
    "733": {
        "sentence": "There are 2 black circles and 1 black triangle",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x))) == 2 and count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x))) == 1"
    },
    "735": {
        "sentence": "There is a box with a yellow circle and a blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y)))))"
    },
    "737": {
        "sentence": "There are exactly three objects touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_touching_wall(x, Side.BOTTOM))) == 3"
    },
    "738": {
        "sentence": "there are exactly two yellow triangles not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x) and NOT(is_touching_wall(x)))) == 2"
    },
    "739": {
        "sentence": "one of the grey square has exactly five objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5))"
    },
    "743": {
        "sentence": "There is a box with six items and the two are black circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6 and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y)))))"
    },
    "744": {
        "sentence": "There is atleast one blue circle touching the edge",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x) and is_touching_wall(x))), 1)"
    },
    "748": {
        "sentence": "there is exactly one blue square touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "753": {
        "sentence": "One of the grey box has exactly four objects one of which is a black triangle",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))))) == 1"
    },
    "759": {
        "sentence": "One of the grey box contains exactly four objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4)) == 1"
    },
    "761": {
        "sentence": "there are exactly two black objects touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x))) == 2"
    },
    "762": {
        "sentence": "There is a box with a blue circle, a black circle and a black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y)))))"
    },
    "765": {
        "sentence": "There is a blue triangle touching the side.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x) and is_touching_wall(x))) == 1"
    },
    "766": {
        "sentence": "there is a black  triangle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "767": {
        "sentence": "There is a square closely touching the roof of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_square(x) and is_closely_touching_wall(x, Side.TOP)))"
    },
    "769": {
        "sentence": "There is at least one item closely touching bottom-right corner of a box.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_closely_touching_corner(x, Side.BOTTOM) and is_closely_touching_corner(x, Side.RIGHT))), 1)"
    },
    "771": {
        "sentence": "There are 2 boxes with at least 1 black square",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))), 1))), 2)"
    },
    "773": {
        "sentence": "There is a box with two blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "774": {
        "sentence": "There is a yellow circle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and is_closely_touching_wall(x, Side.RIGHT)))"
    },
    "775": {
        "sentence": "There is one box with exactly 3 items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3)) == 1"
    },
    "776": {
        "sentence": "There is 1 box with only 1 item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1"
    },
    "780": {
        "sentence": "there is a grey box which contains objects of blue and black color only",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and NOT(exist(filter_color(x.all_items_in_box(), Color.YELLOW)))))"
    },
    "781": {
        "sentence": "There is a box with a blue item and at least two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLUE)) and ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 2)))"
    },
    "785": {
        "sentence": "there are exactly two black objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x))) == 2"
    },
    "791": {
        "sentence": "There is a grey box where none of the black objects are touching the edge",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), is_black)) and NOT(exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_touching_wall(y))))))"
    },
    "794": {
        "sentence": "there is exactly one yellow triangle touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "795": {
        "sentence": "there is one yellow circle not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "801": {
        "sentence": "There is an item closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "804": {
        "sentence": "None of the black squares are touching the edge",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_touching_wall(x))))"
    },
    "807": {
        "sentence": "There is a box with a black square and two blue squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) and count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) == 2))"
    },
    "808": {
        "sentence": "There is a box with a black square and a triangle touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_triangle(y) and is_touching_wall(y))) and count(x.all_items_in_box()) == 2))"
    },
    "810": {
        "sentence": "there are two circles touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_circle(x) and is_touching_wall(x))) == 2"
    },
    "813": {
        "sentence": "There is only 1 box with 2 blue items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)) == 1"
    },
    "816": {
        "sentence": "One of the grey square contains only one object which is a yellow circle",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and is_yellow(unique(x.all_items_in_box())) and is_circle(unique(x.all_items_in_box())))) == 1"
    },
    "819": {
        "sentence": "There are two yellow items closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_closely_touching_wall(x, Side.RIGHT))) == 2"
    },
    "823": {
        "sentence": "There are exactly two grey boxes containing exactly five objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5)) == 2"
    },
    "824": {
        "sentence": "There is exactly one blue item closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_closely_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "835": {
        "sentence": "There is atleast one grey box with exactly three objects",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3)), 1)"
    },
    "840": {
        "sentence": "There is atleast one blue object touching the base",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x, Side.BOTTOM))), 1)"
    },
    "841": {
        "sentence": "There is a box with exactly two blue triangles and a black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))) == 2 and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) == 1))"
    },
    "842": {
        "sentence": "There is 1 box with 4 black items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 4)) == 1"
    },
    "843": {
        "sentence": "There is a box with two blue items and exactly one yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 2) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "844": {
        "sentence": "There are exactly two blue objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x))) == 2"
    },
    "847": {
        "sentence": "There is a black square above the black triangle.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and exist(filter_obj(get_below(x), lambda y: is_black(y) and is_triangle(y)))))"
    },
    "849": {
        "sentence": "There is a box with three yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3))"
    },
    "850": {
        "sentence": "There is at least one yellow square touching the base",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x) and is_touching_wall(x, Side.BOTTOM))), 1)"
    },
    "852": {
        "sentence": "there is a box with 2 items of which 1 is a blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y)))))"
    },
    "853": {
        "sentence": "There is a box with a blue triangle, a black triangle and at least one yellow circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))) == 1 and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))) == 1 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))), 1)))"
    },
    "856": {
        "sentence": "There is a box with a blue circle, a black circle and a yellow triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y)))))"
    },
    "859": {
        "sentence": "There are two boxes which has the same number of objects and three kinds of colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and count(filter_obj(all_boxes, lambda y: count(x.all_items_in_box()) == count(y.all_items_in_box()) and exist(filter_color(y.all_items_in_box(), Color.BLACK)) and exist(filter_color(y.all_items_in_box(), Color.BLUE)) and exist(filter_color(y.all_items_in_box(), Color.YELLOW)))) == 2))"
    },
    "861": {
        "sentence": "There is 1 yellow square",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x))) == 1"
    },
    "864": {
        "sentence": "There is a box with exactly 3 yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3))"
    },
    "866": {
        "sentence": "There is a box with 2 yellow items at most and no other color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == count(filter_color(x.all_items_in_box(), Color.YELLOW)) <= 2))"
    },
    "867": {
        "sentence": "There is a  grey box with exactly three objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "870": {
        "sentence": "There is a box with a triangle and at least one black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))), 1)))"
    },
    "875": {
        "sentence": "there is exactly one black circle touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_touching_wall(x))) == 1"
    },
    "876": {
        "sentence": "The small yellow square is not touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: is_small(x) and is_yellow(x) and is_square(x))) == 1 and NOT(is_touching_wall(unique(filter_obj(all_items, lambda x: is_small(x) and is_yellow(x) and is_square(x)))))"
    },
    "877": {
        "sentence": "There is a box with a yellow square and a blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y)))))"
    },
    "879": {
        "sentence": "There is a box with a yellow triangle and a blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y)))))"
    },
    "880": {
        "sentence": "There is a box with a blue square and a black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y)))))"
    },
    "884": {
        "sentence": "There is a box with 5 items of 2 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5 and exist(filter_obj(x.all_items_in_box(), lambda y: exist(filter_obj(x.all_items_in_box(), lambda z: NOT(equal_color(query_color(y), query_color(z))))))) and NOT(exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)))))"
    },
    "886": {
        "sentence": "There is a box that has 6 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6))"
    },
    "887": {
        "sentence": "there are two black objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x))) == 2"
    },
    "888": {
        "sentence": "There is 1 blue item that is a triangle",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 1 and exist(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x)))"
    },
    "889": {
        "sentence": "There is a black circle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "891": {
        "sentence": "ll of the boxes have many items",
        "lf": "All(all_boxes, lambda x: gt(count(x.all_items_in_box()), 2))"
    },
    "892": {
        "sentence": "t least one grey box contains exactly four objects",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4)), 1)"
    },
    "893": {
        "sentence": "there is exactly one yellow object not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "895": {
        "sentence": "ll boxes have exacrly 2 black items",
        "lf": "All(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)"
    },
    "897": {
        "sentence": "There is a box with exactly 3 blue items and at least 2 yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 3 and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 2)))"
    },
    "899": {
        "sentence": "There are 2 black triangles in the same box.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_triangle(y) and is_black(y))) == 2))"
    },
    "900": {
        "sentence": "There is one box with at least 1 b;ue square and 1 blue triangle",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))), 1) and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))), 1))) == 1"
    },
    "902": {
        "sentence": "There are exactly 2 blue items",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x))) == 2"
    },
    "903": {
        "sentence": "There are 2 boxes with at least 1 black item",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)))) >= 2"
    },
    "907": {
        "sentence": "Exactly 3 triangles are not touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_triangle(x), not is_touching_wall(x, Side.ANY)))) == 3"
    },
    "908": {
        "sentence": "There are exactly two black objects not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), not is_touching_wall(x, Side.ANY)))) == 2"
    },
    "909": {
        "sentence": "there is one black square touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "910": {
        "sentence": "There are two black items touching the side.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "914": {
        "sentence": "There is 1  black triangle closely touching a corner",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_closely_touching_corner(x)))) == 1"
    },
    "918": {
        "sentence": "There is a box with 3 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "920": {
        "sentence": "There is no blue triangle closely touching the bottom of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "921": {
        "sentence": "There is exactly one blue triangle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), not is_touching_wall(x, Side.ANY)))) == 1"
    },
    "922": {
        "sentence": "There is a box with only black items and a triangle touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: equal(x.all_items_in_box(), filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_obj(x.all_items_in_box(), lambda y: AND(is_triangle(y), is_touching_wall(y, Side.ANY))))))"
    },
    "923": {
        "sentence": "There is a box with items of only black and blue color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLACK)), exist(filter_color(x.all_items_in_box(), Color.BLUE))), not exist(filter_color(x.all_items_in_box(), Color.YELLOW)))))"
    },
    "926": {
        "sentence": "There is a box with four triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) == 4))"
    },
    "927": {
        "sentence": "There is a box with three blue items including circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLUE)) == 3, exist(filter_shape(filter_color(x.all_items_in_box(), Color.BLUE), Shape.CIRCLE)))))"
    },
    "928": {
        "sentence": "There is a box with 2 blue and 1 yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2, count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)))"
    },
    "929": {
        "sentence": "There is a box with a black circle and 2 black triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) == 2, count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))) >= 1)))"
    },
    "931": {
        "sentence": "The black square is not touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "934": {
        "sentence": "There is a box with 3 small items of all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_obj(x.all_items_in_box(), lambda x: AND(is_small(x), is_blue(x)))) == 1, count(filter_obj(x.all_items_in_box(), lambda x: AND(is_small(x), is_black(x)))) == 1), count(filter_obj(x.all_items_in_box(), lambda x: AND(is_small(x), is_yellow(x)))) == 1)))"
    },
    "935": {
        "sentence": "There is a yellow circle touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "936": {
        "sentence": "black circle is not touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "938": {
        "sentence": "The is no circle closely touching bottom-right corner of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_circle(x), is_closely_touching_corner(x, Side.RIGHT) and is_closely_touching_corner(x, Side.BOTTOM))))"
    },
    "940": {
        "sentence": "There is at least 1 black square in each box",
        "lf": "All(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))))"
    },
    "943": {
        "sentence": "There is a square closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_square(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "947": {
        "sentence": "There is a box with black squares and yellow triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) + count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))) == count(x.all_items_in_box()), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x))))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))))))"
    },
    "950": {
        "sentence": "There is a box with a yellow triangle and a blue item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_triangle(x), is_yellow(x)))), exist(filter_color(x.all_items_in_box(), Color.BLUE)))))"
    },
    "957": {
        "sentence": "There is a box with four items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4))"
    },
    "966": {
        "sentence": "There is a black item closely touching a corner of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), is_closely_touching_corner(x, Side.ANY))))"
    },
    "969": {
        "sentence": "There are 4 blue items",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 4"
    },
    "970": {
        "sentence": "There is a box that has three items are touching the side.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: is_touching_wall(x, Side.ANY))) == 3))"
    },
    "973": {
        "sentence": "there is a black circle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "976": {
        "sentence": "There is a box with two circles and a yellow triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))), count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 2)))"
    },
    "980": {
        "sentence": "There is exactly one yellow object touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "981": {
        "sentence": "None of the yellow triangles are touching the edge",
        "lf": "All(filter_obj(all_items, lambda x: AND(is_yellow(x), is_triangle(x))), lambda x: not is_touching_wall(x, Side.ANY))"
    },
    "983": {
        "sentence": "There is a box with 3 items of only blue and yellow color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLUE)), exist(filter_color(x.all_items_in_box(), Color.YELLOW))), not exist(filter_color(x.all_items_in_box(), Color.BLACK))), count(x.all_items_in_box()) == 3)))"
    },
    "987": {
        "sentence": "There is a box with at least one black circle, at least one blue circle and a two squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x))))), count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) == 2)))"
    },
    "989": {
        "sentence": "one of the grey box contains three black objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))"
    },
    "992": {
        "sentence": "There are two boxes with items of all three colors.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLUE)), exist(filter_color(x.all_items_in_box(), Color.BLACK))), exist(filter_color(x.all_items_in_box(), Color.YELLOW))))) == 2"
    },
    "993": {
        "sentence": "There is a box with al least 4 items of all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLUE)), exist(filter_color(x.all_items_in_box(), Color.BLACK))), exist(filter_color(x.all_items_in_box(), Color.YELLOW))), count(x.all_items_in_box()) >= 4)))"
    },
    "994": {
        "sentence": "There is a box with a yellow triangle, a yellow circle and two black circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_circle(x))))), count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))) == 2)))"
    },
    "997": {
        "sentence": "There is a box with at least one yellow square and at least one black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_square(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))))))"
    },
    "998": {
        "sentence": "there is exactly one black circle touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "999": {
        "sentence": "There is a triangle touching the edge of the square.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_triangle(x), is_touching_wall(x, Side.ANY))))"
    },
    "1004": {
        "sentence": "There is a box that has only three black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))"
    },
    "1006": {
        "sentence": "There is a box with a black square and at least one blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_triangle(x))))))"
    },
    "1012": {
        "sentence": "There is 1 box with at least 1 black triangle",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) >= 1)) >= 1"
    },
    "1014": {
        "sentence": "There are exactly two triangles touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_triangle(x), is_touching_wall(x)))) == 2"
    },
    "1018": {
        "sentence": "There is a box with items of only blue and yellow color.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 2 and Color.BLUE in get_set_colors(x.all_items_in_box()) and Color.YELLOW in get_set_colors(x.all_items_in_box()))) == 1"
    },
    "1019": {
        "sentence": "one of the grey square contains exactly one object touching the bottom base",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: is_touching_wall(x, Side.BOTTOM))) == 1))"
    },
    "1020": {
        "sentence": "There is exactly one blue square touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), is_touching_wall(x)))) == 1"
    },
    "1021": {
        "sentence": "one of the grey square has exactly one object which is black",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_color(x.all_items_in_box(), Color.BLACK)))) == 1"
    },
    "1023": {
        "sentence": "One of the grey box has only one object",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1"
    },
    "1024": {
        "sentence": "There is 1 box with 5 yellow items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 5)) == 1"
    },
    "1027": {
        "sentence": "One of the grey box has objects of only one color",
        "lf": "count(filter_obj(all_boxes, lambda x: all_same_color(x.all_items_in_box()))) == 1"
    },
    "1032": {
        "sentence": "There is a box with a small yellow square touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x))))"
    },
    "1035": {
        "sentence": "There is 1 box with exactly 2 items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)) == 1"
    },
    "1036": {
        "sentence": "There is as box which has only three items and the two items are yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "1041": {
        "sentence": "there is exactly one black circle touching the bottom base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "1042": {
        "sentence": "there are exactly two blue squares not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), NOT(is_touching_wall(x))))) == 2"
    },
    "1043": {
        "sentence": "There is a box that has one black and yellow squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) == 1 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_square(x))))))"
    },
    "1044": {
        "sentence": "There is a box with seven items and the three are circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 7 and count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 3))"
    },
    "1046": {
        "sentence": "There are exactly three squares touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_square(x), is_touching_wall(x)))) == 3"
    },
    "1048": {
        "sentence": "There is no circle closely touching right wall of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: AND(is_circle(x), is_closely_touching_wall(x, Side.RIGHT)))))"
    },
    "1049": {
        "sentence": "There is at least 1 box with 2 blue squares",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))) >= 2)) >= 1"
    },
    "1050": {
        "sentence": "There are more than two black objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND( is_black(x), is_touching_wall(x)))) > 2"
    },
    "1052": {
        "sentence": "There are 5 yellow items",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 5"
    },
    "1053": {
        "sentence": "There is at least one box with a yellow triangle and at least one blue item.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))) and count(filter_color(x.all_items_in_box(), Color.BLUE)) >= 1)) >= 1"
    },
    "1054": {
        "sentence": "There is a box with five items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5)) "
    },
    "1055": {
        "sentence": "There is a box with only one small item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_size(x.all_items_in_box(), Size.SMALL))))"
    },
    "1058": {
        "sentence": "there is a grey square with exacty one object which is yellow",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "1066": {
        "sentence": "There is one box with 1 blue item",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "1067": {
        "sentence": "There is 1 box with only 2 black triangles",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) == 2)) == 1"
    },
    "1070": {
        "sentence": "there are exactly two yellow objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x)))) == 2"
    },
    "1074": {
        "sentence": "There is a blue square touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), is_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "1075": {
        "sentence": "There is at least one black circle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_circle(x), is_black(x)), is_touching_wall(x))))"
    },
    "1086": {
        "sentence": "There is a blue circle touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_corner(x))))"
    },
    "1087": {
        "sentence": "There is 1 box with only blue and yellow items",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x)) == 2 and Color.BLUE in get_set_colors(x) and Color.YELLOW in get_set_colors(x)))"
    },
    "1092": {
        "sentence": "there is at least one grey box containing exactly seven objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 7))"
    },
    "1094": {
        "sentence": "there are exactly three objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x:  is_touching_wall(x))) == 3"
    },
    "1095": {
        "sentence": "there are at least two blue circles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), NOT(is_touching_wall(x))))) >= 2"
    },
    "1099": {
        "sentence": "There is a small black circle not touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_circle(x), is_black(x)), NOT(is_touching_wall(x))) and is_small(x)))"
    },
    "1100": {
        "sentence": "There are 2 yellow items and they are the same type of item",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 2 and all_same_shape(filter_color(all_items, Color.YELLOW))"
    },
    "1104": {
        "sentence": "all yellow circles are touhing the edge",
        "lf": "All(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x)), is_touching_wall)"
    },
    "1108": {
        "sentence": "There are two triangles touching the side.",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and (is_touching_wall(x, Side.LEFT) or is_touching_wall(x, Side.RIGHT)))) == 2"
    },
    "1110": {
        "sentence": "There is at least 1 box with exactly 1 item",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)), 1)"
    },
    "1111": {
        "sentence": "there is a yellow triangle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x) and is_touching_wall(x)))"
    },
    "1115": {
        "sentence": "There is a black square closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "1116": {
        "sentence": "There are two boxes that has two different shapes yellow items .",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and exist(filter_obj(x.all_items_in_box(), lambda z: is_yellow(z) and NOT(equal_shape(query_shape(y), query_shape(z))))))))) == 2"
    },
    "1117": {
        "sentence": "There is at least one circle closely touching the bottom of a box.",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_circle(x) and is_closely_touching_wall(x, Side.BOTTOM))), 1)"
    },
    "1118": {
        "sentence": "There is 1 box with only 1 item in it",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1"
    },
    "1119": {
        "sentence": "There is a box with 4 items of which 3 are circles and 1 is a triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 3 and count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) == 1))"
    },
    "1121": {
        "sentence": "There is 1 box with 3 black items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3)) == 1"
    },
    "1122": {
        "sentence": "There are 2 boxes with items of only 2 different colors.",
        "lf": "count(filter_obj(all_boxes, lambda x: NOT(all_same_color(x.all_items_in_box())) and NOT(exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))) == 2"
    },
    "1124": {
        "sentence": "there is exactly one blue object touching an edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x))) == 1"
    },
    "1126": {
        "sentence": "there is exactly one  square touching the bottom base",
        "lf": "count(filter_obj(all_items, lambda x: is_square(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "1128": {
        "sentence": "There is a box with a blue square and a blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y)))))"
    },
    "1131": {
        "sentence": "There is a box with 2 items at most of which one is a triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: le(count(x.all_items_in_box()), 2) and exist(filter_shape(x.all_items_in_box(), Shape.TRIANGLE))))"
    },
    "1132": {
        "sentence": "There is a box with three items and the three items has different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.BLACK))))"
    },
    "1133": {
        "sentence": "There is a blue triangle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "1134": {
        "sentence": "There is a yellow item closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_closely_touching_corner(x)))"
    },
    "1138": {
        "sentence": "There are at least 3 black triangles",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x))), 3)"
    },
    "1141": {
        "sentence": "There is a circle that is touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: is_circle(x) and is_touching_corner(x)))"
    },
    "1145": {
        "sentence": "There is no triangle closely touching the bottom of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_triangle(x) and is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1146": {
        "sentence": "There is a box with a yellow square and two black squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) == 2))"
    },
    "1149": {
        "sentence": "There is a box with a yellow square and a yellow circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y)))))"
    },
    "1150": {
        "sentence": "one of the grey box has three objects touching the edge",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), is_touching_wall)) == 3)) == 1"
    },
    "1152": {
        "sentence": "One of the grey box has exactly five objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5)) == 1"
    },
    "1153": {
        "sentence": "there is a yellow triangle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "1155": {
        "sentence": "There is a triangle closely touching a corner of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_triangle(x) and is_closely_touching_corner(x)))"
    },
    "1156": {
        "sentence": "There is a box with two yellow items and at least three blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 3)))"
    },
    "1158": {
        "sentence": "Each grey box contains even count of objects",
        "lf": "All(all_boxes, lambda x: count(x.all_items_in_box()) % 2 == 0)"
    },
    "1160": {
        "sentence": "one of the grey square contains exactly five objects",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5)), 1)"
    },
    "1163": {
        "sentence": "There are exactly two black circles touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_touching_wall(x))) == 2"
    },
    "1166": {
        "sentence": "One of the grey box contains four black objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 4)) == 1"
    },
    "1169": {
        "sentence": "there is a black object touching the edge which is not a square",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x) and NOT(is_square(x))))"
    },
    "1170": {
        "sentence": "There are two boxes with one item each.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 2"
    },
    "1171": {
        "sentence": "There is 1 box with 2 black items of the same shape",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and count(filter_obj(x.all_items_in_box(), lambda z: is_black(z) and equal_shape(query_shape(y), query_shape(z)))) == 2)))), 1)"
    },
    "1172": {
        "sentence": "There is a small black square touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_small(x) and is_black(x) and is_square(x) and is_touching_wall(x)))"
    },
    "1173": {
        "sentence": "There is a box with exactly two items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "1176": {
        "sentence": "There is a box with a yellow triangle touching the wall with its top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y) and is_touching_wall(y, Side.TOP)))))"
    },
    "1177": {
        "sentence": "There are two boxes with exactly two items.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)) == 2"
    },
    "1178": {
        "sentence": "There is a box with 2 circles and only one item of different shape.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 2 and count(filter_obj(x.all_items_in_box(), lambda y: NOT(is_circle(y)))) == 1))"
    },
    "1181": {
        "sentence": "There is no blue circle closely touching right wall of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x) and is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1183": {
        "sentence": "there is one black triangle touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_touching_wall(x))) == 1"
    },
    "1184": {
        "sentence": "There is 1 box with only black items",
        "lf": "count(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), is_black))) == 1"
    },
    "1185": {
        "sentence": "There is a box with two blue items and at least two yellow circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))), 2)))"
    },
    "1190": {
        "sentence": "There is a box with exactly three yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3))"
    },
    "1192": {
        "sentence": "There is a box with a yellow circle and at least one blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) >= 1 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))), 1)))"
    },
    "1193": {
        "sentence": "There is a box with a blue circle, a blue triangle and a yellow triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y)))))"
    },
    "1196": {
        "sentence": "There is at least 1 box with exactly 2 blue items",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)), 1)"
    },
    "1199": {
        "sentence": "There is a yellow circle closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and is_closely_touching_corner(x)))"
    },
    "1204": {
        "sentence": "There is a box which only has circle and square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_shape(x.all_items_in_box(), Shape.CIRCLE)), exist(filter_shape(x.all_items_in_box(), Shape.SQUARE))), not exist(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)))))"
    },
    "1207": {
        "sentence": "There is a box with two items and one of the items is triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)), count(x.all_items_in_box()) == 2)))"
    },
    "1209": {
        "sentence": "There is a blue circle closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_circle(x), is_blue(x)), is_closely_touching_corner(x, Side.ANY))))"
    },
    "1210": {
        "sentence": "There is 1 box with only blue and black items",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLACK)), exist(filter_color(x.all_items_in_box(), Color.BLUE))), not exist(filter_color(x.all_items_in_box(), Color.YELLOW))))) == 1"
    },
    "1211": {
        "sentence": "There are 2 black triangles",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_triangle(x)))) == 2"
    },
    "1213": {
        "sentence": "there is a blue circle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "1214": {
        "sentence": "There is a box that has only one item that is not blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: not is_blue(x)))==1))"
    },
    "1216": {
        "sentence": "Two small yellow items are touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_small(x), is_yellow(x)), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1218": {
        "sentence": "There is a box that has only five items and color of the items is blue and black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(exist(filter_color(x.all_items_in_box(), Color.BLUE)), exist(filter_color(x.all_items_in_box(), Color.BLACK))), not exist(filter_color(x.all_items_in_box(), Color.YELLOW))), count(x.all_items_in_box()) == 5)))"
    },
    "1219": {
        "sentence": "There is a blue circle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1221": {
        "sentence": "There is a box with a black square, a yellow square and at least one blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_square(x))))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))))))"
    },
    "1222": {
        "sentence": "there is a blue square not touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "1223": {
        "sentence": "There is a box with exactly two yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "1225": {
        "sentence": "There is a box with 3 items of all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(AND(exist(filter_color(x.all_items_in_box(), Color.YELLOW)), exist(filter_color(x.all_items_in_box(), Color.BLUE))), exist(filter_color(x.all_items_in_box(), Color.BLACK))), count(x.all_items_in_box()) == 3)))"
    },
    "1226": {
        "sentence": "There is no blue triangle closely touching right wall of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1227": {
        "sentence": "one of the grey box contains less than three objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) < 3))"
    },
    "1229": {
        "sentence": "there is a yellow triangle not touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_triangle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "1230": {
        "sentence": "There is a box with one item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "1234": {
        "sentence": "There is 1 box with 1 blue circle and 1 blue square",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x))))))) == 1"
    },
    "1236": {
        "sentence": "The blue item is not touching the wall.",
        "lf": "not exist(filter_obj(filter_color(all_items, Color.BLUE), lambda x: is_touching_wall(x)))"
    },
    "1237": {
        "sentence": "There are at least 2 black squares",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_square(x)))) >= 2"
    },
    "1238": {
        "sentence": "one of the grey square contains exactly one object which is yellow",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x.all_items_in_box(), Color.YELLOW)), count(x.all_items_in_box()) == 1)))"
    },
    "1241": {
        "sentence": "There is a box with four items and the three items are the same.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 4, OR(OR(count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) == 3, count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) == 3), count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 3))))"
    },
    "1243": {
        "sentence": "there is at least one blue triangle not touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), not is_touching_wall(x, Side.BOTTOM))))"
    },
    "1245": {
        "sentence": "There is a black triangle that is almost touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_closely_touching_wall(x, Side.ANY))))"
    },
    "1246": {
        "sentence": "There is at least one blue square touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1247": {
        "sentence": "at least one of the grey square contains exactly one object",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "1248": {
        "sentence": "One of the grey box has exactly four objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4))"
    },
    "1249": {
        "sentence": "there is exactly one yellow triangle not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_triangle(x)), not is_touching_wall(x, Side.ANY)))) == 1"
    },
    "1250": {
        "sentence": "There is one blue triangle touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "1251": {
        "sentence": "There is a box with 4 items at most of which 2 are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 4, count(filter_color(x.all_items_in_box(), Color.BLACK)) <= 2)))"
    },
    "1252": {
        "sentence": "One of the grey square has two circles",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 2))"
    },
    "1253": {
        "sentence": "There is at least 1 box with at least 2 circles of the same colour",
        "lf": "exist(filter_obj(all_boxes, lambda x: OR(OR(count(filter_color(filter_shape(x.all_items_in_box(), Shape.CIRCLE), Color.YELLOW)) >= 2, count(filter_color(filter_shape(x.all_items_in_box(), Shape.CIRCLE), Color.BLACK)) >= 2), count(filter_color(filter_shape(x.all_items_in_box(), Shape.CIRCLE), Color.BLUE)) >= 2)))"
    },
    "1256": {
        "sentence": "There are 2 boxes with at least 1 yellow item",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)))) == 2"
    },
    "1259": {
        "sentence": "There is no square closely touching the bottom of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_square(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1261": {
        "sentence": "There is exactly one blue circle touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "1262": {
        "sentence": "there is one yellow circle touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "1265": {
        "sentence": "there are exactly two yellow objects touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1266": {
        "sentence": "There is at least one square closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_square(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1268": {
        "sentence": "There is 1 black item closely touching a corner",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_closely_touching_corner(x, Side.ANY)))) >= 1"
    },
    "1270": {
        "sentence": "there are two blue squares touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), is_touching_wall(x, Side.ANY)))) >= 2"
    },
    "1274": {
        "sentence": "There is 1 yellow item",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 1"
    },
    "1275": {
        "sentence": "None of the blue circles are touching any edge",
        "lf": "All(filter_obj(all_items, lambda x: AND(is_blue(x), is_circle(x))), lambda x: not is_touching_wall(x, Side.ANY))"
    },
    "1276": {
        "sentence": "There is a box with two yellow triangles and at least one blue circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))) == 2, exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))))))"
    },
    "1279": {
        "sentence": "There are exactly four yellow objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.ANY)))) == 4"
    },
    "1280": {
        "sentence": "There is exactly one blue item closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_closely_touching_wall(x, Side.RIGHT)))) == 1"
    },
    "1281": {
        "sentence": "There is a small blue item touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_small(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1282": {
        "sentence": "There are 2 yellow squares",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_square(x)))) == 2"
    },
    "1284": {
        "sentence": "There is 1 box with 1 yellow item and at least 1 black item",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1, exist(filter_color(x.all_items_in_box(), Color.BLACK))))) == 1"
    },
    "1287": {
        "sentence": "There are 6 yellow items",
        "lf": "count(filter_color(all_items, Color.YELLOW))==6"
    },
    "1290": {
        "sentence": "there are exactly three circles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), not is_touching_wall(x, Side.ANY)))) == 3"
    },
    "1292": {
        "sentence": "there are two blue circles not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), not is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1293": {
        "sentence": "blue circle is touching the wall.",
        "lf": "exist(filter_obj(filter_obj(all_items, lambda x: AND(is_blue(x), is_circle(x))), lambda x: is_touching_wall(x, Side.ANY)))"
    },
    "1298": {
        "sentence": "There is exactly one black item closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_closely_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "1301": {
        "sentence": "One box has 2 black triangles",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) == 2)) == 1"
    },
    "1311": {
        "sentence": "There is a circle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_circle(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1312": {
        "sentence": "There is ablue triangle closely touching the bottom of abox.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1314": {
        "sentence": "There is at least one box with a square and exactly one triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) >= 1 and count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) == 1))"
    },
    "1315": {
        "sentence": "There is a big yellow square touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x))))"
    },
    "1317": {
        "sentence": "There is a blue triangle touching the wall with its side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "1321": {
        "sentence": "One of the grey box has exactly three objects of atleast two different colors",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(get_set_colors(x.all_items_in_box())) >= 2))"
    },
    "1324": {
        "sentence": "There is a box with at least 3 items touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: is_touching_wall(x))) >= 3))"
    },
    "1333": {
        "sentence": "There is as box with only one item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "1334": {
        "sentence": "There is a black item closely touching the roof of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND( is_black(x), is_closely_touching_wall(x, Side.TOP))))"
    },
    "1335": {
        "sentence": "There are 3 items that are not the colour black",
        "lf": "count(filter_obj(all_items, lambda x:  NOT(is_black(x)))) == 3"
    },
    "1336": {
        "sentence": "There is a box with a black circle and at least one black squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) >= 1))"
    },
    "1337": {
        "sentence": "There is a grey box with exactly five objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5 ))"
    },
    "1338": {
        "sentence": "There are 2 blue circles",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), is_blue(x)))) == 2"
    },
    "1340": {
        "sentence": "there is a black object touching the bottom base",
        "lf": "exist(filter_obj(all_items, lambda x: AND( is_black(x), is_touching_wall(x, Side.BOTTOM)))) "
    },
    "1342": {
        "sentence": "One of the grey box has more than one object which are all of same type",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) > 1 and all_same_shape(x.all_items_in_box())))"
    },
    "1344": {
        "sentence": "t least 2 blue squares are touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), is_touching_wall(x)))) >= 2"
    },
    "1348": {
        "sentence": "There is a box with three black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))"
    },
    "1349": {
        "sentence": "There is a box which has blue and black items only.",
        "lf": "exist(filter_obj(all_boxes, lambda x: get_set_colors(x.all_items_in_box()) == set([Color.BLUE, Color.BLACK]) ))"
    },
    "1353": {
        "sentence": "There is exactly one black square not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), NOT(is_touching_wall(x))))) == 1"
    },
    "1354": {
        "sentence": "there is a blue object touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND( is_blue(x), is_touching_wall(x, Side.BOTTOM))))"
    },
    "1356": {
        "sentence": "There is a box with a blue circle, a black square and at least two yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x:  exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 2))"
    },
    "1357": {
        "sentence": "There is a box with at least one blue circle and three triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))) and count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) == 3))"
    },
    "1358": {
        "sentence": "One of the grey box contains exactly three objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3)) == 1"
    },
    "1359": {
        "sentence": "There is a box which has only two items and they are both circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 2))"
    },
    "1364": {
        "sentence": "There is exactly one blue object touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND( is_blue(x), is_touching_wall(x)))) == 1"
    },
    "1365": {
        "sentence": "There is a box with a yellow circle and two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_circle(x)))) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "1372": {
        "sentence": "There is an object that is not a circle touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(NOT(is_circle(x)), is_touching_corner(x))))"
    },
    "1373": {
        "sentence": "There is a black square closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1374": {
        "sentence": "There is a box with only one blue item and at least two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2))"
    },
    "1375": {
        "sentence": "There is a box with only blue and yellow color and a big circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_big(x), is_circle(x)))) and get_set_colors(x.all_items_in_box()) == set([Color.BLUE, Color.YELLOW])))"
    },
    "1377": {
        "sentence": "There is a black square touching the right corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_touching_corner(x, Side.RIGHT))))"
    },
    "1381": {
        "sentence": "There is only one blue object touching a edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_touching_wall(x)))) == 1"
    },
    "1382": {
        "sentence": "There is an item closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_closely_touching_corner(x)))"
    },
    "1383": {
        "sentence": "There is box with three items which are two blacks and one blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "1384": {
        "sentence": "There is a box with only one blue item and at least 3 items of another color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: NOT(is_blue(x)))) >= 3))"
    },
    "1388": {
        "sentence": "There is 1 box where the only black item is a square",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(NOT(is_black(x)), NOT(is_square(x))))))) == 1"
    },
    "1390": {
        "sentence": "There is a box, which has a blue circle and a yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_square(x))))))"
    },
    "1393": {
        "sentence": "There are 3 black items",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 3"
    },
    "1397": {
        "sentence": "there is one blue circle touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "1398": {
        "sentence": "There is a yellow item closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_yellow(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1399": {
        "sentence": "There  is exactly one black square not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), NOT(is_touching_wall(x))))) == 1"
    },
    "1400": {
        "sentence": "There are 3 black circles",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), is_black(x)))) == 3"
    },
    "1402": {
        "sentence": "There is a box with a yellow circle and a black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_circle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))))))"
    },
    "1403": {
        "sentence": "One of the grey box has exactly three objects one of which is a circle",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 3, exist(filter_shape(x, Shape.CIRCLE)))))"
    },
    "1404": {
        "sentence": "There is at least one blue square not touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "1405": {
        "sentence": "There is 1 box with only 1 yellow item",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.YELLOW)) == 1))"
    },
    "1410": {
        "sentence": "there are two yellow objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1411": {
        "sentence": "there is a black triangle not touching the base or edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "1412": {
        "sentence": "There is a box with only blue items.",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(contained({Color.BLUE}, get_set_colors(x)), count(get_set_colors(x)) == 1))) == 1"
    },
    "1413": {
        "sentence": "There is a box with multiple items and the three has the same shape and color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))) == 3 or count(filter_obj(x, lambda x: AND(is_blue(x), is_circle(x)))) == 3 or count(filter_obj(x, lambda x: AND(is_blue(x), is_triangle(x)))) == 3 or count(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))) == 3 or count(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))) == 3 or count(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))) == 3 or count(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x)))) == 3 or count(filter_obj(x, lambda x: AND(is_yellow(x), is_circle(x)))) == 3 or count(filter_obj(x, lambda x: AND(is_yellow(x), is_triangle(x)))) == 3))"
    },
    "1414": {
        "sentence": "There is a box with only blue and black items of which one is a black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(contained({Color.BLUE, Color.BLACK}, get_set_colors(x)), count(get_set_colors(x)) == 2), exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))))))"
    },
    "1418": {
        "sentence": "There is a box with exactly three items including blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 3, exist(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))))))"
    },
    "1419": {
        "sentence": "There are two box that has two blue items each.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 2)) == 2"
    },
    "1421": {
        "sentence": "There is a box with a yellow triangle, a black triangle and a blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x))))), exist(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))))))"
    },
    "1423": {
        "sentence": "There is 1 box with 5 items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 5)) == 1"
    },
    "1425": {
        "sentence": "There is at least 1 triangle closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_triangle(x), is_closely_touching_corner(x, Side.ANY))))"
    },
    "1427": {
        "sentence": "there are exactly two yellow objects not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), not is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1429": {
        "sentence": "Every box has a circle of the same color.",
        "lf": "exist(filter_obj(combinations(filter_shape(all_items, Shape.CIRCLE), 3), lambda x: count(get_set_colors(x)) == 1 and len(x) == 3 and len(set([x[0].box, x[1].box, x[2].box])) == 3))"
    },
    "1430": {
        "sentence": "There is 1 box with 1 blue circle",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_blue(x), is_circle(x)))) == 1)) == 1"
    },
    "1431": {
        "sentence": "There is a black square not touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "1432": {
        "sentence": "There is a box with multiple items and the four items are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) >= 5, count(filter_color(x, Color.BLACK)) == 4)))"
    },
    "1436": {
        "sentence": "There is 1 box with exactly 1 black circle in it",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))), count(x) == 1)))"
    },
    "1438": {
        "sentence": "There is 1 yellow item in each box",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.YELLOW)) == 1)) == 3"
    },
    "1442": {
        "sentence": "There are 2 boxes with at least 1 black circle",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))))) == 2"
    },
    "1446": {
        "sentence": "There is 1 box with exactly 1 yellow item and 1 blue item",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(contained({Color.YELLOW, Color.BLUE}, get_set_colors(x)), count(x) == 2)))"
    },
    "1449": {
        "sentence": "There is at least one yellow circle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1451": {
        "sentence": "There is a box with exactly two blue items and exactly two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) == 2, count(filter_color(x, Color.BLACK)) == 2)))"
    },
    "1452": {
        "sentence": "There is 1 box with exactly 1 blue triangle",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_blue(x), is_triangle(x))))))"
    },
    "1453": {
        "sentence": "There is a box with a yellow item and four black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.YELLOW)), count(filter_color(x, Color.BLACK)) == 4)))"
    },
    "1455": {
        "sentence": "There is a blue triangle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1458": {
        "sentence": "There is a box with a black square and at least two circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))), count(filter_shape(x, Shape.CIRCLE)) >= 2)))"
    },
    "1463": {
        "sentence": "There is a box with one square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x, Shape.SQUARE)) == 1))"
    },
    "1465": {
        "sentence": "There is no item closely touching a corner of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: is_closely_touching_corner(x, Side.ANY)))"
    },
    "1467": {
        "sentence": "There is at least one box with exactly two blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 2))"
    },
    "1468": {
        "sentence": "There is a box that has two yellow squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x)))) == 2))"
    },
    "1470": {
        "sentence": "There are 4 yellow items",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 4"
    },
    "1475": {
        "sentence": "There is a box with at least one blue triangle and at least one circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_triangle(x)))), exist(filter_shape(x, Shape.CIRCLE)))))"
    },
    "1477": {
        "sentence": "There is at least 1 square in each box",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_shape(x, Shape.SQUARE)))) == 3"
    },
    "1483": {
        "sentence": "There is no yellow item closely touching right wall of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_yellow(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1484": {
        "sentence": "There is a triangle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_triangle(x), is_touching_wall(x, Side.BOTTOM))))"
    },
    "1485": {
        "sentence": "There is exactly 1 yellow item",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 1"
    },
    "1487": {
        "sentence": "one blue object is touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), is_touching_wall(x, Side.BOTTOM))))"
    },
    "1488": {
        "sentence": "There is a blue circle touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1491": {
        "sentence": "There is 1 box with at least 3 black items",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLACK)) >= 3))"
    },
    "1492": {
        "sentence": "Only one small black circle is touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(AND(is_small(x), is_black(x)), is_circle(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "1496": {
        "sentence": "There is 1 box with exactly 1 circle in it",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_shape(x, Shape.CIRCLE)) == 1 and count(x) == 1)) == 1"
    },
    "1497": {
        "sentence": "There is a box with only two yellow circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_yellow(x), is_circle(x)))) == 2))"
    },
    "1498": {
        "sentence": "There are atleast three blue objects not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), not is_touching_wall(x, Side.ANY)))) >= 3"
    },
    "1499": {
        "sentence": "There is a blue triangle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1500": {
        "sentence": "There is at least one box with exactly four items including blue one.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 4, exist(filter_color(x, Color.BLUE)))))"
    },
    "1502": {
        "sentence": "There is a box with exactly four items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4))"
    },
    "1503": {
        "sentence": "There are 2 blue items",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 2"
    },
    "1504": {
        "sentence": "There is a blue or black triangle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_triangle(x) and (is_blue(x) or is_black(x)) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "1508": {
        "sentence": "There is not more than one grey box with exactly two objects",
        "lf": "equal_int(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)), 1)"
    },
    "1509": {
        "sentence": "there is exactly one yellow square not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "1510": {
        "sentence": "There are two the same color item touching the different corner of a square.",
        "lf": "exist(filter_obj(combinations(all_items, 2), lambda x: count(get_set_colors(x)) == 1 and All(x, is_touching_corner) and x[0].box != x[1].box))"
    },
    "1512": {
        "sentence": "There is a box with at least one black square and at least two circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))), 1) and ge(count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)), 2)))"
    },
    "1513": {
        "sentence": "One of the grey box has exactly two objects which are black",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and All(x.all_items_in_box(), is_black))) == 1"
    },
    "1516": {
        "sentence": "There is a box with two yellow squares and at least two blue squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) == 2 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))), 2)))"
    },
    "1517": {
        "sentence": "There is a box with black and yellow items and only one is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "1519": {
        "sentence": "t least two boxes have the same number of objects each and the same number of object touching the side.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_obj(all_boxes, lambda y: count(x.all_items_in_box()) == count(y.all_items_in_box()) and count(filter_obj(x.all_items_in_box(), is_touching_wall)) == count(filter_obj(y.all_items_in_box(), is_touching_wall)))), 2)))"
    },
    "1520": {
        "sentence": "there are 2 blue triangles and 2 black triangles",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x))) == 2 and count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x))) == 2"
    },
    "1521": {
        "sentence": "There is a box with only 3 items of which 1 is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "1523": {
        "sentence": "Two blue squares are touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_touching_wall(x))) == 2"
    },
    "1524": {
        "sentence": "There is a box with items of 3 different colors and 2 black items with at least one being a triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))), 1)))"
    },
    "1531": {
        "sentence": "There is at least 1 box with 2 black items of the same shape",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and ge(count(filter_obj(x.all_items_in_box(), lambda z: is_black(z) and equal_shape(query_shape(y), query_shape(z)))), 2))))), 1)"
    },
    "1532": {
        "sentence": "There are at least 2 yellow squares",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x))), 2)"
    },
    "1533": {
        "sentence": "There is only one item in a box.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "1536": {
        "sentence": "There is a box without a blue item, with two yellow and at lest one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: NOT(exist(filter_color(x.all_items_in_box(), Color.BLUE))) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 1)))"
    },
    "1537": {
        "sentence": "None of the blue objects are touching any edge",
        "lf": "All(filter_color(all_items, Color.BLUE), lambda x: NOT(is_touching_wall(x)))"
    },
    "1540": {
        "sentence": "There are 2 blue triangles",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x))) == 2"
    },
    "1542": {
        "sentence": "none of the blue circles are touching any edge",
        "lf": "All(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x)), lambda x: NOT(is_touching_wall(x)))"
    },
    "1546": {
        "sentence": "There is at least one box with only one item.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)), 1)"
    },
    "1550": {
        "sentence": "There is a box with items of all 3 different colors and only one blue circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.BLUE)) and count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) == 1))"
    },
    "1551": {
        "sentence": "There is only 1 box with blue items",
        "lf": "count(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), is_blue))) == 1"
    },
    "1555": {
        "sentence": "there is at least one black circle touching the edge",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_touching_wall(x))), 1)"
    },
    "1556": {
        "sentence": "There is a small yellow square touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_small(x) and is_yellow(x) and is_square(x) and is_touching_wall(x)))"
    },
    "1557": {
        "sentence": "ll black squares are touching the edge",
        "lf": "All(filter_obj(all_items, lambda x: is_black(x) and is_square(x)), is_touching_wall)"
    },
    "1560": {
        "sentence": "There is as box that has no color yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: NOT(exist(filter_color(x.all_items_in_box(), Color.YELLOW)))))"
    },
    "1562": {
        "sentence": "There is a box with a blue triangle and at least one black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))) and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))), 1)))"
    },
    "1564": {
        "sentence": "There is at least one box with only two items.",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)), 1)"
    },
    "1571": {
        "sentence": "There is at least 1 box with 2 blue items",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)), 1)"
    },
    "1578": {
        "sentence": "one of the grey box contains exactly six objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6)) == 1"
    },
    "1579": {
        "sentence": "There is a box with multiple items and the three items are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 3) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))"
    },
    "1582": {
        "sentence": "There is 1 box with exactly 1 blue item and 1 yellow item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)) == 1"
    },
    "1585": {
        "sentence": "There is at least 1 box with 2 black circles",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) == 2)), 1)"
    },
    "1586": {
        "sentence": "There is 1 black triangle",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x))) == 1"
    },
    "1590": {
        "sentence": "one of the grey square contains exactly one object",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1"
    },
    "1591": {
        "sentence": "There is exactly one square touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_square(x) and is_touching_wall(x))) == 1"
    },
    "1592": {
        "sentence": "The grey box with least number of objects contains one blue circle",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(all_boxes, lambda y: le(count(x.all_items_in_box()), count(y.all_items_in_box()))) and count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) == 1))"
    },
    "1594": {
        "sentence": "There is a square closely touching a corner of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_square(x) and is_closely_touching_corner(x)))"
    },
    "1596": {
        "sentence": "There is a box with a yellow square and two circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 2))"
    },
    "1598": {
        "sentence": "one of the grey square has exactly two  objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)) == 1"
    },
    "1599": {
        "sentence": "There are 5 black items",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 5"
    },
    "1601": {
        "sentence": "There is a box that has six items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6))"
    },
    "1603": {
        "sentence": "There is a box which has three blue items and two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLUE)) == 3, count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)))"
    },
    "1606": {
        "sentence": "There is 1 box wih exactly 1 circle in it",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 1)) == 1"
    },
    "1607": {
        "sentence": "There is a box with three black items and a yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3, count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)))"
    },
    "1609": {
        "sentence": "There is 1 box with at least 2 triangles of the same colour",
        "lf": "count(filter_obj(all_boxes, lambda x: OR(OR(count(filter_color(filter_shape(x.all_items_in_box(), Shape.TRIANGLE), Color.BLACK)) >= 2, count(filter_color(filter_shape(x.all_items_in_box(), Shape.TRIANGLE), Color.BLUE)) >= 2), count(filter_color(filter_shape(x.all_items_in_box(), Shape.TRIANGLE), Color.YELLOW)) >= 2))) == 1"
    },
    "1615": {
        "sentence": "There is a box that two circles are attached to a line.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_circle(x), is_touching_wall(x, Side.ANY)))) == 2))"
    },
    "1616": {
        "sentence": "there is a blue circle not touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "1617": {
        "sentence": "There is no black circle closely touching the bottom of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1620": {
        "sentence": "There is a box with a black triangle and at least one blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) == 1, exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))))))"
    },
    "1622": {
        "sentence": "There is a box with a black square, a blue square and a yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) == 1, count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))) == 1), count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)))"
    },
    "1623": {
        "sentence": "there are exactly two yellow triangles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_triangle(x)), not is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1625": {
        "sentence": "There is a box with three yellow items and four other items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3, count(x.all_items_in_box()) == 7)))"
    },
    "1627": {
        "sentence": "There is a box with a yellow triangle, at least one blue circle and at least one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x))))), exist(filter_color(x.all_items_in_box(), Color.BLACK)))))"
    },
    "1629": {
        "sentence": "One of the grey box has a black circle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_circle(x), is_black(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1632": {
        "sentence": "There is a box with seven items and the four are yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 7, count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 4)))"
    },
    "1633": {
        "sentence": "There is a blue square touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1634": {
        "sentence": "There is 1 box with a black square and a black triangle",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))))))"
    },
    "1636": {
        "sentence": "black triangle is touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1637": {
        "sentence": "ll the boxes do not have the same number of items.",
        "lf": "not All(combinations(all_boxes, 2), lambda x: count(x[0]) == count(x[1]))"
    },
    "1639": {
        "sentence": "There is at least one blue circle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1640": {
        "sentence": "ll the boxes has a yellow item.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)))) == 3"
    },
    "1643": {
        "sentence": "ll the three grey boxes either contain objects in even or odd numbers",
        "lf": "AND(exist(filter_obj(all_boxes, lambda x: count(x) % 2 == 0)), exist(filter_obj(all_boxes, lambda x: count(x) % 2 == 1)))"
    },
    "1645": {
        "sentence": "There is a box with at least three circles and at least two triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_shape(x, Shape.CIRCLE)) >= 3, count(filter_shape(x, Shape.TRIANGLE)) >=2 )))"
    },
    "1646": {
        "sentence": "There is a big black triangle not touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_big(x), is_black(x)), is_triangle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "1648": {
        "sentence": "There are exactly two squares closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_closely_touching_wall(x, Side.BOTTOM), is_square(x)))) == 2"
    },
    "1649": {
        "sentence": "There is at least one circle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_circle(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1656": {
        "sentence": "There is a black triangle touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_triangle(x), is_black(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1657": {
        "sentence": "There is one blue triangle touching the bottom base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "1661": {
        "sentence": "there is a blue circle not touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "1663": {
        "sentence": "There is a box that has only three items and they are all black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 3, count(filter_color(x, Color.BLACK)) == 3)))"
    },
    "1664": {
        "sentence": "One of the grey box has more than one blue object of which one blue object is touching the edge",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) >= 2, count(filter_obj(filter_color(x, Color.BLUE), lambda x: is_touching_wall(x, Side.ANY))) == 1)))"
    },
    "1665": {
        "sentence": "yellow circle of medium size is touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_yellow(x), is_circle(x)), is_medium(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1667": {
        "sentence": "There isa box with 3 items of all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 3, count(get_set_colors(x)) == 3)))"
    },
    "1669": {
        "sentence": "There is at least one blue circle closely touching a wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_closely_touching_wall(x, Side.ANY))))"
    },
    "1670": {
        "sentence": "There is a box with 3 blue, 2 black, and 1 yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x, Color.BLUE)) == 3, count(filter_color(x, Color.BLACK)) == 2), count(filter_color(x, Color.YELLOW)) == 1)))"
    },
    "1671": {
        "sentence": "There is a box with only two squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x, Shape.SQUARE)) == 2))"
    },
    "1675": {
        "sentence": "There are 2 boxes with 2 yellow items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.YELLOW)) == 2)) == 2"
    },
    "1676": {
        "sentence": "one of the grey box has exactly six objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 6))"
    },
    "1679": {
        "sentence": "There is at least 1 box with 1 yellow item and 1 blue item",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.YELLOW)) == 1, count(filter_color(x, Color.BLUE)) == 1)))"
    },
    "1680": {
        "sentence": "one of the grey square has exactly one square object only",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and count(filter_shape(x, Shape.SQUARE)) == 1))"
    },
    "1681": {
        "sentence": "There is at least 1 blue item closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), is_closely_touching_corner(x, Side.ANY))))"
    },
    "1682": {
        "sentence": "There are 1 blue circle",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_circle(x)))) == 1"
    },
    "1685": {
        "sentence": "There is a box with exactly six items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 6))"
    },
    "1687": {
        "sentence": "There is a box with a yellow circle touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1688": {
        "sentence": "There are exactly two black objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1689": {
        "sentence": "There is 1 box with 2 black items",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLACK)) == 2))"
    },
    "1691": {
        "sentence": "There is a box with items of all 3 different colors and exactly 2 blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.BLUE)) == 2, count(get_set_colors(x)) == 3)))"
    },
    "1693": {
        "sentence": "there is a black square touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_square(x), is_black(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "1694": {
        "sentence": "There are exactly three black objects not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), not is_touching_wall(x, Side.ANY)))) == 3"
    },
    "1696": {
        "sentence": "t least one of the  grey box contains exactly one black object",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLACK)) == 1))"
    },
    "1697": {
        "sentence": "One of the grey square contains exactly four objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 4)) == 1"
    },
    "1698": {
        "sentence": "There is a box with a lot of items but only one is touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x, lambda x: is_touching_wall(x, Side.ANY))) == 1, count(x) >= 5)))"
    },
    "1701": {
        "sentence": "the grey box with least number of object contains only one black object",
        "lf": "count(filter_obj(min(all_boxes, key=lambda x: count(x)).all_items_in_box(), lambda y: is_black(y))) == 1"
    },
    "1703": {
        "sentence": "One box has 1 blue square",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))) == 1)) == 1"
    },
    "1704": {
        "sentence": "there is exactly one black object touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "1705": {
        "sentence": "There is a box with a blue trianlge touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1707": {
        "sentence": "There is only 1 box with yellow triangles in it",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x, lambda x: AND(is_yellow(x), is_triangle(x)))))) == 1"
    },
    "1711": {
        "sentence": "There is a box with a yellow triangle and at least one black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))))))"
    },
    "1712": {
        "sentence": "There is no black item closely touching the bottom of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_black(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1714": {
        "sentence": "There is a blue item closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_blue(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1715": {
        "sentence": "One of the grey square contains exactly five objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 5))"
    },
    "1716": {
        "sentence": "There is a box with a yellow square and two black circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x)))), count(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))) == 2)))"
    },
    "1717": {
        "sentence": "There is only 1 yellow circle",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_circle(x)))) == 1"
    },
    "1719": {
        "sentence": "There is a box with 2 yellow, 3 blue and 1 black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x,  Color.YELLOW)) == 2, count(filter_color(x, Color.BLUE)) == 3), count(filter_color(x, Color.BLACK)) == 1)))"
    },
    "1720": {
        "sentence": "there is one black triangle touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "1721": {
        "sentence": "There is a box with 3 items at most of only one color.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) <= 3, count(get_set_colors(x)) == 1)))"
    },
    "1722": {
        "sentence": "There is 1 box that has exactly 1 item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 1)) == 1"
    },
    "1723": {
        "sentence": "There is a black triangle touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_touching_corner(x, Side.ANY))))"
    },
    "1724": {
        "sentence": "There is only one black item closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_closely_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "1725": {
        "sentence": "There is at least one black circle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1726": {
        "sentence": "There is a box with only one square and it is touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_shape(x, Shape.SQUARE)) == 1, exist(filter_obj(x, lambda x: AND(is_square(x), is_touching_wall(x)))))))"
    },
    "1729": {
        "sentence": "there is one black cirlce touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "1731": {
        "sentence": "There is a box with a blue square and at least one blue circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))), exist(filter_obj(x, lambda x: AND(is_blue(x), is_circle(x)))))))"
    },
    "1733": {
        "sentence": "There is a square nearly touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_square(x), is_closely_touching_corner(x, Side.ANY))))"
    },
    "1734": {
        "sentence": "There is a box with a yellow square and a other square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x)))), count(filter_shape(x, Shape.SQUARE)) == 2)))"
    },
    "1735": {
        "sentence": "There is 1 box with only 1 blue item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 1)) == 1"
    },
    "1738": {
        "sentence": "there is one yellow circle touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM)))) == 1"
    },
    "1740": {
        "sentence": "There are 4 square shapes",
        "lf": "count(filter_shape(all_items, Shape.SQUARE)) == 4"
    },
    "1742": {
        "sentence": "There is 1 black square",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_square(x)))) == 1"
    },
    "1743": {
        "sentence": "There is at least one black item closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_black(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "1746": {
        "sentence": "there are exactly two yellow squares touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1756": {
        "sentence": "There is at least 1 box with black and yellow items",
        "lf": "exist(filter_obj(all_boxes, lambda x: contained({Color.YELLOW, Color.BLACK}, get_set_colors(x))))"
    },
    "1758": {
        "sentence": "There is a box with only one object.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 1))"
    },
    "1761": {
        "sentence": "one of the grey square contains exactly three objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 3)) == 1"
    },
    "1764": {
        "sentence": "There is a box with three blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 3))"
    },
    "1765": {
        "sentence": "There is 1 box with a black triangle and black circle in it",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x))))))) == 1"
    },
    "1767": {
        "sentence": "One of the grey box has exactly three objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 3))"
    },
    "1768": {
        "sentence": "There is 1 box with at least 2 triangles in it",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_shape(x, Shape.TRIANGLE)) >= 2)) == 1"
    },
    "1769": {
        "sentence": "one of the grey box has exactly one black object",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLACK)) == 1))"
    },
    "1770": {
        "sentence": "There is a box with a yellow square and a black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_square(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))))))"
    },
    "1771": {
        "sentence": "There is a box with only one square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x, Shape.SQUARE)) == 1))"
    },
    "1773": {
        "sentence": "there are two yellow squares touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "1774": {
        "sentence": "Blue squares are touching the base",
        "lf": "All(filter_obj(all_items, lambda x: AND(is_blue(x), is_square(x))), lambda x: is_touching_wall(x, Side.BOTTOM))"
    },
    "1775": {
        "sentence": "There are at least 3 blue circles",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_circle(x)))) >= 3"
    },
    "1777": {
        "sentence": "There is a box with a black triangle and a black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))))))"
    },
    "1778": {
        "sentence": "There are exactly four circle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), not is_touching_wall(x, Side.ANY)))) == 4"
    },
    "1780": {
        "sentence": "There are at least 3 yellow items",
        "lf": "count(filter_color(all_items, Color.YELLOW)) >= 3"
    },
    "1784": {
        "sentence": "There are two black items closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_closely_touching_wall(x, Side.BOTTOM)))) == 2"
    },
    "1785": {
        "sentence": "There is a box with at most two items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) <= 2))"
    },
    "1788": {
        "sentence": "There are 2 blue squares",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_square(x)))) == 2"
    },
    "1789": {
        "sentence": "There is a rectangle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_square(x), is_touching_wall(x, Side.RIGHT))))"
    },
    "1792": {
        "sentence": "one of the grey box contains two blue , one yellow and one black objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x, Color.BLUE)) == 2, count(filter_color(x, Color.YELLOW)) == 1), count(filter_color(x, Color.BLACK)) == 1)))"
    },
    "1793": {
        "sentence": "There is a box with a blue square and at least one black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))))))"
    },
    "1795": {
        "sentence": "There is a blue circle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "1798": {
        "sentence": "There is 1 box with exactly 1 black triangle and 1 black square",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x))))), count(x) == 2))) == 1"
    },
    "1799": {
        "sentence": "There is a blue triangle that is touching the side of the box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "1800": {
        "sentence": "There is a box that has one square and one triangle that are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x, lambda x: AND(is_square(x), is_black(x)))) == 1, count(filter_obj(x, lambda x: AND(is_triangle(x), is_black(x)))) == 1)))"
    },
    "1802": {
        "sentence": "There is a box with 4 items of 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(get_set_colors(x.all_items_in_box())) == 3))"
    },
    "1804": {
        "sentence": "There are two boxes with multiple items and each has two black items.",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 3) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2)) == 2"
    },
    "1808": {
        "sentence": "There is a box with a yellow triangle and two squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) and count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) == 2))"
    },
    "1811": {
        "sentence": "There is a box with a blue circle and a yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y)))))"
    },
    "1815": {
        "sentence": "There is 1 box with exactly 2 items of the same colour",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: count(filter_obj(x.all_items_in_box(), lambda z: equal_color(query_color(y), query_color(z)))) == 2)))), 1)"
    },
    "1816": {
        "sentence": "There is a box with a blue circle, a yellow triangle and at least one square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) and ge(count(filter_shape(x.all_items_in_box(), Shape.SQUARE)), 1)))"
    },
    "1818": {
        "sentence": "There are at least 2 blue squares",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x))), 2)"
    },
    "1821": {
        "sentence": "There is a box with only one item that is not black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and NOT(is_black(unique(x.all_items_in_box())))))"
    },
    "1822": {
        "sentence": "There is a box with blue and yellow items and the number of  the items of each colors are the same.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLUE)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and all_same_attribute(get_set_colors(x.all_items_in_box()), lambda color: count(filter_color(x.all_items_in_box(), color)))))"
    },
    "1823": {
        "sentence": "There is a box with a small yellow circle not touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_small(y) and is_yellow(y) and is_circle(y) and NOT(is_touching_wall(y))))))"
    },
    "1826": {
        "sentence": "There is a black triangle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_closely_touching_wall(x, Side.RIGHT)))"
    },
    "1827": {
        "sentence": "The black triangle is touching the wall with its side.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_touching_wall(x)))"
    },
    "1829": {
        "sentence": "There are 2 boxes with yellow items",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)))) == 2"
    },
    "1830": {
        "sentence": "There is a box with 2 big circles of which one is touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_big(y) and is_circle(y))) == 2 and count(filter_obj(x.all_items_in_box(), lambda y: is_big(y) and is_circle(y) and is_touching_wall(y))) == 1))"
    },
    "1831": {
        "sentence": "There is at least 1 black circ;e",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x))), 1)"
    },
    "1835": {
        "sentence": "there is one grey square with exactly four objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4)) == 1"
    },
    "1838": {
        "sentence": "There is a box which has only three items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "1842": {
        "sentence": "the grey box with least number of objects contains at least one blue object",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(all_boxes, lambda y: le(count(x.all_items_in_box()), count(y.all_items_in_box()))) and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 1)))"
    },
    "1843": {
        "sentence": "There are 2 boxes with 1 yellow circle",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) == 1)) == 2"
    },
    "1844": {
        "sentence": "There is exactly one blue circle not touching any adge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "1846": {
        "sentence": "There is at least 1 box with 2 yellow items",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)), 1)"
    },
    "1847": {
        "sentence": "There is a box with exactly two black items and exactly one blue circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) == 1))"
    },
    "1850": {
        "sentence": "There is 1 box with at least 2 yellow items",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 2))) == 1"
    },
    "1851": {
        "sentence": "There is exactly 1 yellow square and 1 yellow triangle",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x))) == 1 and count(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x))) == 1"
    },
    "1854": {
        "sentence": "There is 1 box with 1 black item and 1 yellow item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and count(x.all_items_in_box()) == 2)) == 1"
    },
    "1857": {
        "sentence": "There is a box with three items,",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "1859": {
        "sentence": "There is 1 box with exactly 2 blue items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2)) == 1"
    },
    "1863": {
        "sentence": "there are exactly three blue objects not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and NOT(is_touching_wall(x)))) == 3"
    },
    "1867": {
        "sentence": "There is 1 box with 2 yellow triangles",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) == 2)) == 1"
    },
    "1873": {
        "sentence": "at least one of the grey box contains objects of two color",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 2)), 1)"
    },
    "1875": {
        "sentence": "there are exactly three objects in one grey box",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3)) >= 1"
    },
    "1876": {
        "sentence": "There are two blue items closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_closely_touching_wall(x, Side.RIGHT))) == 2"
    },
    "1877": {
        "sentence": "There are exactly two triangles touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and is_touching_wall(x))) == 2"
    },
    "1881": {
        "sentence": "There is a box with a black circle and a lot of blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 3)))"
    },
    "1882": {
        "sentence": "There is a small black triangle near a yellow circle.",
        "lf": "exist(filter_obj(all_items, lambda x: is_small(x) and is_black(x) and is_triangle(x) and exist(filter_obj(get_touching(x), lambda y: is_yellow(y) and is_circle(y)))))"
    },
    "1885": {
        "sentence": "There are exactly two triangles touching the right side edge",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and is_touching_wall(x, Side.RIGHT))) == 2"
    },
    "1886": {
        "sentence": "There is a box with yellow items and exactly three black triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: gt(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 1) and count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))) == 3))"
    },
    "1887": {
        "sentence": "There is no yellow square closely touching right wall of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x) and is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1890": {
        "sentence": "There is exactly one black circle not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "1891": {
        "sentence": "There is 1 blue triangle",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x))) == 1"
    },
    "1892": {
        "sentence": "There is a box that has only one shape.",
        "lf": "exist(filter_obj(all_boxes, lambda x: all_same_shape(x.all_items_in_box())))"
    },
    "1893": {
        "sentence": "There is a box with six items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6))"
    },
    "1896": {
        "sentence": "There is a box with a black square, a blue square and a yellow circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y)))))"
    },
    "1897": {
        "sentence": "There is a square closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_square(x) and is_closely_touching_corner(x)))"
    },
    "1901": {
        "sentence": "there are exactly two squares touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_square(x) and is_touching_wall(x))) == 2"
    },
    "1904": {
        "sentence": "There is a box with a yellow circle and at least one black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_circle(y))) == 1 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))), 1)))"
    },
    "1905": {
        "sentence": "There is a box with one ble triangle and one black square of the same size.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y) and exist(filter_obj(x.all_items_in_box(), lambda z: is_black(z) and is_square(z) and equal_size(query_size(y), query_size(z))))))))"
    },
    "1906": {
        "sentence": "There is 1 box with many items",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 3))), 1)"
    },
    "1908": {
        "sentence": "There is a box with only three items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3))"
    },
    "1910": {
        "sentence": "There are two boxes which has only two yellow objects.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2)) == 2"
    },
    "1911": {
        "sentence": "There is 1 box with at least 6 items in it",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 6))) == 1"
    },
    "1912": {
        "sentence": "There are 2 black circles",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x))) == 2"
    },
    "1916": {
        "sentence": "There is a box with 2 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "1917": {
        "sentence": "There is a box with two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "1918": {
        "sentence": "There is a box with four yellow items and at least one blue circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 4 and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))), 1)))"
    },
    "1919": {
        "sentence": "There is a box with 1 blue and 1 yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "1926": {
        "sentence": "There is a box with two yellow triangles and other items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) == 2 and gt(count(x.all_items_in_box()), 2)))"
    },
    "1929": {
        "sentence": "There are exactly two triangles not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and NOT(is_touching_wall(x)))) == 2"
    },
    "1935": {
        "sentence": "There is a box with six items and the it has three colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6 and count(get_set_colors(x.all_items_in_box())) == 3))"
    },
    "1936": {
        "sentence": "There is a box with a yellow square and at least one triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and ge(count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)), 1)))"
    },
    "1938": {
        "sentence": "There is 1 box with 2 blue circles",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) == 2)) == 1"
    },
    "1943": {
        "sentence": "There are two black objects touching the side.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x))) == 2"
    },
    "1946": {
        "sentence": "there are at least two blue squares touching the edge",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_touching_wall(x))), 2)"
    },
    "1947": {
        "sentence": "There is a yellow triangle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "1949": {
        "sentence": "One of the grey box contains two yellow objects among other objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: gt(count(x.all_items_in_box()), 2) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "1952": {
        "sentence": "There is a box with only 1 item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "1955": {
        "sentence": "There is a box which has five items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 5))"
    },
    "1958": {
        "sentence": "There is a box that has only black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), is_black)))"
    },
    "1963": {
        "sentence": "there are two circles touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_circle(x) and is_touching_wall(x, Side.BOTTOM))) == 2"
    },
    "1967": {
        "sentence": "There is 1 blue circle",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x))) == 1"
    },
    "1971": {
        "sentence": "There is only 1 box with yellow triangles",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))))) == 1"
    },
    "1975": {
        "sentence": "There is a box with a black circle, a black square and a yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_circle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) and exist(filter_color(x.all_items_in_box(), Color.YELLOW))))"
    },
    "1978": {
        "sentence": "There is a box with at least 3 yellow items and one blue item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 3) and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "1979": {
        "sentence": "There is 1 blue square",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_square(x))) == 1"
    },
    "1980": {
        "sentence": "There is a box with items of all 3 different colors and a blue circle touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_touching_wall(y)))))"
    },
    "1981": {
        "sentence": "There is no blue square closely touching right wall of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1984": {
        "sentence": "There are exactly three items closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_closely_touching_wall(x, Side.BOTTOM))) == 3"
    },
    "1985": {
        "sentence": "there is a grey box having only blue color objects, where at least one blue square is not touching an edge",
        "lf": "exist(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), is_blue) and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_square(y) and NOT(is_touching_wall(y)))), 1)))"
    },
    "1991": {
        "sentence": "There is a box with exactly three black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))"
    },
    "1992": {
        "sentence": "There is a big blue square touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_big(x) and is_blue(x) and is_square(x) and is_touching_wall(x)))"
    },
    "1993": {
        "sentence": "There is no black triangle closely touching right wall of a box.",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "1994": {
        "sentence": "There is a blue object touching the corner and the shape is not circle.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_touching_corner(x) and NOT(is_circle(x))))"
    },
    "1998": {
        "sentence": "one of the grey square contains exactly two objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)) == 1"
    },
    "2000": {
        "sentence": "None of the black color objects are touching the edge",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x))))"
    },
    "2004": {
        "sentence": "The grey box containing least number of objects are blue",
        "lf": "filter_color(min(all_boxes, key=lambda x: count(x)).all_items_in_box(), Color.BLUE) == min(all_boxes, key=lambda x: count(x)).all_items_in_box()"
    },
    "2006": {
        "sentence": "There is a box with multiple items and there is a yellow circle and triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_yellow(x), is_circle(x)))), exist(filter_obj(x, lambda x: AND(is_yellow(x), is_triangle(x))))), count(x) >= 3)))"
    },
    "2008": {
        "sentence": "There is a box with 5 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 5))"
    },
    "2010": {
        "sentence": "One of the grey square contains only one object and this object is not touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(not is_touching_wall(x, Side.ANY), count(x.box) == 1)))"
    },
    "2017": {
        "sentence": "There is a box with only one item of medium size not touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_medium(x), not is_touching_wall(x, Side.ANY)))) == 1))"
    },
    "2019": {
        "sentence": "at least one grey square has exactly seven objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 7))"
    },
    "2021": {
        "sentence": "There is a box with only yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(all_same_color(x), exist(filter_color(x, Color.YELLOW)))))"
    },
    "2023": {
        "sentence": "ll the boxes has one black item each.",
        "lf": "all_same_attribute(all_boxes, lambda x: count(filter_color(x, Color.BLACK)) == 1)"
    },
    "2024": {
        "sentence": "the grey square with the least number of objects has a circle",
        "lf": "count(filter_obj(min(all_boxes, key=lambda x: count(x)).all_items_in_box(), lambda y: is_circle(y))) == 1"
    },
    "2026": {
        "sentence": "There is a box with only one yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.YELLOW)) == 1))"
    },
    "2030": {
        "sentence": "There is a box with two items and the one is a black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 2, exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))))))"
    },
    "2031": {
        "sentence": "There is exactly one circle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), not is_touching_wall(x, Side.ANY)))) == 1"
    },
    "2032": {
        "sentence": "There is a black square touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_touching_corner(x, Side.ANY))))"
    },
    "2037": {
        "sentence": "There is a box with a circle and at least two triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_shape(x, Shape.CIRCLE)) == 1, count(filter_shape(x, Shape.TRIANGLE)) >= 2)))"
    },
    "2038": {
        "sentence": "There is 1 box with only black and yellow items",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(get_set_colors(x)) == 2, contained({Color.BLACK, Color.YELLOW}, get_set_colors(x))))) == 1"
    },
    "2040": {
        "sentence": "One of the grey box contains exactly three objects of which two are black and one is of blue color",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(AND(count(filter_color(x, Color.BLUE)) == 1, count(filter_color(x, Color.BLACK)) == 2), count(x) == 3))) == 1"
    },
    "2043": {
        "sentence": "There is 1 box with only 2 items of the same colour",
        "lf": "count(filter_obj(all_boxes, lambda x: AND(count(x) == 2, all_same_color(x)))) == 1"
    },
    "2044": {
        "sentence": "There is no blue item closely touching the bottom of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_blue(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "2048": {
        "sentence": "there is exactly one black triangle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), not is_touching_wall(x, Side.ANY)))) == 1"
    },
    "2050": {
        "sentence": "There is a grey box with exactly four objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 4))"
    },
    "2052": {
        "sentence": "one of the grey square contains exactly seven objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 7))"
    },
    "2053": {
        "sentence": "There is a blue square of medium size touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(AND(is_medium(x), is_blue(x)), is_square(x)), is_touching_wall(x, Side.ANY))))"
    },
    "2054": {
        "sentence": "There are two boxes with yellow circles.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x, lambda x: AND(is_yellow(x), is_circle(x)))))) == 2"
    },
    "2058": {
        "sentence": "There is 1 box with exactly 3 items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 3)) == 1"
    },
    "2059": {
        "sentence": "One of the grey square contains exactly two objects",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x) == 2)) == 1"
    },
    "2065": {
        "sentence": "There is a box that has four items with two colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(get_set_colors(x)) == 2, count(x) == 4)))"
    },
    "2066": {
        "sentence": "There is a box with seven items and the two are blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) == 7, count(filter_color(x, Color.BLUE)) == 2)))"
    },
    "2070": {
        "sentence": "there is a black circle not touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "2072": {
        "sentence": "There is a yellow square and a yellow circle.",
        "lf": "contained({Shape.SQUARE, Shape.CIRCLE}, get_set_shapes(filter_color(all_items, Color.YELLOW)))"
    },
    "2075": {
        "sentence": "There is a box with only 3 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 3))"
    },
    "2076": {
        "sentence": "There is a box with items of only 2 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x)) == 2))"
    },
    "2081": {
        "sentence": "There is a box with 4 items at most of all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) <= 4, count(get_set_colors(x)) == 3)))"
    },
    "2085": {
        "sentence": "There is 1 blue triangle and 1 blue square",
        "lf": "AND(count(filter_obj(all_items, lambda x: AND(is_blue(x), is_triangle(x)))) == 1, count(filter_obj(all_items, lambda x: AND(is_blue(x), is_square(x)))) == 1)"
    },
    "2091": {
        "sentence": "there are exactly three black squares not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), not is_touching_wall(x, Side.ANY)))) == 3"
    },
    "2095": {
        "sentence": "There is a box with only 2 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 2))"
    },
    "2099": {
        "sentence": "There is at least 1 box with many items",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) >= 3))"
    },
    "2100": {
        "sentence": "There is a box with a black square and at least one black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: contained({Shape.SQUARE, Shape.TRIANGLE}, get_set_shapes(filter_color(x, Color.BLACK)))))"
    },
    "2103": {
        "sentence": "There is a blue triangle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_triangle(x) and is_closely_touching_wall(x, Side.RIGHT)))"
    },
    "2106": {
        "sentence": "There is a box with a yellow square and exactly two blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "2108": {
        "sentence": "None of the black circles are touching any edge",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_touching_wall(x))))"
    },
    "2109": {
        "sentence": "There is exactly one yellow square closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x) and is_closely_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "2111": {
        "sentence": "One of the grey box has two circles touching the base",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_circle(y) and is_touching_wall(y, Side.BOTTOM))) == 2)) == 1"
    },
    "2113": {
        "sentence": "There is a yellow circle touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and is_touching_wall(x)))"
    },
    "2117": {
        "sentence": "There is exactly one black square not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "2118": {
        "sentence": "There is a box with multiple items and there is one black square and one black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 3) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y)))))"
    },
    "2119": {
        "sentence": "There is a triangle in every box.",
        "lf": "All(all_boxes, lambda x: exist(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)))"
    },
    "2121": {
        "sentence": "There are 2 yellow items",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 2"
    },
    "2122": {
        "sentence": "There is a blue circle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_circle(x) and is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "2123": {
        "sentence": "There is 1 box with items of all three colours",
        "lf": "count(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 3)) == 1"
    },
    "2126": {
        "sentence": "There is 1 box with exactly 1 yellow item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)) == 1"
    },
    "2128": {
        "sentence": "There are at least two blue objects touching the edge",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x))), 2)"
    },
    "2129": {
        "sentence": "There is a box with exactly two blue items, exactly two yellow items and only one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "2132": {
        "sentence": "There is a box which has only one yellow item which is triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and is_triangle(unique(filter_color(x.all_items_in_box(), Color.YELLOW)))))"
    },
    "2133": {
        "sentence": "There is a box with a blue square, at least one black square and at least two yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) and ge(count(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_square(y))), 1) and ge(count(filter_color(x.all_items_in_box(), Color.YELLOW)), 2)))"
    },
    "2134": {
        "sentence": "There are at least 2 yellow triangles",
        "lf": "ge(count(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x))), 2)"
    },
    "2137": {
        "sentence": "There is a box with 2 black and 2 yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "2138": {
        "sentence": "There is no box with only one item.",
        "lf": "NOT(exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)))"
    },
    "2139": {
        "sentence": "black square is not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_square(x))) == 1 and NOT(is_touching_wall(unique(filter_obj(all_items, lambda x: is_black(x) and is_square(x)))))"
    },
    "2140": {
        "sentence": "There is a box with a black triangle, a yellow square and a circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y))) and exist(filter_shape(x.all_items_in_box(), Shape.CIRCLE))))"
    },
    "2141": {
        "sentence": "There is a box with 3 black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3))"
    },
    "2143": {
        "sentence": "There is at least one box with exactly 1 circle in it",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 1)), 1)"
    },
    "2144": {
        "sentence": "There is exactly one triangle touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "2147": {
        "sentence": "There is an item closely touching a corner of a box.",
        "lf": "exist(filter_obj(all_items, is_closely_touching_corner))"
    },
    "2152": {
        "sentence": "There is 1 black traingle",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x))) == 1"
    },
    "2160": {
        "sentence": "There is a blue square touching the line.",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_touching_wall(x)))"
    },
    "2161": {
        "sentence": "There is a yellow triangle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x) and is_closely_touching_wall(x, Side.RIGHT)))"
    },
    "2163": {
        "sentence": "None of the  black triangles not touching any edge",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: is_black(x) and is_triangle(x) and NOT(is_touching_wall(x)))))"
    },
    "2164": {
        "sentence": "There is 1 box with eactly 1 item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1)) == 1"
    },
    "2167": {
        "sentence": "There is one box with many items",
        "lf": "count(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 3))) >= 1"
    },
    "2169": {
        "sentence": "There is a black item in every box",
        "lf": "All(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)))"
    },
    "2174": {
        "sentence": "there is one grey box with has exactly one yellow object touching the edge",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_touching_wall(y))))) >= 1"
    },
    "2175": {
        "sentence": "There are 2 black circle shapes",
        "lf": "count(filter_obj(all_items, lambda x: is_circle(x) and is_black(x))) == 2"
    },
    "2177": {
        "sentence": "There is 1 box with eactly 1 blue triangle",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))) == 1)) == 1"
    },
    "2179": {
        "sentence": "there is at least one grey square with exactly two objects",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)), 1)"
    },
    "2180": {
        "sentence": "There is a box with at least one square and at least three triangles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_shape(x.all_items_in_box(), Shape.SQUARE)), 1) and ge(count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)), 3)))"
    },
    "2181": {
        "sentence": "There is a box which has only two items and the color are the same.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and all_same_color(x.all_items_in_box())))"
    },
    "2185": {
        "sentence": "There is a box with a blue square and a circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_square(y))) and exist(filter_shape(x.all_items_in_box(), Shape.CIRCLE))))"
    },
    "2186": {
        "sentence": "There are exactly  two yellow circles touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and is_touching_wall(x, Side.BOTTOM))) == 2"
    },
    "2192": {
        "sentence": "there are exactly two blue objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_touching_wall(x))) == 2"
    },
    "2193": {
        "sentence": "There is exactly one black circle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 1"
    },
    "2194": {
        "sentence": "There is a box with four items and the two items are yellow in color",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "2196": {
        "sentence": "there are exactly four objects touching any edge",
        "lf": "count(filter_obj(all_items, is_touching_wall)) == 4"
    },
    "2197": {
        "sentence": "There is a box with a blue triangle and two yelow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y))) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "2198": {
        "sentence": "There is a box with a yellow triangle, a black triangle and at least two blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_triangle(y))) and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y))) and ge(count(filter_color(x.all_items_in_box(), Color.BLUE)), 2)))"
    },
    "2199": {
        "sentence": "Black square is not touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and NOT(is_touching_wall(x))))"
    },
    "2204": {
        "sentence": "There is a yellow item closely touching a corner of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_closely_touching_corner(x)))"
    },
    "2205": {
        "sentence": "There is a black circle closely touching a corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_circle(x) and is_closely_touching_corner(x)))"
    },
    "2209": {
        "sentence": "There is a box with items of all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 3))"
    },
    "2210": {
        "sentence": "There is a triangle touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: is_triangle(x) and is_touching_corner(x)))"
    },
    "2211": {
        "sentence": "There is a box with at least one blue circle and a blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))), 1) and exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_triangle(y)))))"
    },
    "2212": {
        "sentence": "There is only one item closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_closely_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "2213": {
        "sentence": "There is a box with a yellow square touching the wall.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y) and is_touching_wall(y)))))"
    },
    "2216": {
        "sentence": "There is a box with multiple items and the two are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 3) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "2218": {
        "sentence": "There is at least 1 black item in each box",
        "lf": "All(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 1))"
    },
    "2219": {
        "sentence": "There is a circle nearly touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: is_circle(x) and is_closely_touching_corner(x)))"
    },
    "2220": {
        "sentence": "There is a black square closely touching a wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_closely_touching_wall(x)))"
    },
    "2221": {
        "sentence": "one of the grey square has three circles",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 3)) == 1"
    },
    "2222": {
        "sentence": "at least one of the grey square contains exactly one object which is a triangle",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and is_triangle(unique(x.all_items_in_box())))), 1)"
    },
    "2223": {
        "sentence": "Each box has at least 1 black item",
        "lf": "All(all_boxes, lambda x: ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 1))"
    },
    "2224": {
        "sentence": "There is at least 1 box with only black and yellow items",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda y: is_black(y) or is_yellow(y)) and count(get_set_colors(x.all_items_in_box())) == 2)), 1)"
    },
    "2225": {
        "sentence": "The yellow triangle is touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x) and is_touching_wall(x)))"
    },
    "2229": {
        "sentence": "There are two items touching the corner.",
        "lf": "count(filter_obj(all_items, is_touching_corner)) == 2"
    },
    "2231": {
        "sentence": "There is at least 1 box with only blue and black items in it",
        "lf": "ge(count(filter_obj(all_boxes, lambda x: All(x.all_items_in_box(), lambda y: is_blue(y) or is_black(y)) and count(get_set_colors(x.all_items_in_box())) == 2)), 1)"
    },
    "2232": {
        "sentence": "there is a blue square touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: is_blue(x) and is_square(x) and is_touching_wall(x, Side.BOTTOM)))"
    },
    "2233": {
        "sentence": "There is a box with only one yellow square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1))"
    },
    "2235": {
        "sentence": "There are two blue items closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_blue(x) and is_closely_touching_wall(x, Side.BOTTOM))) >= 2"
    },
    "2236": {
        "sentence": "The small yellow square is nealy touching the wall.",
        "lf": "exist(filter_obj(all_items, lambda x: is_small(x) and is_yellow(x) and is_square(x) and is_closely_touching_wall(x)))"
    },
    "2237": {
        "sentence": "there are two yellow circles not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_circle(x) and NOT(is_touching_wall(x)))) == 2"
    },
    "2239": {
        "sentence": "There is a box with 4 items of 2 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(get_set_colors(x.all_items_in_box())) == 2))"
    },
    "2241": {
        "sentence": "Only one black item is touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_touching_wall(x))) == 1"
    },
    "2242": {
        "sentence": "There is a box with multiple items and two are black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 2) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "2246": {
        "sentence": "There is a box with six items and thee yellow square is touching the side.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6 and exist(filter_obj(x.all_items_in_box(), lambda y: is_yellow(y) and is_square(y) and is_touching_wall(y)))))"
    },
    "2247": {
        "sentence": "There is a box with a blue circle and at least one black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda y: is_blue(y) and is_circle(y))) and ge(count(filter_color(x.all_items_in_box(), Color.BLACK)), 1)))"
    },
    "2252": {
        "sentence": "There is a black item closely touching a box corner",
        "lf": "exist(filter_obj(all_items, lambda x: is_black(x) and is_closely_touching_corner(x)))"
    },
    "2254": {
        "sentence": "There is a box  with six items and one is touching the side.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6 and count(filter_obj(x.all_items_in_box(), is_touching_wall)) == 1))"
    },
    "2256": {
        "sentence": "There is a box with all 3 different colors and a black triangle touching the wall with its top.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 3 and exist(filter_obj(x.all_items_in_box(), lambda y: is_black(y) and is_triangle(y) and is_touching_wall(y, Side.TOP)))))"
    },
    "2257": {
        "sentence": "There is a box with seven items and the three black items are the same in shape.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 7 and exist(filter_obj(combinations(filter_color(x.all_items_in_box(), Color.BLACK), 3), all_same_shape))))"
    },
    "2258": {
        "sentence": "There is at most one yellow item closely touching the bottom of a box.",
        "lf": "le(count(filter_obj(all_items, lambda x: is_yellow(x) and is_closely_touching_wall(x, Side.BOTTOM))), 1)"
    },
    "2261": {
        "sentence": "There is exactly one circle closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_circle(x) and is_closely_touching_wall(x, Side.RIGHT))) == 1"
    },
    "2264": {
        "sentence": "There are two blue circles of different size in two different boxes.",
        "lf": "exist(filter_obj(combinations(all_boxes, 2), lambda x: exist(filter_obj(x[0].all_items_in_box(), lambda y: is_blue(y) and is_circle(y) and exist(filter_obj(x[1].all_items_in_box(), lambda z: is_blue(z) and is_circle(z) and NOT(equal_size(query_size(y), query_size(z)))))))))"
    },
    "2266": {
        "sentence": "there is exactly one black square touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and is_touching_wall(x, Side.BOTTOM))) == 1"
    },
    "2269": {
        "sentence": "There is a box with one item and it is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and is_black(unique(x.all_items_in_box()))))"
    },
    "2270": {
        "sentence": "There is 1 yellow item closely touching a corner",
        "lf": "count(filter_obj(all_items, lambda x: is_yellow(x) and is_closely_touching_corner(x))) == 1"
    },
    "2275": {
        "sentence": "There is a box which has three items and the two are black the other one is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and All(x.all_items_in_box(), is_black)))"
    },
    "2276": {
        "sentence": "There is 1 box with only 1 yellow item and it is a square",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and is_square(unique(filter_color(x.all_items_in_box(), Color.YELLOW))))) >= 1"
    },
    "2278": {
        "sentence": "There is a box with three items and one is touching the side.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_obj(x.all_items_in_box(), is_touching_wall)) == 1))"
    },
    "2280": {
        "sentence": "There is a box with 3 items at most of 2 different colors at most.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and le(count(get_set_colors(x.all_items_in_box())), 2)))"
    },
    "2282": {
        "sentence": "There is a box with two items and the one item is black.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "2285": {
        "sentence": "There is a box with at least 6 items of all 3 different colors.",
        "lf": "exist(filter_obj(all_boxes, lambda x: ge(count(x.all_items_in_box()), 6) and count(get_set_colors(x.all_items_in_box())) == 3))"
    },
    "2287": {
        "sentence": "There are two triangles closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_triangle(x) and is_closely_touching_wall(x, Side.BOTTOM))) >= 2"
    },
    "2289": {
        "sentence": "There is 1 box with exactly 1 black item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1)) >= 1"
    },
    "2291": {
        "sentence": "There is a grey box with exactly three objects where the objects are blue and yellow in color",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and All(x.all_items_in_box(), lambda y: is_blue(y) or is_yellow(y)) and count(get_set_colors(x.all_items_in_box())) == 2))"
    },
    "2294": {
        "sentence": "There is 1 box with exactly 1 blue item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1)) == 1"
    },
    "2297": {
        "sentence": "None of the yellow triangles are touching the base",
        "lf": "All(filter_obj(all_items, lambda x: is_yellow(x) and is_triangle(x)), lambda x: NOT(is_touching_wall(x, Side.BOTTOM)))"
    },
    "2298": {
        "sentence": "there are exactly two black squares not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_black(x) and is_square(x) and NOT(is_touching_wall(x)))) == 2"
    },
    "2299": {
        "sentence": "There is an item touching the corner.",
        "lf": "exist(filter_obj(all_items, is_touching_corner))"
    },
    "2303": {
        "sentence": "There is a box with 4 items of all 3 different colors and one yellow circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and count(get_set_colors(x.all_items_in_box())) == 3 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_circle(x)))) == 1))"
    },
    "2304": {
        "sentence": "There is  a black item touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND( is_black(x), is_touching_wall(x))))"
    },
    "2306": {
        "sentence": "Each grey square has exactly one yellow object",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 1)) == 3"
    },
    "2310": {
        "sentence": "There are exactly two circles closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), is_touching_wall(x)))) == 2"
    },
    "2311": {
        "sentence": "There are 2 boxes with 1 black item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1)) == 2"
    },
    "2317": {
        "sentence": "There is a box with only one item that is not a triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1 and NOT(exist(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)))))"
    },
    "2319": {
        "sentence": "There is a box with a blue item closely touching a yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: filter_obj(combinations(x.all_items_in_box(), 2), lambda y: ((is_yellow(y[0]) and is_blue(y[1])) or (is_yellow(y[1]) and is_blue(y[0]))) and is_closely_touching(y[0], y[1]))))"
    },
    "2320": {
        "sentence": "There is a box with a black square and a blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_triangle(x))))))"
    },
    "2322": {
        "sentence": "there is exactly one black triangle touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_touching_wall(x)))) == 1"
    },
    "2324": {
        "sentence": "There are two items closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x:  is_closely_touching_wall(x, Side.BOTTOM))) >= 2"
    },
    "2327": {
        "sentence": "There are triangles closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_triangle(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "2328": {
        "sentence": "There is a box with a yellow square and two blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_square(x)))) and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "2332": {
        "sentence": "There is a box with a yellow triangle and two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x:  exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))) and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2))"
    },
    "2335": {
        "sentence": "There is 1 circle closely touching a corner",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), is_closely_touching_corner(x)))) == 1"
    },
    "2336": {
        "sentence": "There is a box with a blue square and at least two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))) and count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2))"
    },
    "2337": {
        "sentence": "There is a grey box with only one yellow square",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_square(x)))) == 1)) == 1"
    },
    "2339": {
        "sentence": "There are 3 yellow items",
        "lf": "count(filter_color(all_items, Color.YELLOW)) == 3"
    },
    "2341": {
        "sentence": "There is 1 black circle closely touching a corner",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_closely_touching_corner(x)))) == 1"
    },
    "2342": {
        "sentence": "there is a grey square with objects of blue and black color only",
        "lf": "exist(filter_obj(all_boxes, lambda x: get_set_colors(x.all_items_in_box()) == set([Color.BLUE, Color.BLACK])))"
    },
    "2343": {
        "sentence": "There is only one box which has no blue item.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 0)) == 1"
    },
    "2344": {
        "sentence": "There is a blue circle and at least one black item.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_circle(x)))) == 1 and count(filter_obj(all_items, lambda x: is_black(x))) >= 1"
    },
    "2348": {
        "sentence": "there are exactly two objects touching the base",
        "lf": "count(filter_obj(all_items, lambda x: is_touching_wall(x, Side.BOTTOM))) == 2"
    },
    "2350": {
        "sentence": "None of the yellow triangles are touching any edge",
        "lf": "NOT(exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_triangle(x)), is_touching_wall(x)))))"
    },
    "2351": {
        "sentence": "There are 5 blue items",
        "lf": "count(filter_color(all_items, Color.BLUE)) == 5"
    },
    "2357": {
        "sentence": "There is a box with 4 yellow and one blue item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 4 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "2359": {
        "sentence": "There is a box with black square and blue circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))) == 1))"
    },
    "2362": {
        "sentence": "There is a box with exactly four items including black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4 and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x))))))"
    },
    "2364": {
        "sentence": "there are exactly two triangles touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_triangle(x), is_touching_wall(x)))) == 2"
    },
    "2365": {
        "sentence": "There is a yellow circle touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "2372": {
        "sentence": "There is a box which has only two items and the color is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "2374": {
        "sentence": "There are 3 yellow circles",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_circle(x)))) == 3"
    },
    "2378": {
        "sentence": "There are 2 boxes with t least 2 black items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) >= 2)) == 2"
    },
    "2379": {
        "sentence": "There is 1 box with only yellow and blue items in it",
        "lf": "count(filter_obj(all_boxes, lambda x: get_set_colors(x.all_items_in_box()) == set([Color.YELLOW, Color.BLUE]))) == 1"
    },
    "2380": {
        "sentence": "one of the grey box contains exactly two yellow squares",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_square(x)))) == 2))"
    },
    "2382": {
        "sentence": "There is exactly one yellow object touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND( is_yellow(x), is_touching_wall(x)))) == 1"
    },
    "2383": {
        "sentence": "There are 2 boxes that have at least 1 black circle",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))))) == 2"
    },
    "2385": {
        "sentence": "There is a box with black and yellow items of which there are 2 items of different size.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.BLACK)) and exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and NOT(all_same_size(x.all_items_in_box()))))"
    },
    "2387": {
        "sentence": "t least one grey box contains exactly two objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "2390": {
        "sentence": "There is a blue square closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "2391": {
        "sentence": "There is a box with a yellow item, a black triangle, a black circle and at least one blue square.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x.all_items_in_box(), Color.YELLOW)) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))))) == 1"
    },
    "2393": {
        "sentence": "There is 1 box with only 1 yellow item in it",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)) == 1"
    },
    "2395": {
        "sentence": "there are at least two yellow objects not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), NOT(is_touching_wall(x))))) >= 2"
    },
    "2396": {
        "sentence": "There is a yellow square touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_corner(x))))"
    },
    "2397": {
        "sentence": "There is a box with a blue square and two yellow circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))) and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_circle(x)))) == 2))"
    },
    "2399": {
        "sentence": "There is a box with 4 items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4))"
    },
    "2401": {
        "sentence": "Each box has at least 1 yellow item",
        "lf": "all_same_attribute(all_boxes, lambda x: exist(filter_obj(x, lambda x: is_yellow(x))))"
    },
    "2406": {
        "sentence": "There is a blue circle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "2408": {
        "sentence": "There is no item closely touching the bottom of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: is_closely_touching_wall(x, Side.BOTTOM)))"
    },
    "2411": {
        "sentence": "There is a box which has three blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 3))"
    },
    "2412": {
        "sentence": "There are exactly two items closely touching the bottom of a box.",
        "lf": "count(filter_obj(all_items, lambda x: is_closely_touching_wall(x, Side.BOTTOM))) == 2"
    },
    "2413": {
        "sentence": "One of the grey box has atleast one triangle and one square touching the edge",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_triangle(x), is_touching_wall(x, Side.ANY)))), exist(filter_obj(x, lambda x: AND(is_square(x), is_touching_wall(x, Side.ANY)))))))"
    },
    "2415": {
        "sentence": "There are 2 boxes that have at least 1 yellow item",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_color(x, Color.YELLOW)))) == 2"
    },
    "2416": {
        "sentence": "There are five items touching the line of the box.",
        "lf": "count(filter_obj(all_items, lambda x: is_touching_wall(x, Side.ANY))) == 5"
    },
    "2421": {
        "sentence": "There is box with a yellow triangle of medium size and a black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(AND(is_yellow(x), is_medium(x)), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))))))"
    },
    "2422": {
        "sentence": "there is a yellow circle touching an edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "2425": {
        "sentence": "There is 1 box with 2 blue squares",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))) == 2))"
    },
    "2426": {
        "sentence": "There is at least one blue triangle closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_triangle(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "2427": {
        "sentence": "yellow triangle is not touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_triangle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "2431": {
        "sentence": "There are two blue objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_touching_wall(x, Side.ANY)))) == 2"
    },
    "2432": {
        "sentence": "There is a box with only blue and black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(contained({Color.BLUE, Color.BLACK}, get_set_colors(x)), count(get_set_colors(x)) == 2)))"
    },
    "2435": {
        "sentence": "There are four yellow objects not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), not is_touching_wall(x, Side.ANY)))) == 4"
    },
    "2436": {
        "sentence": "There are 2 boxes with at least 1 black triangle",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))))) == 2"
    },
    "2439": {
        "sentence": "There is a yellow square touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x, Side.ANY))))"
    },
    "2440": {
        "sentence": "There is a box with three squares and other items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x) >= 4, count(filter_shape(x, Shape.SQUARE)) == 3)))"
    },
    "2441": {
        "sentence": "There is at least 1 black circle in each box",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))))) == 3"
    },
    "2442": {
        "sentence": "There are exactly two yellow circles not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), not is_touching_wall(x, Side.ANY)))) == 2"
    },
    "2445": {
        "sentence": "There is a triangle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_triangle(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "2447": {
        "sentence": "There is a box with 2 items at most of which one is yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_color(x, Color.YELLOW)), count(x) <= 2)))"
    },
    "2449": {
        "sentence": "there are two yellow triangles touching the base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_triangle(x)), is_touching_wall(x, Side.BOTTOM)))) == 2"
    },
    "2451": {
        "sentence": "There is 1 black circle",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_circle(x)))) == 1"
    },
    "2453": {
        "sentence": "There is a blue circle nearly touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_closely_touching_corner(x, Side.ANY))))"
    },
    "2454": {
        "sentence": "There is no item closely touching a wall of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: is_closely_touching_wall(x, Side.ANY)))"
    },
    "2455": {
        "sentence": "There is a box with a blue circle and a blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_blue(x), is_circle(x)))), exist(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))))))"
    },
    "2456": {
        "sentence": "There is a box with 1 black triangle and 1 black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))))))"
    },
    "2459": {
        "sentence": "There is a box with multiple items and the two are yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_color(x, Color.YELLOW)) == 2, count(x) >= 3)))"
    },
    "2461": {
        "sentence": "There are 3 circles",
        "lf": "count(filter_shape(all_items, Shape.CIRCLE)) == 3"
    },
    "2462": {
        "sentence": "There is a box that has three blue items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x, Color.BLUE)) == 3))"
    },
    "2465": {
        "sentence": "None of the black triangles are touching the edge",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "2468": {
        "sentence": "There is a box that has two black items which are triangle and circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x))))), count(filter_color(x, Color.BLACK)) == 2)))"
    },
    "2469": {
        "sentence": "there are at least three squares not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_square(x), not is_touching_wall(x, Side.ANY)))) >= 3"
    },
    "2471": {
        "sentence": "One of the grey square has exactly one object",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 1))"
    },
    "2473": {
        "sentence": "There are 2 yellow circles in one box",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x, lambda x: AND(is_yellow(x), is_circle(x)))) == 2))"
    },
    "2474": {
        "sentence": "There is a box that has one black triangle and one black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_triangle(x)))), exist(filter_obj(x, lambda x: AND(is_black(x), is_square(x)))))))"
    },
    "2477": {
        "sentence": "There is at least one box, which has a black circle and a blue square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))), exist(filter_obj(x, lambda x: AND(is_blue(x), is_square(x)))))))"
    },
    "2480": {
        "sentence": "There is a square closely touching a wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_square(x), is_closely_touching_wall(x, Side.ANY))))"
    },
    "2482": {
        "sentence": "There is a box with at least two black circles and exactly one blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x, lambda x: AND(is_black(x), is_circle(x)))) >= 2, count(filter_obj(x, lambda x: AND(is_blue(x), is_triangle(x)))) == 1)))"
    },
    "2486": {
        "sentence": "There is a yellow square touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_wall(x, Side.ANY))))"
    },
    "2495": {
        "sentence": "one of the grey box has exactly seven objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x) == 7))"
    },
    "2496": {
        "sentence": "There are 3 yellow items touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.ANY)))) == 3"
    },
    "2497": {
        "sentence": "There is no square closely touching right wall of a box.",
        "lf": "not exist(filter_obj(all_items, lambda x: AND(is_square(x), is_closely_touching_wall(x, Side.RIGHT))))"
    },
    "2500": {
        "sentence": "there is exactly one yellow object is touching an edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "2501": {
        "sentence": "There is a box with 2 blue, 2 black, and 2 yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 2))"
    },
    "2504": {
        "sentence": "There is a box with at least 3 items of which two are blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 2))"
    },
    "2505": {
        "sentence": "There is a box, which has exactly two black circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))) == 2))"
    },
    "2506": {
        "sentence": "There are two boxes with exactly three items.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3)) == 2"
    },
    "2507": {
        "sentence": "One of the grey box has only triangles",
        "lf": "count(filter_obj(all_boxes, lambda x: get_set_shapes(x.all_items_in_box()) == set([Shape.TRIANGLE]))) == 1"
    },
    "2510": {
        "sentence": "there is a yellow circle not touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), NOT(is_touching_wall(x)))))"
    },
    "2511": {
        "sentence": "Black square is touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_touching_wall(x))))"
    },
    "2512": {
        "sentence": "one of the grey box contains exactly one object",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "2515": {
        "sentence": "There is a square closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_square(x), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "2519": {
        "sentence": "there is exactly on black circle not touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_circle(x), is_black(x)), NOT(is_touching_wall(x))))) == 1"
    },
    "2521": {
        "sentence": "There are two black triangles not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_triangle(x)), NOT(is_touching_wall(x))))) == 2"
    },
    "2522": {
        "sentence": "There is only one small item touching the wall.",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_small(x), is_touching_wall(x)))) == 1"
    },
    "2523": {
        "sentence": "There is 1 yellow circle",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_circle(x)))) == 1"
    },
    "2524": {
        "sentence": "There is only 1 box with blue and yellow items",
        "lf": "count(filter_obj(all_boxes, lambda x: get_set_colors(x.all_items_in_box()) == set([Color.BLUE, Color.YELLOW]))) == 1"
    },
    "2528": {
        "sentence": "There is 1 square",
        "lf": "count(filter_obj(all_items, lambda x: is_square(x))) == 1"
    },
    "2529": {
        "sentence": "There is at least 1 box with a black circle and a black triangle",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x))))))"
    },
    "2531": {
        "sentence": "yellow squares are not touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), NOT(is_touching_wall(x)))))"
    },
    "2533": {
        "sentence": "There is a box with 6 items of 2 different colors of which there are 2 yellow ones at most.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 6 and count(get_set_colors(x.all_items_in_box())) == 2 and count(filter_color(x.all_items_in_box(), Color.YELLOW)) <= 2))"
    },
    "2534": {
        "sentence": "one of the grey square has exactly four objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 4))"
    },
    "2538": {
        "sentence": "There is a box with 3 items od which 2 have the same shape.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 3 and count(get_set_shapes(x.all_items_in_box())) == 2))"
    },
    "2540": {
        "sentence": "There is exactly one blue circle touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x))))"
    },
    "2546": {
        "sentence": "There is a yellow square in the corner of the box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_touching_corner(x))))"
    },
    "2548": {
        "sentence": "There is 1 box with just 1 item",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 1))"
    },
    "2549": {
        "sentence": "There are two boxes that has the same number of items.",
        "lf": "count(set([count(all_boxes[0]), count(all_boxes[1]), count(all_boxes[2])])) <=2"
    },
    "2550": {
        "sentence": "There are 2 black items",
        "lf": "count(filter_color(all_items, Color.BLACK)) == 2"
    },
    "2552": {
        "sentence": "There is one box with 2 yellow triangles",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_yellow(x), is_triangle(x)))) == 2))"
    },
    "2554": {
        "sentence": "There is 1 box with 1 yellow item and 1 blue item",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1 and count(filter_color(x.all_items_in_box(), Color.BLUE)) == 1))"
    },
    "2560": {
        "sentence": "there is a grey box with exactly two objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2))"
    },
    "2563": {
        "sentence": "there are exactly two blue objects touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND( is_blue(x), is_touching_wall(x)))) == 2"
    },
    "2567": {
        "sentence": "There is 1 box with 4 yellow items",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 4))"
    },
    "2568": {
        "sentence": "There is at least one yellow item closely touching right wall of a box.",
        "lf": "count(filter_obj(all_items, lambda x: AND( is_yellow(x), is_closely_touching_wall(x, Side.RIGHT)))) >= 1"
    },
    "2572": {
        "sentence": "There is a box with ble and yellow items of which one is a small yellow triangle and another is a small blue triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: get_set_colors(x.all_items_in_box()) == {Color.BLUE, Color.YELLOW} and exist(filter_obj(x.all_items_in_box(), lambda y: AND(AND(is_small(y), is_yellow(y)), is_triangle(y)))) and exist(filter_obj(x.all_items_in_box(), lambda y: AND(AND(is_small(y), is_blue(y)), is_triangle(y))))))"
    },
    "2573": {
        "sentence": "there are three blue objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_blue(x), is_touching_wall(x)))) == 3"
    },
    "2575": {
        "sentence": "There are 3 black sqaures",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_black(x), is_square(x)))) == 3"
    },
    "2576": {
        "sentence": "There is a box with a black circle and a blue circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))) and exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x))))))"
    },
    "2578": {
        "sentence": "There is a box with exactly 3 black items.",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 3)) == 1"
    },
    "2580": {
        "sentence": "There is a box that has three circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 3))"
    },
    "2581": {
        "sentence": "There are 2 boxes with only 1 yellow item",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 1)) == 2"
    },
    "2582": {
        "sentence": "There is a box with items of 2 different colors of which only one is blue.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(get_set_colors(x.all_items_in_box())) == 2 and Color.BLUE in get_set_colors(x.all_items_in_box()))) "
    },
    "2584": {
        "sentence": "there are exactly four objects touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: is_touching_wall(x))) == 4"
    },
    "2590": {
        "sentence": "one of the grey square contains exactly one black object",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_color(x.all_items_in_box(), Color.BLACK)) == 1))"
    },
    "2594": {
        "sentence": "There is a box with a big yelllow square and another yellow item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(AND(is_yellow(x), is_big(x)), is_square(x)))) and count(filter_color(x.all_items_in_box(), Color.YELLOW)) >= 2))"
    },
    "2596": {
        "sentence": "There is a box with two black circles.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_circle(x)))) == 2))"
    },
    "2599": {
        "sentence": "There is a circle touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(is_circle(x), is_touching_wall(x))))"
    },
    "2603": {
        "sentence": "There are seven items in a box and some of the items are yellow.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 7, Any(x.all_items_in_box(), is_yellow))))"
    },
    "2604": {
        "sentence": "There is a box which has four items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) <= 4))"
    },
    "2606": {
        "sentence": "There is a box with a yellow circle and a black circle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(filter_obj(x.all_items_in_box(), lambda x: is_black(x) and is_circle(x))) >= 1, count(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x) and is_circle(x))) >= 1)))"
    },
    "2607": {
        "sentence": "There is a box that has only two items that are not the same.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 2, not all_same_shape(x.all_items_in_box()))))"
    },
    "2609": {
        "sentence": "There are 3 yellow squares",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_square(x), is_yellow(x)))) == 3"
    },
    "2610": {
        "sentence": "There is a black circle closely touching right wall of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_closely_touching_wall(x, Side.RIGHT), is_black(x)), is_circle(x))))"
    },
    "2611": {
        "sentence": "there is a black circle not touching any edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), not is_touching_wall(x, Side.ANY))))"
    },
    "2612": {
        "sentence": "There is a box wwith multiple items  and the 2 black are squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) >= 2 and count(filter_color(x.all_items_in_box(), Color.BLACK)) == 2 and get_set_shapes(filter_color(x.all_items_in_box(), Color.BLACK)) == {Shape.SQUARE}))"
    },
    "2613": {
        "sentence": "there is exactly one black square touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "2614": {
        "sentence": "there is exactly one yellow object touching any edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_yellow(x), is_touching_wall(x, Side.ANY)))) == 1"
    },
    "2615": {
        "sentence": "There is a box with a yellow circle, a blue square and at least one black squares.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_circle(x), is_yellow(x)))) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_square(x)))) == 1 and count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) >= 1))"
    },
    "2621": {
        "sentence": "There is at least one yellow square closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: is_yellow(x) and is_square(x) and is_closely_touching_wall(x, side=Side.BOTTOM)))"
    },
    "2624": {
        "sentence": "there is at least one grey square which contains only triangle objects",
        "lf": "exist(filter_obj(all_boxes, lambda x: get_set_shapes(x) == {Shape.TRIANGLE}))"
    },
    "2625": {
        "sentence": "There is a box with only one small black item.",
        "lf": "exist(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda y: is_small(y) and is_black(y))) == 1))"
    },
    "2626": {
        "sentence": "There is a box with two yellow items, two blue items and two black items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(count(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x))) == 2, count(filter_obj(x.all_items_in_box(), lambda x: is_black(x))) == 2), count(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))) == 2)))"
    },
    "2629": {
        "sentence": "There are exactly two circles not touching the edge",
        "lf": "count(filter_obj(all_items, lambda x: AND(is_circle(x), not is_touching_wall(x, Side.ANY)))) == 2"
    },
    "2630": {
        "sentence": "There are three items touching the side.",
        "lf": "count(filter_obj(all_items, lambda x: is_touching_wall(x, Side.ANY))) == 3"
    },
    "2632": {
        "sentence": "There is a blue circle touching the edge of the square.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_circle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "2633": {
        "sentence": "There is 1 box with only 2 items",
        "lf": "count(filter_obj(all_boxes, lambda x: count(x.all_items_in_box()) == 2)) == 1"
    },
    "2634": {
        "sentence": "There is a box with a blue circle and a black square.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x) and is_circle(x))), exist(filter_obj(x.all_items_in_box(), lambda x: is_black(x) and is_square(x))))))"
    },
    "2635": {
        "sentence": "There is a box with only blue and yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: is_blue(x))), exist(filter_obj(x.all_items_in_box(), lambda x: is_yellow(x)))), not exist(filter_obj(x.all_items_in_box(), lambda x: is_black(x))))))"
    },
    "2636": {
        "sentence": "There is a yellow square touching the base",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_square(x), is_yellow(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "2639": {
        "sentence": "There is a box with a blue circle and a black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))))))"
    },
    "2641": {
        "sentence": "There is at least one box with a black square and a black triangle.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_triangle(x)))))))"
    },
    "2643": {
        "sentence": "There is a yellow circle touching the edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_circle(x)), is_touching_wall(x, Side.ANY))))"
    },
    "2645": {
        "sentence": "There is a black square touching the side.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_touching_wall(x, Side.ANY))))"
    },
    "2646": {
        "sentence": "there are exactly two black squares touching the bottom base",
        "lf": "count(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_square(x)), is_touching_wall(x, Side.BOTTOM)))) == 2"
    },
    "2648": {
        "sentence": "there is at least one black circle touching the bottom edge",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_black(x), is_circle(x)), is_touching_wall(x, Side.BOTTOM))))"
    },
    "2650": {
        "sentence": "There is a box which has four items and the three are the same in shape.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 4, OR(OR(count(filter_shape(x.all_items_in_box(), Shape.TRIANGLE)) == 3, count(filter_shape(x.all_items_in_box(), Shape.SQUARE)) == 3), count(filter_shape(x.all_items_in_box(), Shape.CIRCLE)) == 3))))"
    },
    "2651": {
        "sentence": "There is a blue square touching the corner.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_blue(x), is_square(x)), is_touching_corner(x))))"
    },
    "2652": {
        "sentence": "There are exactly two objects in a grey box of which one is a triangle",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(count(x.all_items_in_box()) == 2, Any(x.all_items_in_box(), is_triangle))))"
    },
    "2655": {
        "sentence": "There is a yellow square closely touching the bottom of a box.",
        "lf": "exist(filter_obj(all_items, lambda x: AND(AND(is_yellow(x), is_square(x)), is_closely_touching_wall(x, Side.BOTTOM))))"
    },
    "2660": {
        "sentence": "There is 1 box with 2 black squares",
        "lf": "count(filter_obj(all_boxes, lambda x: count(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))) == 2)) == 1"
    },
    "2661": {
        "sentence": "There is a box that a black and blue items are touching side of the box.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_touching_wall(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_touching_wall(x)))))))"
    },
    "2663": {
        "sentence": "There is a box with a black square, a blue circle and three yellow items.",
        "lf": "exist(filter_obj(all_boxes, lambda x: AND(AND(exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_black(x), is_square(x)))), exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_circle(x))))), count(filter_color(x.all_items_in_box(), Color.YELLOW)) == 3)))"
    },
    "2665": {
        "sentence": "There are two boxes with a blue triangle.",
        "lf": "count(filter_obj(all_boxes, lambda x: exist(filter_obj(x.all_items_in_box(), lambda x: AND(is_blue(x), is_triangle(x)))))) == 2"
    }
}